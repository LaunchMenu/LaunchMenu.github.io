{"pageProps":{"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", {\n    \"name\": \"Key handlers\",\n    \"depth\": 1\n  }, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Key handlers\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"key handlers (aka key event listeners) are used for most of the interaction with LaunchMenu. They are callback functions that listen for key events and indicate whether the event was caught.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=IKeyEventListener.ts source=https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/keyHandler/_types/IKeyEventListener.ts\",\n    \"title\": \"IKeyEventListener.ts\",\n    \"source\": \"https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/keyHandler/_types/IKeyEventListener.ts\"\n  }, \"export type IKeyEventListener =\\n    /**\\n     * Handles a key event being fired\\n     * @param event The event that was fired\\n     * @returns Whether the event was caught\\n     */\\n    (event: KeyEvent) => boolean | void | Promise<boolean | void>;\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Sometimes key handlers require setup and disposal. For these types of listeners the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IDisposableKeyEventListener\"), \" interface exists. This is an object that contains both a normal \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IKeyEventListener\"), \" as well as a function that can be used to dispose it. This disposal should manually be taken care of, which is quite simple when used in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UILayer\"), \".\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=IDisposableKeyEventListener.ts source=https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/textFields/interaction/_types/IDisposableKeyEventListener.ts\",\n    \"title\": \"IDisposableKeyEventListener.ts\",\n    \"source\": \"https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/textFields/interaction/_types/IDisposableKeyEventListener.ts\"\n  }, \"export type IDisposableKeyEventListener = {\\n    /** The key handler itself */\\n    handler: IKeyEventListener;\\n    /** A function to dispose any dependencies the handler may have created */\\n    destroy: () => void;\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Below is an example from the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/concepts/ui/menu\"\n  }, \"menus page\"), \" where we can see disposal of such a handler:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"title=src/index.tsx source=https://github.com/LaunchMenu/LM-applet-examples/tree/main/examples/menuKeyHandler\",\n    \"title\": \"src/index.tsx\",\n    \"source\": \"https://github.com/LaunchMenu/LM-applet-examples/tree/main/examples/menuKeyHandler\"\n  }, \"export default declare({\\n    info,\\n    settings,\\n    async search(query, hook) {\\n        return {\\n            children: searchAction.get(items),\\n        };\\n    },\\n    open({context, onClose}) {\\n        context.open(\\n            new UILayer(\\n                (context, close) => {\\n                    const menu = new Menu(context, items);\\n                    const {handler, destroy} = createKeyHandler(menu, {\\n                        onExit: close,\\n                    });\\n                    return {\\n                        menu: menu,\\n                        menuHandler: handler,\\n                        onClose: () => {\\n                            destroy();\\n                            onClose();\\n                        },\\n                    };\\n                },\\n                {\\n                    path: \\\"Example\\\",\\n                }\\n            )\\n        );\\n    },\\n});\\n\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Propagation\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Propagation\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Using the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/concepts/ui/uilayers\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"UILayer\")), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/concepts/base/iocontext\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"IOContext\")), \" components a stack of these listeners will be created. Events are then dispatched from top to bottom. Whenever propagation is stopped by the callback returning \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \", it will prevent the listeners below from receiving the event.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/concepts/ui/menu#controller\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"createStandardMenuKeyHandler\")), \" will also use the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/concepts/interaction/common-actions#key-handler-action\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"keyHandlerAction\")), \" to propagate key events to items in the menu, as well as the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/concepts/interaction/common-actions#context-menu-action\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"contextMenuAction\")), \" to propagate events to items in the context menu of the current selection. Bindings of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"keyHandlerAction\"), \" are event listeners similar to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IKeyEventListener\"), \", except they can indicate to stop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"immediate propagation\"), \" as well, and contain some more context data:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=IItemKeyHandler.ts source=https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/actions/types/keyHandler/_types/IItemKeyHandler.ts\",\n    \"title\": \"IItemKeyHandler.ts\",\n    \"source\": \"https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/actions/types/keyHandler/_types/IItemKeyHandler.ts\"\n  }, \"export type IItemKeyHandler = {\\n    /**\\n     * Informs about key events and returns whether it was caught\\n     * @param event The event to be executed\\n     * @param menu The menu that the item is in that forwarded this event\\n     * @param onExecute The item execution listener for the menu\\n     * @returns Whether the event was caught\\n     */\\n    onKey(\\n        event: KeyEvent,\\n        menu: IMenu,\\n        onExecute?: IMenuItemExecuteCallback\\n    ): ISyncItemKeyHandlerResponse | Promise<ISyncItemKeyHandlerResponse>;\\n};\\n\\ntype ISyncItemKeyHandlerResponse =\\n    | void\\n    /** The value for stop propagation, stopImmediatePropagation defaults to false */\\n    | boolean\\n    | {\\n          /** Stops propagation to handlers with lower priority (down the handler stack) */\\n          stopPropagation?: boolean;\\n          /** Stops propagation to handlers with the same priority (other item handlers) */\\n          stopImmediatePropagation?: boolean;\\n      };\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The items are logically on the same level, so when propagation is stopped all items will still receive the events, but layers below won't receive them. If immediate propagation is stopped even items on the same level but later in line won't receive the event anymore.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"For usage examples see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/concepts/interaction/common-actions#key-handler-action\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"keyHandlerAction\")), \" on the actions page.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Key event\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Key event\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"All key event listeners will receive events of the type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KeyEvent\"), \". This is a class that contains event information and some helpers to make testing for keys a bit simpler:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=KeyEvent.ts source=https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/keyHandler/KeyEvent.ts\",\n    \"title\": \"KeyEvent.ts\",\n    \"source\": \"https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/keyHandler/KeyEvent.ts\"\n  }, \"export class KeyEvent {\\n    /** The keys that were held down when this event was fired */\\n    public held: IKey[] = [];\\n\\n    /** Whether the ctrl key is down */\\n    public ctrl: boolean;\\n    /** Whether the shift key is down */\\n    public shift: boolean;\\n    /** Whether the alt key is down */\\n    public alt: boolean;\\n    /** Whether the meta key is down */\\n    public meta: boolean;\\n\\n    /** The keyboard event type */\\n    public type: IKeyEventType;\\n    /** The key that was altered */\\n    public key: IKey;\\n\\n    /** The original event this event was obtained from if any */\\n    public original?: KeyboardEvent;\\n\\n    /**\\n     * Creates a new keyboard event\\n     * @param event The data for the event to create\\n     * @param heldKeys The keys that are also held currently\\n     */\\n    public constructor(event: IKeyEventInput, heldKeys?: IKey[]);\\n\\n    /**\\n     * Sets the keys that are also held while this event was created\\n     * @param keys The keys that are held, overrides the previous keys\\n     */\\n    public setHeldKeys(keys: IKey[]): void;\\n\\n    /**\\n     * Checks whether this event is equal to the given description\\n     * @param keys The keys to check for\\n     * @param type The event type to check for, defaults to \\\"down\\\"\\n     */\\n    public is(\\n        keys: IKeyMatcher | IKeyMatcher[],\\n        type: IKeyEventType | IKeyEventType[] | null = \\\"down\\\"\\n    ): boolean;\\n\\n    /**\\n     * Checks whether this event includes the pressed sequence (more keys may be held)\\n     * @param keys The keys to check for\\n     * @param type The event type to check for, defaults to \\\"down\\\"\\n     */\\n    public matches(\\n        keys: IKeyMatcher | IKeyMatcher[],\\n        type: IKeyEventType | IKeyEventType[] | null = \\\"down\\\"\\n    ): boolean;\\n\\n    /**\\n     * Determines whether the held keys include all the specified key(s)\\n     * @param keys The key(s) to check\\n     * @returns Whether it is included\\n     */\\n    public includes(keys: IKeyMatcher | IKeyMatcher[]): boolean;\\n\\n    /**\\n     * Checks whether any of the modifier keys were held\\n     */\\n    public hasModifiers(): boolean;\\n}\\n\\ntype IKeyEventType = \\\"down\\\" | \\\"up\\\" | \\\"repeat\\\";\\ntype IKey = {\\n    /** The ID of a key */\\n    readonly id: IKeyId;\\n    /** The name of a key */\\n    readonly name: IKeyName;\\n    /** The character of a key if any */\\n    readonly char?: string;\\n};\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".is\"), \" method can be used to check whether the given event exactly corresponds to the given sequence of keys being pressed right now, and matches the event type: up, down or repeat. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"repeat\"), \" means that the key was already pressed down, but the operating system (OS) started repeating it since it wasn't released yet.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matches\"), \" method is a bit looser and checks whether the given event includes the set of specified keys, and that one of those specified keys was just pressed or released. So when checking for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matches([\\\"a\\\", \\\"b\\\"], \\\"down\\\")\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b\"), \" were already down, it won't trigger when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"c\"), \" was just pressed in addition. It will trigger if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"c\"), \" are down and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b\"), \" was pressed afterwards.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".includes\"), \" method is once again looser, not checking for the key event type at all, and just determining whether the given keys are present in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"held\"), \" list of the event, or is the event key itself.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".hasModifiers\"), \" method simply checks whether \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"alt\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctrl\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"meta\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shift\"), \" was held down.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Finally the event contains some simple properties that can be used for manual testing of the event. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"held\"), \" property is a list of all keys that are currently held down. This list excludes the key event that was just triggered (unless it was already held down prior to the event, for instance on the repeat type).\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Usage of these \\\"raw\\\" events should be limited since it makes it harder for users to customize the controls. You should instead try to use the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#key-pattern\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"KeyPattern\"), \" class\"), \" and an appropriate setting whenever possible.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Below is an example of how these raw events could be used:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=src/index.tsx source=https://github.com/LaunchMenu/LM-applet-examples/tree/main/examples/keyHandlerEvents\",\n    \"title\": \"src/index.tsx\",\n    \"source\": \"https://github.com/LaunchMenu/LM-applet-examples/tree/main/examples/keyHandlerEvents\"\n  }, \"export default declare({\\n    info,\\n    settings,\\n    open({context, onClose}) {\\n        const contentHandler: IKeyEventListener = event => {\\n            if (event.matches([\\\"ctrl\\\", \\\"a\\\", \\\"s\\\", \\\"d\\\"], \\\"up\\\")) {\\n                alert(\\\"ctrl+a+s+d released\\\");\\n                return true;\\n            }\\n        };\\n\\n        context.open(\\n            new UILayer(\\n                [\\n                    () => ({menu: new Menu(context, items), onClose}),\\n                    // Note only the contentHandler can be used without a view, menu and field handler's can't be used without a view\\n                    {contentHandler},\\n                ],\\n                {path: \\\"Example\\\"}\\n            )\\n        );\\n    },\\n});\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Now whenever the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"example\"), \" applet is opened, it will add the custom key handler to the stack. This handler will detect when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctrl+a+s+d\"), \" was held and is released. We then simply show an alert, and we return \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" to indicate the event was captured. It won't detect when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctrl+a+s+d+f\"), \" was held and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"f\"), \" is released, but it will detect when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctrl+a+s+d+f\"), \" was held and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" was released (resulting in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctrl+s+d+f\"), \" being held). If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".is\"), \" was used, neither of these cases would be detected.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Key pattern\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Key pattern\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KeyPattern\"), \" class can be used to specify a pattern that should be matched by an event. It captures the keys that should be held down, the event type to trigger on, and keys that may be present additionally.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=KeyPattern.ts source=https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/keyHandler/KeyPattern.ts\",\n    \"title\": \"KeyPattern.ts\",\n    \"source\": \"https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/keyHandler/KeyPattern.ts\"\n  }, \"export class KeyPattern {\\n    public static keySeparator = \\\"+\\\";\\n    public readonly patterns: IKeyArrayPatternData[];\\n\\n    /**\\n     * Creates the key pattern that can be tested against\\n     * @param pattern The pattern to be tested, in very simplified form, mostly intended for easy testing\\n     */\\n    public constructor(pattern: string);\\n\\n    /**\\n     * Creates the key pattern that can be tested against\\n     * @param pattern The pattern to be tested\\n     */\\n    public constructor(patterns: IKeyPatternData[]);\\n\\n    /**\\n     * Checks whether the given event matches the\\n     * @param event The event to check\\n     * @param ignoreType Whether to ignore the event type\\n     * @returns Whether a given event matches this pattern\\n     */\\n    public matches(event: KeyEvent, ignoreType: boolean = false): boolean;\\n\\n    /**\\n     * Checks whether the event matches this pattern as a modifier key\\n     * @param event The event to check\\n     */\\n    public matchesModifier(event: KeyEvent): boolean;\\n\\n    /**\\n     * Simplifies the pattern to a string (leaving out some data)\\n     */\\n    public toString(): string;\\n\\n    // Serialization\\n    /**\\n     * Serializes the pattern\\n     * @returns The serialized pattern\\n     */\\n    public serialize(): IKeyArrayPatternData[];\\n\\n    // Helpers\\n    /**\\n     * Retrieves the purely string representation of a key pattern\\n     * @param keys The keys in the pattern\\n     * @returns The string form\\n     */\\n    public static toStringPattern(keys: IKeyMatcher[]): string;\\n\\n    /**\\n     * Retrieves the array representation of a key pattern\\n     * @param keys The key pattern\\n     * @returns The array form\\n     */\\n    public static toArrayPattern(keys: string): string[];\\n\\n    /**\\n     * Sorts the given keys\\n     * @param keys The keys to sort\\n     * @returns The sorted sequence of keys\\n     */\\n    public static sortKeys(keys: string[]): string[];\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This class contains some helper functions, but \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matches\"), \" is the primary method that's of importance. It will take in a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#key-event\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"KeyEvent\")), \" and checks whether it satisfies this pattern.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".toString\"), \" method can be used to turn the pattern into a human readable string, but some data like the event type is left out. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".serialize\"), \" method can be used to extract all of the pattern data.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matchesModifier\"), \" method can be used to detect this pattern as a modifier. This uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".includes\"), \" method of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KeyEvent\"), \", meaning that it won't check whether the pattern includes the key that just triggered. E.g. if the pattern is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[\\\"a\\\", \\\"b\\\"]\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b\"), \" are already down and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"c\"), \" was just pressed, then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matchesModifier\"), \" will return \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" but \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".matches\"), \" would've return \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Below is an example showing off usage of different key patterns:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=src/index.tsx source=https://github.com/LaunchMenu/LM-applet-examples/tree/main/examples/keyHandlerPatterns\",\n    \"title\": \"src/index.tsx\",\n    \"source\": \"https://github.com/LaunchMenu/LM-applet-examples/tree/main/examples/keyHandlerPatterns\"\n  }, \"const settings = createSettings({\\n    version: \\\"0.0.0\\\",\\n    settings: () =>\\n        createSettingsFolder({\\n            ...info,\\n            children: {\\n                modifier: createKeyPatternSetting({\\n                    name: \\\"Modifier\\\",\\n                    // Simple key pattern constructor with limited intellisense for pattern validity checking\\n                    init: new KeyPattern(\\\"ctrl+shift\\\"),\\n                }),\\n                pattern: createKeyPatternSetting({\\n                    name: \\\"Pattern\\\",\\n                    // Advanced key pattern constructor with proper intellisense\\n                    init: new KeyPattern([\\n                        {\\n                            pattern: [\\\"ctrl\\\", \\\"f\\\"],\\n                            type: \\\"up\\\",\\n                            allowExtra: [\\\"alt\\\"],\\n                        },\\n                    ]),\\n                }),\\n            },\\n        }),\\n});\\n\\nexport default declare({\\n    info,\\n    settings,\\n    open({context, onClose}) {\\n        const patterns = context.settings.get(settings);\\n        const contentHandler: IKeyEventListener = event => {\\n            if (patterns.pattern.get().matches(event)) {\\n                alert(\\n                    `Pattern was matched, ${event.alt ? \\\"with\\\" : \\\"without\\\"} alt`\\n                );\\n                return true;\\n            }\\n            if (\\n                patterns.modifier.get().matchesModifier(event) &&\\n                event.key.char\\n            ) {\\n                alert(`${event.key.char} was pressed with the modifier`);\\n                return true;\\n            }\\n        };\\n\\n        context.open(\\n            new UILayer(\\n                [\\n                    () => ({menu: new Menu(context, items), onClose}),\\n                    // Note only the contentHandler can be used without a view, menu and field handler's can't be used without a view\\n                    {contentHandler},\\n                ],\\n                {path: \\\"Example\\\"}\\n            )\\n        );\\n    },\\n});\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Now whenever the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"example\"), \" applet is opened, it will add the custom key handler to the stack. This handler will detect when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctrl+f\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctrl+alt+f\"), \" is released. It will also detect whenever a character key is pressed while holding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ctrl+shift\"), \".\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"KeyHandler class\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"KeyHandler class\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The key handler class is something you generally won't have to use, but is responsible for turning the html key events into our custom key events and dispatching them. The LaunchMenu instance will create one of these instances capturing all of the window's key events.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=KeyHandler.ts source=https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/keyHandler/KeyHandler.ts spoiler\",\n    \"title\": \"KeyHandler.ts\",\n    \"source\": \"https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/keyHandler/KeyHandler.ts\",\n    \"spoiler\": true\n  }, \"export class KeyHandler {\\n    /**\\n     * Creates a new key handler for the specified target\\n     * @param target The target to add the listeners to\\n     */\\n    public constructor(target: IKeyHandlerTarget);\\n\\n    /**\\n     * Emits a given keyboard event\\n     * @param event\\n     */\\n    public emit(\\n        event: KeyEvent,\\n        {\\n            store = true,\\n            insertHeldKeys = true,\\n        }: {\\n            /** Whether to use the event to alter the held keys */\\n            store?: boolean;\\n            /** Whether to add the held keys to the event */\\n            insertHeldKeys?: boolean;\\n        } = {}\\n    ): void;\\n\\n    /**\\n     * Removes the handlers from the target\\n     */\\n    public destroy(): void;\\n\\n    /**\\n     * Releases all currently held keys\\n     */\\n    public resetKeys(): void;\\n\\n    /**\\n     * Checks wether the key with the specified id is pressed\\n     * @param id The id of the key\\n     * @returns Whether the key is pressed\\n     */\\n    public isDown(id: number): boolean;\\n\\n    /**\\n     * Checks wether the key with the specified name is pressed\\n     * @param name The name of the key\\n     * @returns Whether the key is pressed\\n     */\\n    public isDown(name: string): boolean;\\n\\n    // Listener management\\n    /**\\n     * Adds a listener to the key handler\\n     * @param listener The listener to add\\n     * @returns This, for method chaining\\n     */\\n    public listen(listener: IKeyEventListener): this;\\n\\n    /**\\n     * Removes a listener from the key handler\\n     * @param listener The listener to remove\\n     * @returns Whether the listener was removed\\n     */\\n    public removeListener(listener: IKeyEventListener): boolean;\\n\\n    // Static helper methods\\n    /**\\n     * Retrieves the input data for a 'synthetic' key event\\n     * @param event The original event\\n     * @returns The input for the event\\n     */\\n    public static getKeyEvent(event: KeyboardEvent): KeyEvent | null;\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The global instance of this class within the instance of LaunchMenu could be used to emit your own fake/virtual key events, adding global listeners, or checking if a key is currently held down. To access this instance, see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/docs/concepts/base/launchmenu\"\n  }, \"LaunchMenu class page\"), \".\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Global key listeners\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Global key listeners\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"LaunchMenu also has some support for capturing global key events, which are events that are dispatched to the OS but not necessarily to LaunchMenu. This can be used to perform tasks on certain key events even if LaunchMenu is hidden. This is also what's used to open LaunchMenu itself when its global key pattern is triggered.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"globalKeyHandler\"), \" instance is essentially a singleton instance of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GlobalKeyHandler\"), \" class and can be used to capture specific key patterns, or listen for all events. Key patterns are supported on every OS, but capturing of all events isn't yet available on Linux.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=globalKeyHandler.ts\",\n    \"title\": \"globalKeyHandler.ts\"\n  }, \"/**\\n * The manager to handle global key events (events that occur even when LM isn't focused)\\n */\\nexport const globalKeyHandler = new GlobalKeyHandler();\\n\\nclass GlobalKeyHandler {\\n    /**\\n     * Adds a global key listeners that listens to all events\\n     * @param callback The key press callback\\n     * @returns A function that can be invoked to remove the listener\\n     */\\n    public addListener(callback: (event: IGlobalKeyEvent) => void): () => void;\\n\\n    /**\\n     * Checks whether global key listeners are supported on the current OS/environment\\n     * @returns Whether key events listeners are supported\\n     */\\n    public areListenersSupported(): boolean;\\n\\n    /**\\n     * Adds a global shortcut\\n     * @param shortcut The key pattern to listen for\\n     * @param callback The callback to trigger when the event is fired\\n     * @returns A function that can be invoked to remove the shortcut\\n     */\\n    public addShortcut(shortcut: KeyPattern, callback: () => void): () => void;\\n\\n    /**\\n     * Checks whether the given key pattern is valid as a global shortcut or not\\n     * @param shortcut The key pattern to check\\n     * @returns False if the pattern is valid, or the patterns and errors if invalid\\n     */\\n    public isShortcutInvalid(\\n        shortcut: KeyPattern\\n    ): {pattern: IKeyArrayPatternData; error: Error}[] | false;\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Depending on the OS the user is on, not all key patterns are valid as global shortcuts. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".isShortcutInvalid\"), \" can be used to detect whether a shortcut is invalid. We don't ensure that this will capture all invalid patterns, but it will at least filter out some of the invalid patterns.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".areListenersSupported\"), \" method can be used to check whether the OS supports adding general keyboard listeners.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If you want to setup global shortcuts, there is no need to use this class however. A more convenient \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createGlobalKeyPatternSetting\"), \" exists which can be used for creating a user alterable pattern, and has a built-in function to register callbacks for when the event triggers:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"TODO: add example once global key handlers are merged\\n\")))));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#key-handlers\" class=\"css-nn640c\"><h1>Key handlers</h1></a><p>key handlers (aka key event listeners) are used for most of the interaction with LaunchMenu. They are callback functions that listen for key events and indicate whether the event was caught.</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=IKeyEventListener.ts source=https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/keyHandler/_types/IKeyEventListener.ts\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">IKeyEventListener.ts</div><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/keyHandler/_types/IKeyEventListener.ts\" class=\"css-nn640c\"><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"view source\" title=\"View source\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3\"></path></svg></span></button></a><div class=\"MuiBox-root jss6\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-ts undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">export</span><span> </span><span class=\"token\" style=\"color:#0000ff\">type</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">IKeyEventListener</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Handles a key event being fired\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">event</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The event that was fired\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> Whether the event was caught\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">(</span><span>event</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">KeyEvent</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token builtin\">boolean</span><span> </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span> </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token known-class-name\" style=\"color:#2B91AF\">Promise</span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token builtin\">boolean</span><span> </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>Sometimes key handlers require setup and disposal. For these types of listeners the <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">IDisposableKeyEventListener</code> interface exists. This is an object that contains both a normal <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">IKeyEventListener</code> as well as a function that can be used to dispose it. This disposal should manually be taken care of, which is quite simple when used in a <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">UILayer</code>.</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=IDisposableKeyEventListener.ts source=https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/textFields/interaction/_types/IDisposableKeyEventListener.ts\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">IDisposableKeyEventListener.ts</div><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/textFields/interaction/_types/IDisposableKeyEventListener.ts\" class=\"css-nn640c\"><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"view source\" title=\"View source\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3\"></path></svg></span></button></a><div class=\"MuiBox-root jss7\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-ts undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">export</span><span> </span><span class=\"token\" style=\"color:#0000ff\">type</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">IDisposableKeyEventListener</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** The key handler itself */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    handler</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyEventListener</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** A function to dispose any dependencies the handler may have created */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token function-variable\" style=\"color:#393A34\">destroy</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>Below is an example from the <a href=\"/docs/concepts/ui/menu\" class=\"css-0\">menus page</a> where we can see disposal of such a handler:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=src/index.tsx source=https://github.com/LaunchMenu/LM-applet-examples/tree/main/examples/menuKeyHandler\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">src/index.tsx</div><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"https://github.com/LaunchMenu/LM-applet-examples/tree/main/examples/menuKeyHandler\" class=\"css-nn640c\"><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"view source\" title=\"View source\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3\"></path></svg></span></button></a><div class=\"MuiBox-root jss8\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-tsx undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">export</span><span> </span><span class=\"token\" style=\"color:#0000ff\">default</span><span> </span><span class=\"token\" style=\"color:#0000ff\">declare</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    info</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    settings</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">async</span><span> </span><span class=\"token\" style=\"color:#393A34\">search</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">query</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> hook</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            children</span><span class=\"token\" style=\"color:#393A34\">:</span><span> searchAction</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token\" style=\"color:#0000ff\">get</span><span class=\"token\" style=\"color:#393A34\">(</span><span>items</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">open</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\" style=\"color:#393A34\">{</span><span class=\"token parameter\">context</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> onClose</span><span class=\"token parameter\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        context</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">open</span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">UILayer</span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token parameter\">context</span><span class=\"token parameter\" style=\"color:#393A34\">,</span><span class=\"token parameter\"> close</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> menu </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Menu</span><span class=\"token\" style=\"color:#393A34\">(</span><span>context</span><span class=\"token\" style=\"color:#393A34\">,</span><span> items</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>handler</span><span class=\"token\" style=\"color:#393A34\">,</span><span> destroy</span><span class=\"token\" style=\"color:#393A34\">}</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">createKeyHandler</span><span class=\"token\" style=\"color:#393A34\">(</span><span>menu</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                        onExit</span><span class=\"token\" style=\"color:#393A34\">:</span><span> close</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    </span><span class=\"token\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                        menu</span><span class=\"token\" style=\"color:#393A34\">:</span><span> menu</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                        menuHandler</span><span class=\"token\" style=\"color:#393A34\">:</span><span> handler</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                        </span><span class=\"token function-variable\" style=\"color:#393A34\">onClose</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                            </span><span class=\"token\" style=\"color:#393A34\">destroy</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                            </span><span class=\"token\" style=\"color:#393A34\">onClose</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                        </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    path</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;Example&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#propagation\" class=\"css-nn640c\"><h2>Propagation</h2></a><p>Using the <a href=\"/docs/concepts/ui/uilayers\" class=\"css-0\"><style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">UILayer</code></a> and <a href=\"/docs/concepts/base/iocontext\" class=\"css-0\"><style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">IOContext</code></a> components a stack of these listeners will be created. Events are then dispatched from top to bottom. Whenever propagation is stopped by the callback returning <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">true</code>, it will prevent the listeners below from receiving the event.</p><p>The <a href=\"/docs/concepts/ui/menu#controller\" class=\"css-0\"><style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">createStandardMenuKeyHandler</code></a> will also use the <a href=\"/docs/concepts/interaction/common-actions#key-handler-action\" class=\"css-0\"><style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">keyHandlerAction</code></a> to propagate key events to items in the menu, as well as the <a href=\"/docs/concepts/interaction/common-actions#context-menu-action\" class=\"css-0\"><style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">contextMenuAction</code></a> to propagate events to items in the context menu of the current selection. Bindings of the <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">keyHandlerAction</code> are event listeners similar to <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">IKeyEventListener</code>, except they can indicate to stop <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">immediate&nbsp;propagation</code> as well, and contain some more context data:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=IItemKeyHandler.ts source=https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/actions/types/keyHandler/_types/IItemKeyHandler.ts\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">IItemKeyHandler.ts</div><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/actions/types/keyHandler/_types/IItemKeyHandler.ts\" class=\"css-nn640c\"><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"view source\" title=\"View source\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3\"></path></svg></span></button></a><div class=\"MuiBox-root jss9\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-ts undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">export</span><span> </span><span class=\"token\" style=\"color:#0000ff\">type</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">IItemKeyHandler</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Informs about key events and returns whether it was caught\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">event</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The event to be executed\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">menu</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The menu that the item is in that forwarded this event\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">onExecute</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The item execution listener for the menu\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> Whether the event was caught\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">onKey</span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        event</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">KeyEvent</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        menu</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IMenu</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        onExecute</span><span class=\"token\" style=\"color:#393A34\">?</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IMenuItemExecuteCallback</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">ISyncItemKeyHandlerResponse</span><span> </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token known-class-name\" style=\"color:#2B91AF\">Promise</span><span class=\"token\" style=\"color:#393A34\">&lt;</span><span class=\"token maybe-class-name\">ISyncItemKeyHandlerResponse</span><span class=\"token\" style=\"color:#393A34\">&gt;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">type</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">ISyncItemKeyHandlerResponse</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** The value for stop propagation, stopImmediatePropagation defaults to false */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token builtin\">boolean</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>          </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** Stops propagation to handlers with lower priority (down the handler stack) */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>          stopPropagation</span><span class=\"token\" style=\"color:#393A34\">?</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>          </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** Stops propagation to handlers with the same priority (other item handlers) */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>          stopImmediatePropagation</span><span class=\"token\" style=\"color:#393A34\">?</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>      </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>The items are logically on the same level, so when propagation is stopped all items will still receive the events, but layers below won&#x27;t receive them. If immediate propagation is stopped even items on the same level but later in line won&#x27;t receive the event anymore.</p><p>For usage examples see the <a href=\"/docs/concepts/interaction/common-actions#key-handler-action\" class=\"css-0\"><style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">keyHandlerAction</code></a> on the actions page.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#key-event\" class=\"css-nn640c\"><h2>Key event</h2></a><p>All key event listeners will receive events of the type <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">KeyEvent</code>. This is a class that contains event information and some helpers to make testing for keys a bit simpler:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=KeyEvent.ts source=https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/keyHandler/KeyEvent.ts\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">KeyEvent.ts</div><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/keyHandler/KeyEvent.ts\" class=\"css-nn640c\"><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"view source\" title=\"View source\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3\"></path></svg></span></button></a><div class=\"MuiBox-root jss10\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-ts undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">export</span><span> </span><span class=\"token\" style=\"color:#0000ff\">class</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">KeyEvent</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** The keys that were held down when this event was fired */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> held</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKey</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** Whether the ctrl key is down */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> ctrl</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** Whether the shift key is down */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> shift</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** Whether the alt key is down */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> alt</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** Whether the meta key is down */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> meta</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** The keyboard event type */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#0000ff\">type</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyEventType</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** The key that was altered */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> key</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKey</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** The original event this event was obtained from if any */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> original</span><span class=\"token\" style=\"color:#393A34\">?</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">KeyboardEvent</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Creates a new keyboard event\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">event</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The data for the event to create\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">heldKeys</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The keys that are also held currently\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#0000ff\">constructor</span><span class=\"token\" style=\"color:#393A34\">(</span><span>event</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyEventInput</span><span class=\"token\" style=\"color:#393A34\">,</span><span> heldKeys</span><span class=\"token\" style=\"color:#393A34\">?</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKey</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Sets the keys that are also held while this event was created\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">keys</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The keys that are held, overrides the previous keys\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">setHeldKeys</span><span class=\"token\" style=\"color:#393A34\">(</span><span>keys</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKey</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Checks whether this event is equal to the given description\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">keys</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The keys to check for\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">type</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The event type to check for, defaults to &quot;down&quot;\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#0000ff\">is</span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        keys</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyMatcher</span><span> </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token maybe-class-name\">IKeyMatcher</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">type</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyEventType</span><span> </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token maybe-class-name\">IKeyEventType</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token\" style=\"color:#0000ff\">null</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;down&quot;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Checks whether this event includes the pressed sequence (more keys may be held)\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">keys</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The keys to check for\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">type</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The event type to check for, defaults to &quot;down&quot;\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">matches</span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        keys</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyMatcher</span><span> </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token maybe-class-name\">IKeyMatcher</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">type</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyEventType</span><span> </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token maybe-class-name\">IKeyEventType</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token\" style=\"color:#0000ff\">null</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;down&quot;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Determines whether the held keys include all the specified key(s)\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">keys</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The key(s) to check\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> Whether it is included\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">includes</span><span class=\"token\" style=\"color:#393A34\">(</span><span>keys</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyMatcher</span><span> </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token maybe-class-name\">IKeyMatcher</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Checks whether any of the modifier keys were held\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">hasModifiers</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">type</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">IKeyEventType</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;down&quot;</span><span> </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;up&quot;</span><span> </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;repeat&quot;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">type</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">IKey</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** The ID of a key */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">readonly</span><span> id</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyId</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** The name of a key */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">readonly</span><span> name</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyName</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** The character of a key if any */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">readonly</span><span> char</span><span class=\"token\" style=\"color:#393A34\">?</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>The <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">.is</code> method can be used to check whether the given event exactly corresponds to the given sequence of keys being pressed right now, and matches the event type: up, down or repeat. <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">repeat</code> means that the key was already pressed down, but the operating system (OS) started repeating it since it wasn&#x27;t released yet.</p><p>The <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">.matches</code> method is a bit looser and checks whether the given event includes the set of specified keys, and that one of those specified keys was just pressed or released. So when checking for <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">.matches([&#34;a&#34;,&nbsp;&#34;b&#34;],&nbsp;&#34;down&#34;)</code> and <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">a</code> and <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">b</code> were already down, it won&#x27;t trigger when <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">c</code> was just pressed in addition. It will trigger if <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">a</code> and <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">c</code> are down and <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">b</code> was pressed afterwards.</p><p>The <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">.includes</code> method is once again looser, not checking for the key event type at all, and just determining whether the given keys are present in the <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">held</code> list of the event, or is the event key itself.</p><p>The <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">.hasModifiers</code> method simply checks whether <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">alt</code>, <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">ctrl</code>, <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">meta</code> or <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">shift</code> was held down.</p><p>Finally the event contains some simple properties that can be used for manual testing of the event. The <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">held</code> property is a list of all keys that are currently held down. This list excludes the key event that was just triggered (unless it was already held down prior to the event, for instance on the repeat type).</p><p>Usage of these &quot;raw&quot; events should be limited since it makes it harder for users to customize the controls. You should instead try to use the <a href=\"#key-pattern\" class=\"css-0\"><style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">KeyPattern</code> class</a> and an appropriate setting whenever possible.</p><p>Below is an example of how these raw events could be used:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=src/index.tsx source=https://github.com/LaunchMenu/LM-applet-examples/tree/main/examples/keyHandlerEvents\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">src/index.tsx</div><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"https://github.com/LaunchMenu/LM-applet-examples/tree/main/examples/keyHandlerEvents\" class=\"css-nn640c\"><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"view source\" title=\"View source\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3\"></path></svg></span></button></a><div class=\"MuiBox-root jss11\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-ts undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">export</span><span> </span><span class=\"token\" style=\"color:#0000ff\">default</span><span> </span><span class=\"token\" style=\"color:#0000ff\">declare</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    info</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    settings</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">open</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">{</span><span>context</span><span class=\"token\" style=\"color:#393A34\">,</span><span> onClose</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> contentHandler</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token function-variable maybe-class-name\" style=\"color:#393A34\">IKeyEventListener</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> event </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>event</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">matches</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;ctrl&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;a&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;s&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;d&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;up&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#393A34\">alert</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;ctrl+a+s+d released&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#36acaa\">true</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>        context</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">open</span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">UILayer</span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#393A34\">[</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">{</span><span>menu</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Menu</span><span class=\"token\" style=\"color:#393A34\">(</span><span>context</span><span class=\"token\" style=\"color:#393A34\">,</span><span> items</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span> onClose</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    </span><span class=\"token\" style=\"color:#008000;font-style:italic\">// Note only the contentHandler can be used without a view, menu and field handler&#x27;s can&#x27;t be used without a view</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    </span><span class=\"token\" style=\"color:#393A34\">{</span><span>contentHandler</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#393A34\">{</span><span>path</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;Example&quot;</span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>Now whenever the <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">example</code> applet is opened, it will add the custom key handler to the stack. This handler will detect when <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">ctrl+a+s+d</code> was held and is released. We then simply show an alert, and we return <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">true</code> to indicate the event was captured. It won&#x27;t detect when <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">ctrl+a+s+d+f</code> was held and <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">f</code> is released, but it will detect when <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">ctrl+a+s+d+f</code> was held and <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">a</code> was released (resulting in <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">ctrl+s+d+f</code> being held). If <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">.is</code> was used, neither of these cases would be detected.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#key-pattern\" class=\"css-nn640c\"><h2>Key pattern</h2></a><p>The <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">KeyPattern</code> class can be used to specify a pattern that should be matched by an event. It captures the keys that should be held down, the event type to trigger on, and keys that may be present additionally.</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=KeyPattern.ts source=https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/keyHandler/KeyPattern.ts\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">KeyPattern.ts</div><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/keyHandler/KeyPattern.ts\" class=\"css-nn640c\"><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"view source\" title=\"View source\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3\"></path></svg></span></button></a><div class=\"MuiBox-root jss12\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-ts undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">export</span><span> </span><span class=\"token\" style=\"color:#0000ff\">class</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">KeyPattern</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#0000ff\">static</span><span> keySeparator </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;+&quot;</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#0000ff\">readonly</span><span> patterns</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyArrayPatternData</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Creates the key pattern that can be tested against\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">pattern</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The pattern to be tested, in very simplified form, mostly intended for easy testing\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#0000ff\">constructor</span><span class=\"token\" style=\"color:#393A34\">(</span><span>pattern</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Creates the key pattern that can be tested against\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">pattern</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The pattern to be tested\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#0000ff\">constructor</span><span class=\"token\" style=\"color:#393A34\">(</span><span>patterns</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyPatternData</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Checks whether the given event matches the\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">event</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The event to check\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">ignoreType</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> Whether to ignore the event type\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> Whether a given event matches this pattern\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">matches</span><span class=\"token\" style=\"color:#393A34\">(</span><span>event</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">KeyEvent</span><span class=\"token\" style=\"color:#393A34\">,</span><span> ignoreType</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#36acaa\">false</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Checks whether the event matches this pattern as a modifier key\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">event</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The event to check\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">matchesModifier</span><span class=\"token\" style=\"color:#393A34\">(</span><span>event</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">KeyEvent</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Simplifies the pattern to a string (leaving out some data)\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">toString</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#008000;font-style:italic\">// Serialization</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Serializes the pattern\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The serialized pattern\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">serialize</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyArrayPatternData</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#008000;font-style:italic\">// Helpers</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Retrieves the purely string representation of a key pattern\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">keys</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The keys in the pattern\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The string form\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#0000ff\">static</span><span> </span><span class=\"token\" style=\"color:#393A34\">toStringPattern</span><span class=\"token\" style=\"color:#393A34\">(</span><span>keys</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyMatcher</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Retrieves the array representation of a key pattern\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">keys</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The key pattern\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The array form\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#0000ff\">static</span><span> </span><span class=\"token\" style=\"color:#393A34\">toArrayPattern</span><span class=\"token\" style=\"color:#393A34\">(</span><span>keys</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Sorts the given keys\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">keys</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The keys to sort\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The sorted sequence of keys\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#0000ff\">static</span><span> </span><span class=\"token\" style=\"color:#393A34\">sortKeys</span><span class=\"token\" style=\"color:#393A34\">(</span><span>keys</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span></span></code></div><p>This class contains some helper functions, but <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">.matches</code> is the primary method that&#x27;s of importance. It will take in a <a href=\"#key-event\" class=\"css-0\"><style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">KeyEvent</code></a> and checks whether it satisfies this pattern.</p><p>The <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">.toString</code> method can be used to turn the pattern into a human readable string, but some data like the event type is left out. The <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">.serialize</code> method can be used to extract all of the pattern data.</p><p>The <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">.matchesModifier</code> method can be used to detect this pattern as a modifier. This uses the <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">.includes</code> method of <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">KeyEvent</code>, meaning that it won&#x27;t check whether the pattern includes the key that just triggered. E.g. if the pattern is <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">[&#34;a&#34;,&nbsp;&#34;b&#34;]</code>, <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">a</code> and <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">b</code> are already down and <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">c</code> was just pressed, then <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">.matchesModifier</code> will return <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">true</code> but <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">.matches</code> would&#x27;ve return <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">false</code>.</p><p>Below is an example showing off usage of different key patterns:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=src/index.tsx source=https://github.com/LaunchMenu/LM-applet-examples/tree/main/examples/keyHandlerPatterns\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">src/index.tsx</div><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"https://github.com/LaunchMenu/LM-applet-examples/tree/main/examples/keyHandlerPatterns\" class=\"css-nn640c\"><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"view source\" title=\"View source\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3\"></path></svg></span></button></a><div class=\"MuiBox-root jss13\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-ts undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">const</span><span> settings </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">createSettings</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    version</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;0.0.0&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token function-variable\" style=\"color:#393A34\">settings</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">createSettingsFolder</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token spread\" style=\"color:#393A34\">...</span><span>info</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            children</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                modifier</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">createKeyPatternSetting</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    name</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;Modifier&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    </span><span class=\"token\" style=\"color:#008000;font-style:italic\">// Simple key pattern constructor with limited intellisense for pattern validity checking</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    init</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">KeyPattern</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&quot;ctrl+shift&quot;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                pattern</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">createKeyPatternSetting</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    name</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;Pattern&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    </span><span class=\"token\" style=\"color:#008000;font-style:italic\">// Advanced key pattern constructor with proper intellisense</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    init</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">KeyPattern</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">[</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                        </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                            pattern</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;ctrl&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;f&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                            </span><span class=\"token\" style=\"color:#0000ff\">type</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;up&quot;</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                            allowExtra</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&quot;alt&quot;</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                        </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    </span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">export</span><span> </span><span class=\"token\" style=\"color:#0000ff\">default</span><span> </span><span class=\"token\" style=\"color:#0000ff\">declare</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    info</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    settings</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">open</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">{</span><span>context</span><span class=\"token\" style=\"color:#393A34\">,</span><span> onClose</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> patterns </span><span class=\"token\" style=\"color:#393A34\">=</span><span> context</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">settings</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token\" style=\"color:#0000ff\">get</span><span class=\"token\" style=\"color:#393A34\">(</span><span>settings</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> contentHandler</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token function-variable maybe-class-name\" style=\"color:#393A34\">IKeyEventListener</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> event </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>patterns</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">pattern</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token\" style=\"color:#0000ff\">get</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">matches</span><span class=\"token\" style=\"color:#393A34\">(</span><span>event</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#393A34\">alert</span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    </span><span class=\"token template-string template-punctuation\" style=\"color:#A31515\">`</span><span class=\"token template-string\" style=\"color:#A31515\">Pattern was matched, </span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">${</span><span class=\"token template-string interpolation\">event</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">.</span><span class=\"token template-string interpolation property-access\">alt</span><span class=\"token template-string interpolation\"> </span><span class=\"token template-string interpolation\" style=\"color:#393A34\">?</span><span class=\"token template-string interpolation\"> </span><span class=\"token template-string interpolation\" style=\"color:#A31515\">&quot;with&quot;</span><span class=\"token template-string interpolation\"> </span><span class=\"token template-string interpolation\" style=\"color:#393A34\">:</span><span class=\"token template-string interpolation\"> </span><span class=\"token template-string interpolation\" style=\"color:#A31515\">&quot;without&quot;</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">}</span><span class=\"token template-string\" style=\"color:#A31515\"> alt</span><span class=\"token template-string template-punctuation\" style=\"color:#A31515\">`</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#36acaa\">true</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#0000ff\">if</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                patterns</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">modifier</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token\" style=\"color:#0000ff\">get</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">matchesModifier</span><span class=\"token\" style=\"color:#393A34\">(</span><span>event</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">&amp;&amp;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                event</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">key</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token property-access\">char</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#393A34\">alert</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token template-string template-punctuation\" style=\"color:#A31515\">`</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">${</span><span class=\"token template-string interpolation\">event</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">.</span><span class=\"token template-string interpolation property-access\">key</span><span class=\"token template-string interpolation\" style=\"color:#393A34\">.</span><span class=\"token template-string interpolation property-access\">char</span><span class=\"token template-string interpolation interpolation-punctuation\" style=\"color:#393A34\">}</span><span class=\"token template-string\" style=\"color:#A31515\"> was pressed with the modifier</span><span class=\"token template-string template-punctuation\" style=\"color:#A31515\">`</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#0000ff\">return</span><span> </span><span class=\"token\" style=\"color:#36acaa\">true</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>        context</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token method property-access\" style=\"color:#393A34\">open</span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">UILayer</span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#393A34\">[</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">{</span><span>menu</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">Menu</span><span class=\"token\" style=\"color:#393A34\">(</span><span>context</span><span class=\"token\" style=\"color:#393A34\">,</span><span> items</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span> onClose</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    </span><span class=\"token\" style=\"color:#008000;font-style:italic\">// Note only the contentHandler can be used without a view, menu and field handler&#x27;s can&#x27;t be used without a view</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                    </span><span class=\"token\" style=\"color:#393A34\">{</span><span>contentHandler</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>                </span><span class=\"token\" style=\"color:#393A34\">{</span><span>path</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#A31515\">&quot;Example&quot;</span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span></span></code></div><p>Now whenever the <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">example</code> applet is opened, it will add the custom key handler to the stack. This handler will detect when <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">ctrl+f</code> or <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">ctrl+alt+f</code> is released. It will also detect whenever a character key is pressed while holding <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">ctrl+shift</code>.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#keyhandler-class\" class=\"css-nn640c\"><h2>KeyHandler class</h2></a><p>The key handler class is something you generally won&#x27;t have to use, but is responsible for turning the html key events into our custom key events and dispatching them. The LaunchMenu instance will create one of these instances capturing all of the window&#x27;s key events.</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=KeyHandler.ts source=https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/keyHandler/KeyHandler.ts spoiler\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">KeyHandler.ts</div><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"https://github.com/LaunchMenu/LaunchMenu/blob/master/packages/core/src/keyHandler/KeyHandler.ts\" class=\"css-nn640c\"><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"view source\" title=\"View source\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3\"></path></svg></span></button></a><div class=\"MuiBox-root jss14\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><details><summary class=\"css-1iuj5ih\">View code</summary> <code class=\"language-ts undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#0000ff\">export</span><span> </span><span class=\"token\" style=\"color:#0000ff\">class</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">KeyHandler</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Creates a new key handler for the specified target\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">target</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The target to add the listeners to\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#0000ff\">constructor</span><span class=\"token\" style=\"color:#393A34\">(</span><span>target</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyHandlerTarget</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Emits a given keyboard event\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">event</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">emit</span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        event</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">KeyEvent</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            store </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#36acaa\">true</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            insertHeldKeys </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#36acaa\">true</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** Whether to use the event to alter the held keys */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            store</span><span class=\"token\" style=\"color:#393A34\">?</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/** Whether to add the held keys to the event */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>            insertHeldKeys</span><span class=\"token\" style=\"color:#393A34\">?</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        </span><span class=\"token\" style=\"color:#393A34\">}</span><span> </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span class=\"token\" style=\"color:#393A34\">}</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Removes the handlers from the target\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">destroy</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Releases all currently held keys\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">resetKeys</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Checks wether the key with the specified id is pressed\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">id</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The id of the key\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> Whether the key is pressed\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">isDown</span><span class=\"token\" style=\"color:#393A34\">(</span><span>id</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">number</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Checks wether the key with the specified name is pressed\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">name</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The name of the key\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> Whether the key is pressed\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">isDown</span><span class=\"token\" style=\"color:#393A34\">(</span><span>name</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">string</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#008000;font-style:italic\">// Listener management</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Adds a listener to the key handler\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">listener</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The listener to add\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> This, for method chaining\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">listen</span><span class=\"token\" style=\"color:#393A34\">(</span><span>listener</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyEventListener</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">this</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Removes a listener from the key handler\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">listener</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The listener to remove\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> Whether the listener was removed\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">removeListener</span><span class=\"token\" style=\"color:#393A34\">(</span><span>listener</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyEventListener</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#008000;font-style:italic\">// Static helper methods</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Retrieves the input data for a &#x27;synthetic&#x27; key event\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">event</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The original event\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The input for the event\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#0000ff\">static</span><span> </span><span class=\"token\" style=\"color:#393A34\">getKeyEvent</span><span class=\"token\" style=\"color:#393A34\">(</span><span>event</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">KeyboardEvent</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">KeyEvent</span><span> </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token\" style=\"color:#0000ff\">null</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span></span></code></details></div><p>The global instance of this class within the instance of LaunchMenu could be used to emit your own fake/virtual key events, adding global listeners, or checking if a key is currently held down. To access this instance, see the <a href=\"/docs/concepts/base/launchmenu\" class=\"css-0\">LaunchMenu class page</a>.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#global-key-listeners\" class=\"css-nn640c\"><h2>Global key listeners</h2></a><p>LaunchMenu also has some support for capturing global key events, which are events that are dispatched to the OS but not necessarily to LaunchMenu. This can be used to perform tasks on certain key events even if LaunchMenu is hidden. This is also what&#x27;s used to open LaunchMenu itself when its global key pattern is triggered.</p><p>The <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">globalKeyHandler</code> instance is essentially a singleton instance of the <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">GlobalKeyHandler</code> class and can be used to capture specific key patterns, or listen for all events. Key patterns are supported on every OS, but capturing of all events isn&#x27;t yet available on Linux.</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div metastring=\"title=globalKeyHandler.ts\" class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><style data-emotion=\"css 1iuj5ih\">.css-1iuj5ih{padding-left:8px;}</style><div class=\"css-1iuj5ih\">globalKeyHandler.ts</div><div class=\"MuiBox-root jss15\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-ts undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\"> * The manager to handle global key events (events that occur even when LM isn&#x27;t focused)\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">export</span><span> </span><span class=\"token\" style=\"color:#0000ff\">const</span><span> globalKeyHandler </span><span class=\"token\" style=\"color:#393A34\">=</span><span> </span><span class=\"token\" style=\"color:#0000ff\">new</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">GlobalKeyHandler</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#0000ff\">class</span><span> </span><span class=\"token maybe-class-name\" style=\"color:#2B91AF\">GlobalKeyHandler</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Adds a global key listeners that listens to all events\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">callback</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The key press callback\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> A function that can be invoked to remove the listener\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">addListener</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token function-variable\" style=\"color:#393A34\">callback</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>event</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IGlobalKeyEvent</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Checks whether global key listeners are supported on the current OS/environment\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> Whether key events listeners are supported\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">areListenersSupported</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token builtin\">boolean</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Adds a global shortcut\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">shortcut</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The key pattern to listen for\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">callback</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The callback to trigger when the event is fired\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> A function that can be invoked to remove the shortcut\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">addShortcut</span><span class=\"token\" style=\"color:#393A34\">(</span><span>shortcut</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">KeyPattern</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token function-variable\" style=\"color:#393A34\">callback</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token arrow\" style=\"color:#393A34\">=&gt;</span><span> </span><span class=\"token\" style=\"color:#0000ff\">void</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\">\n</span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">/**\n</span></span><span style=\"flex-wrap:wrap\">     * Checks whether the given key pattern is valid as a global shortcut or not\n</span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@param</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> </span><span class=\"token doc-comment parameter\" style=\"color:#008000;font-style:italic\">shortcut</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> The key pattern to check\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     * </span><span class=\"token doc-comment\" style=\"color:#0000ff;font-style:italic\">@returns</span><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\"> False if the pattern is valid, or the patterns and errors if invalid\n</span></span><span style=\"flex-wrap:wrap\"><span class=\"token doc-comment\" style=\"color:#008000;font-style:italic\">     */</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#0000ff\">public</span><span> </span><span class=\"token\" style=\"color:#393A34\">isShortcutInvalid</span><span class=\"token\" style=\"color:#393A34\">(</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>        shortcut</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">KeyPattern</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span>    </span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#393A34\">{</span><span>pattern</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token maybe-class-name\">IKeyArrayPatternData</span><span class=\"token\" style=\"color:#393A34\">;</span><span> error</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token known-class-name\" style=\"color:#2B91AF\">Error</span><span class=\"token\" style=\"color:#393A34\">}</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#393A34\">]</span><span> </span><span class=\"token\" style=\"color:#393A34\">|</span><span> </span><span class=\"token\" style=\"color:#36acaa\">false</span><span class=\"token\" style=\"color:#393A34\">;</span><span>\n</span></span><span style=\"flex-wrap:wrap\"><span></span><span class=\"token\" style=\"color:#393A34\">}</span></span></code></div><p>Depending on the OS the user is on, not all key patterns are valid as global shortcuts. The <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">.isShortcutInvalid</code> can be used to detect whether a shortcut is invalid. We don&#x27;t ensure that this will capture all invalid patterns, but it will at least filter out some of the invalid patterns.</p><p>The <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">.areListenersSupported</code> method can be used to check whether the OS supports adding general keyboard listeners.</p><p>If you want to setup global shortcuts, there is no need to use this class however. A more convenient <style data-emotion=\"css an0xih\">.css-an0xih{display:inline-block;background-color:#EEEEEE;word-break:break-word;}</style><code class=\"css-an0xih\">createGlobalKeyPatternSetting</code> exists which can be used for creating a user alterable pattern, and has a built-in function to register callbacks for when the event triggers:</p><style data-emotion=\"css 1x06cmw\">.css-1x06cmw{box-shadow:0px 0px 30px -5px rgba(0,0,0,0.3);border-radius:10px;overflow:hidden;margin-bottom:8px;}.css-1x06cmw .linenumber{min-width:30px!important;color:#AAA!important;}.css-1x06cmw span{word-break:break-all;}</style><div class=\"css-1x06cmw\"><style data-emotion=\"css 1rf12ws\">.css-1rf12ws{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex-wrap:wrap;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;background-color:#EEEEEE;}.css-1rf12ws .MuiButtonBase-root{padding:8px;border-radius:50%;}</style><div class=\"css-1rf12ws\"><div class=\"MuiBox-root jss16\"></div><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy code\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"></path></svg></span></button><button class=\"MuiButtonBase-root MuiIconButton-root\" tabindex=\"0\" type=\"button\" aria-label=\"Toggle line numbers\" title=\"Toggle line numbers\"><span class=\"MuiIconButton-label\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z\"></path></svg></span></button><style data-emotion=\"css 1739oy8\">.css-1739oy8{z-index:1;}</style><div class=\"MuiBackdrop-root css-1739oy8\" aria-hidden=\"true\" style=\"opacity:0;visibility:hidden\"><div></div></div></div><code class=\"language-ts undefined\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre-wrap;word-spacing:normal;word-break:normal;font-size:11px;line-height:14px;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;display:block;background-color:#FAFAFA;padding:8px\"><span style=\"flex-wrap:wrap\"><span class=\"token\" style=\"color:#36acaa\">TODO</span><span class=\"token\" style=\"color:#393A34\">:</span><span> add example once global key handlers are merged</span></span></code></div></section></section>","scope":{}},"ToC":[{"name":"Key handlers","children":[{"name":"Propagation","children":[]},{"name":"Key event","children":[]},{"name":"Key pattern","children":[]},{"name":"KeyHandler class","children":[]},{"name":"Global key listeners","children":[]}]}],"index":{"rootPath":"/docs","items":[{"name":"Guide","opened":false,"children":[{"name":"1.-Overview"},{"name":"2.-Environment-setup"},{"name":"3.-Applet-interface"},{"name":"4.-Items-and-searches"},{"name":"5.-Content-and-theming"},{"name":"6.-UILayers-and-menus"},{"name":"7.-Settings"},{"name":"8.-Actions"},{"name":"9.-Publishing-and-usage"}]},{"name":"Concepts","opened":true,"children":[{"name":"Applet-format"},{"name":"base","opened":false,"children":[{"name":"LaunchMenu"},{"name":"Session"},{"name":"IOContext"}]},{"name":"UI","opened":false,"children":[{"name":"MenuItems"},{"name":"UILayers"},{"name":"Menu"},{"name":"TextField"},{"name":"Content"}]},{"name":"Interaction","opened":true,"children":[{"name":"Actions"},{"name":"Common-actions"},{"name":"Search-system"},{"name":"Undo-redo"},{"name":"Key-handlers","selected":true}]},{"name":"Settings"}]},{"name":"API-overview"}]}},"__N_SSG":true}