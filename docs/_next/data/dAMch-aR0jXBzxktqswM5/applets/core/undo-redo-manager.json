{"pageProps":{"url":"https://launchmenu.github.io/applets/core/undo-redo-manager","source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", {\n    \"name\": \"Undo-redo manager\",\n    \"depth\": 1\n  }, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Undo-redo manager\"), mdx(StatusNotice, {\n    mdxType: \"StatusNotice\"\n  }), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Roadmap\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Roadmap\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"LaunchMenu has support to create undoable actions built in. It however currently has no means to actual perform the undo. Almost all aspects of undoing/redoing actions is setup, except for the user controls.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Actions won't automagically be undoable, but actions can return commands that provide undo functionality.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Controls\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Controls\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The most important aspect of the Undo-redo-manager will be to provide simple \", mdx(Key, {\n    mdxType: \"Key\"\n  }, \"ctrl\"), \" + \", mdx(Key, {\n    mdxType: \"Key\"\n  }, \"z\"), \" and \", mdx(Key, {\n    mdxType: \"Key\"\n  }, \"ctrl\"), \" + \", mdx(Key, {\n    mdxType: \"Key\"\n  }, \"y\"), \" controls to interact with the already existing undo/redo facility.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Visualisation\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Visualisation\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In addition, it would be neat to setup a system that allows you to view the commands that have been executed, and are in the 'future' and 'past' stacks.\\nI am not sure whether there are many cases where this is useful, but it would be neat.\"))));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#undo-redo-manager\" class=\"css-nn640c\"><h1>Undo-redo manager</h1></a><style data-emotion=\"css 16q8120\">.css-16q8120{margin-top:20px;font-size:20px;font-weight:800;}</style><div class=\"css-16q8120\"><span aria-label=\"Nothing has been implemented yet\" class=\"\"><style data-emotion=\"css 1cd6ilh\">.css-1cd6ilh{color:red;}.css-1cd6ilh >*{vertical-align:bottom;font-size:1.5em;}</style><div class=\"MuiBox-root jss30 css-1cd6ilh\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z\"></path></svg></div></span>This applet has not yet been developed, but is on the roadmap.</div><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#roadmap\" class=\"css-nn640c\"><h2>Roadmap</h2></a><p>LaunchMenu has support to create undoable actions built in. It however currently has no means to actual perform the undo. Almost all aspects of undoing/redoing actions is setup, except for the user controls.</p><p>Actions won&#x27;t automagically be undoable, but actions can return commands that provide undo functionality.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#controls\" class=\"css-nn640c\"><h2>Controls</h2></a><p>The most important aspect of the Undo-redo-manager will be to provide simple <style data-emotion=\"css 1aqchct\">.css-1aqchct{padding-left:2px;padding-right:2px;display:inline-block;font-family:consolas;background-color:#FAFAFA;border-color:#EEEEEE;border-style:solid;border-width:0;border-left-width:2px;border-right-width:2px;border-bottom-width:4px;}</style><div class=\"MuiBox-root jss31 css-1aqchct\">ctrl</div> + <style data-emotion=\"css 1aqchct\">.css-1aqchct{padding-left:2px;padding-right:2px;display:inline-block;font-family:consolas;background-color:#FAFAFA;border-color:#EEEEEE;border-style:solid;border-width:0;border-left-width:2px;border-right-width:2px;border-bottom-width:4px;}</style><div class=\"MuiBox-root jss32 css-1aqchct\">z</div> and <style data-emotion=\"css 1aqchct\">.css-1aqchct{padding-left:2px;padding-right:2px;display:inline-block;font-family:consolas;background-color:#FAFAFA;border-color:#EEEEEE;border-style:solid;border-width:0;border-left-width:2px;border-right-width:2px;border-bottom-width:4px;}</style><div class=\"MuiBox-root jss33 css-1aqchct\">ctrl</div> + <style data-emotion=\"css 1aqchct\">.css-1aqchct{padding-left:2px;padding-right:2px;display:inline-block;font-family:consolas;background-color:#FAFAFA;border-color:#EEEEEE;border-style:solid;border-width:0;border-left-width:2px;border-right-width:2px;border-bottom-width:4px;}</style><div class=\"MuiBox-root jss34 css-1aqchct\">y</div> controls to interact with the already existing undo/redo facility.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#visualisation\" class=\"css-nn640c\"><h2>Visualisation</h2></a><p>In addition, it would be neat to setup a system that allows you to view the commands that have been executed, and are in the &#x27;future&#x27; and &#x27;past&#x27; stacks.\nI am not sure whether there are many cases where this is useful, but it would be neat.</p></section></section>","scope":{}},"ToC":[{"name":"Undo-redo manager","children":[{"name":"Roadmap","children":[]},{"name":"Controls","children":[]},{"name":"Visualisation","children":[]}]}],"index":{"rootPath":"/applets","items":[{"name":"utility","opened":false,"children":[{"name":"dictionary"},{"name":"notes"},{"name":"file-manager"},{"name":"internet-search"},{"name":"calculator"},{"name":"translator"},{"name":"snippets"},{"name":"time-tracker"},{"name":"calendar"}]},{"name":"core","opened":true,"children":[{"name":"help"},{"name":"applet-manager"},{"name":"settings-manager"},{"name":"window-manager"},{"name":"session-manager"},{"name":"lm-recorder"},{"name":"theme-manager"},{"name":"undo-redo-manager","selected":true},{"name":"user-scripts"}]}]}},"__N_SSG":true}