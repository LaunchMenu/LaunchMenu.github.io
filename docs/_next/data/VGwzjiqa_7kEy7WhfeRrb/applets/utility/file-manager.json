{"pageProps":{"url":"https://launchmenu.github.io/applets/utility/file-manager","source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", {\n    \"name\": \"File manager\",\n    \"depth\": 1\n  }, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"File manager\"), mdx(StatusNotice, {\n    mdxType: \"StatusNotice\"\n  }), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Roadmap\",\n    \"depth\": 2\n  }, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Roadmap\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The features of this applet haven't been properly planned yet.\\nThis applet will however be one of the most ambitious and most important applets within LaunchMenu, so we want to make sure we do things right.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We do know the overall goal and have some vague planning: allow users to fully control a file manager from within LaunchMenu.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This should include the features covered below.\"), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Navigation\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Navigation\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The user should be able to step through directories just like one does in a regular file explorer such as the one on windows.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Interaction\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Interaction\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"All common file operations should be present, such as:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Execute/open a file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Copy/cut a file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Paste a file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Delete a file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a file\"))), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Searching\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Searching\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"There should be several types of supprted searches:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Perform non-recursive searches in any folder\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Perform recursive searches in customly configured folders, whose names and descendant paths will be loaded into RAM for quick searches.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Perform slow background searches that include the contents of files\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We will have to do some proper planning to try and keep these searches relatively efficient, since they will search through a lot of data at once. We would like to suport some regex like search system, where the folder hierarchy can be tested too. In addition it would be nice to try and keep this search system flexible and extensible through other applets too.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Preview\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Preview\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Most file formats should have a dedicated preview associated to them. Some research was already done in how to create a preview for microsoft excel and powerpoint files.\\nThis preview would automatically show up when the file menu item is selected in the menu.\")), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Usage by applets\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Usage by applets\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We want to make sure that other applets are able to interact with the file manager applet through an interface. This interface will probably be released as a dedicated package, in order to allow for creation of other implementations of the file-manager that still interact well with other applets.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This way any applet can request the user to select a file by using the file-manager applet, amongst other things.\"), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Extensionality\",\n    \"depth\": 4\n  }, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"Extensionality\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Other applets should also be able to extend the behavior of the file-manager, including the following aspects:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add previews methods for file types (e.g. rendering a specialized data format)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add open/execution methods for file types (e.g. open file in VScode)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add additional operations in the context menu for file types (e.g. rotating pictures)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Alter the listed files of a folder, this allows for:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Bundling of specific related files to only show 1 item in the overview\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Represent 1 file as a number of files\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Represent 1 or more 'regular' file (e.g. zip) as a directory\")))))), mdx(\"section\", {\n    parentName: \"section\",\n    \"name\": \"Dynamic 'applets'\",\n    \"depth\": 3\n  }, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Dynamic 'applets'\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We want to add support for files in a special format, which contain JavaScript or TypeScript to be read by the file-manager, and interpreted as an applet itself.\\nThis will probably be a dedicated special purpose applet format, rather than the general format, but allow for some simplistic way of making interactable content files.\")))));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#file-manager\" class=\"css-nn640c\"><h1>File manager</h1></a><style data-emotion=\"css 16q8120\">.css-16q8120{margin-top:20px;font-size:20px;font-weight:800;}</style><div class=\"css-16q8120\"><span aria-label=\"Nothing has been implemented yet\" class=\"\"><style data-emotion=\"css 1cd6ilh\">.css-1cd6ilh{color:red;}.css-1cd6ilh >*{vertical-align:bottom;font-size:1.5em;}</style><div class=\"MuiBox-root jss1 css-1cd6ilh\"><svg class=\"MuiSvgIcon-root\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z\"></path></svg></div></span>This applet has not yet been developed, but is on the roadmap.</div><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#roadmap\" class=\"css-nn640c\"><h2>Roadmap</h2></a><p>The features of this applet haven&#x27;t been properly planned yet.\nThis applet will however be one of the most ambitious and most important applets within LaunchMenu, so we want to make sure we do things right.</p><p>We do know the overall goal and have some vague planning: allow users to fully control a file manager from within LaunchMenu.</p><p>This should include the features covered below.</p><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#navigation\" class=\"css-nn640c\"><h3>Navigation</h3></a><p>The user should be able to step through directories just like one does in a regular file explorer such as the one on windows.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#interaction\" class=\"css-nn640c\"><h3>Interaction</h3></a><p>All common file operations should be present, such as:</p><ul><li>Execute/open a file</li><li>Copy/cut a file</li><li>Paste a file</li><li>Delete a file</li><li>Create a file</li></ul></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#searching\" class=\"css-nn640c\"><h3>Searching</h3></a><p>There should be several types of supprted searches:</p><ul><li>Perform non-recursive searches in any folder</li><li>Perform recursive searches in customly configured folders, whose names and descendant paths will be loaded into RAM for quick searches.</li><li>Perform slow background searches that include the contents of files</li></ul><p>We will have to do some proper planning to try and keep these searches relatively efficient, since they will search through a lot of data at once. We would like to suport some regex like search system, where the folder hierarchy can be tested too. In addition it would be nice to try and keep this search system flexible and extensible through other applets too.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#preview\" class=\"css-nn640c\"><h3>Preview</h3></a><p>Most file formats should have a dedicated preview associated to them. Some research was already done in how to create a preview for microsoft excel and powerpoint files.\nThis preview would automatically show up when the file menu item is selected in the menu.</p></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#usage-by-applets\" class=\"css-nn640c\"><h3>Usage by applets</h3></a><p>We want to make sure that other applets are able to interact with the file manager applet through an interface. This interface will probably be released as a dedicated package, in order to allow for creation of other implementations of the file-manager that still interact well with other applets.</p><p>This way any applet can request the user to select a file by using the file-manager applet, amongst other things.</p><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#extensionality\" class=\"css-nn640c\"><h4>Extensionality</h4></a><p>Other applets should also be able to extend the behavior of the file-manager, including the following aspects:</p><ul><li>Add previews methods for file types (e.g. rendering a specialized data format)</li><li>Add open/execution methods for file types (e.g. open file in VScode)</li><li>Add additional operations in the context menu for file types (e.g. rotating pictures)</li><li>Alter the listed files of a folder, this allows for:<ul><li>Bundling of specific related files to only show 1 item in the overview</li><li>Represent 1 file as a number of files</li><li>Represent 1 or more &#x27;regular&#x27; file (e.g. zip) as a directory</li></ul></li></ul></section></section><section><style data-emotion=\"css nn640c\">.css-nn640c{-webkit-text-decoration:none;text-decoration:none;color:inherit;}</style><a href=\"#dynamic-&#x27;applets&#x27;\" class=\"css-nn640c\"><h3>Dynamic &#x27;applets&#x27;</h3></a><p>We want to add support for files in a special format, which contain JavaScript or TypeScript to be read by the file-manager, and interpreted as an applet itself.\nThis will probably be a dedicated special purpose applet format, rather than the general format, but allow for some simplistic way of making interactable content files.</p></section></section></section>","scope":{}},"ToC":[{"name":"File manager","children":[{"name":"Roadmap","children":[{"name":"Navigation","children":[]},{"name":"Interaction","children":[]},{"name":"Searching","children":[]},{"name":"Preview","children":[]},{"name":"Usage by applets","children":[{"name":"Extensionality","children":[]}]},{"name":"Dynamic 'applets'","children":[]}]}]}],"index":{"rootPath":"/applets","items":[{"name":"utility","opened":true,"children":[{"name":"dictionary"},{"name":"notes"},{"name":"file-manager","selected":true},{"name":"internet-search"},{"name":"calculator"},{"name":"translator"},{"name":"snippets"},{"name":"time-tracker"},{"name":"calendar"}]},{"name":"core","opened":false,"children":[{"name":"help"},{"name":"applet-manager"},{"name":"settings-manager"},{"name":"window-manager"},{"name":"session-manager"},{"name":"lm-recorder"},{"name":"theme-manager"},{"name":"undo-redo-manager"},{"name":"user-scripts"}]}]}},"__N_SSG":true}