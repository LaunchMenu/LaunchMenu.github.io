<div class=navigator>
    <div class=nav-header>
        <input type="text" class=nav-searchbar></input>
        <div class=nav-include-protected title="Include protected" disabled=true>
            <i class="fas fa-shield-alt"></i>
        </div>
        <div class=nav-include-private title="Include private" disabled=true>
            <i class="fas fa-lock"></i>
        </div>
    </div>
    <div class=nav-items>
        {{#each this}}
            {{> navItem this}}
        {{/each}}
    </div>
    <div class=nav-footer>
        <div class=nav-version-control>
            Version:
            <span class=nav-version-control-value></span>
        </div>
    </div>

    <script>
        /* Searching */
        var shownFields = {
            "public": true,
            "protected": false,
            "private": false
        };
        $(".nav-include-private").mousedown(function (event) {
            event.preventDefault();
            event.stopImmediatePropagation();
        }).click(function () {
            var disable = !$(this).is("[disabled]");
            if (disable) this.setAttribute("disabled", "");
            else this.removeAttribute("disabled");
            $("[access=private]")[disable ? "hide" : "show"]();
            shownFields.private = !disable;
            updateSearch();
        });
        $(".nav-include-protected").mousedown(function (event) {
            event.preventDefault();
            event.stopImmediatePropagation();
        }).click(function () {
            var disable = !$(this).is("[disabled]");
            if (disable) this.setAttribute("disabled", "");
            else this.removeAttribute("disabled");
            $("[access=protected]")[disable ? "hide" : "show"]();
            shownFields.protected = !disable;
            updateSearch();
        });
        $("[access=protected], [access=private]").hide();

        var timeoutID;
        var updateSearch = function () {
            var text = $(".nav-searchbar").val();

            // Remove the old search
            $(".highlight").each(function () {
                var parent = $(this).parent()[0];
                $(this).replaceWith($(this).text());
                parent.normalize();
            });
            $(".nav-item, .nav-item-field").hide();
            $("[forcedOpen]").each(function () {
                this.toggle(false, true);
            });

            // Highlight the new search
            if (text.length > 0) {
                var searchRegex = new RegExp(text.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), "gi");

                var nodes = $(".searchable, .searchable *").contents().filter(function () {
                    return this.nodeType === Node.TEXT_NODE;
                });
                nodes.each(function () {
                    // Test if any text is matched
                    var text = $(this).text();
                    if (text.match(searchRegex)) {
                        text = text.replace(searchRegex, "<span class=highlight>$&</span>");

                        // Show the field (if it is a field)
                        var field = $(this).closest(".nav-item-field");
                        if (field.length && shownFields[field.attr("access")]) {
                            field.show();

                            // Show the parent nav item
                            var parentItem = $(this).closest(".nav-item").show()[0];
                            if (parentItem) parentItem.toggle(true, true);
                        } else if (field.length == 0) {
                            $(this).closest(".nav-item").show();
                        }

                        // Highlight the text
                        $(this).replaceWith(text);
                    }
                });
            }

            if (text.length == 0) {
                $(".nav-item").show()
                $(".nav-item-field").each(function () {
                    if (shownFields[$(this).attr("access")]) $(this).show();
                });
            }
        }
        $(".nav-searchbar").keyup(function () {
            clearTimeout(timeoutID);
            timeoutID = setTimeout(updateSearch, 200);
        });

        /* Version control */
        var versions = ["1.0.0", "1.0.5"];
        var versionOptions = $("<div class=nav-version-options></div>");
        versionOptions.append(versions.map(function (version) {
            return "<div class=nav-version-option>" + version + "</div>";
        })).find(".nav-version-option").click(function () {
            versionOptions.hide();
            var version = $(this).text();
            $(".nav-version-control-value").text(version);
        });
        $("body").append(versionOptions);
        $(".nav-version-control-value").click(function () {
            var offset = $(this).offset();
            versionOptions.css({
                left: offset.left,
                top: offset.top - versionOptions.height()
            });
            versionOptions.show();
        }).text(versions[0]);

        /* Item expanding code */
        $(".nav-item").each(function () {
            this.toggle = function (open, forced) {
                var isOpen = $(this).is("[open]");
                var wasForced = $(this).is("[forcedOpen]");
                if (!open) open = !isOpen;
                var duration = forced ? 0 : 200;

                if (open && !isOpen) {
                    this.setAttribute("open", "");
                    if (forced) this.setAttribute("forcedOpen", "");

                    var arrow = $(this).find(".nav-item-arrow");
                    arrow.stop().animate({ lineHeight: 1 }, {
                        duration: duration,
                        step: function (now) {
                            var angle = now * 90 + 45;
                            arrow.css("transform", "rotate(" + angle + "deg)");
                        }
                    });

                    var data = $(this).find(".nav-item-data");
                    var curHeight = data.height();
                    var targetHeight = data.height("auto").height();
                    data.height(curHeight).stop(true).animate({ height: targetHeight }, {
                        duration: duration,
                        complete: function () {
                            data.height("auto");
                        }
                    });
                } else if (!open && isOpen && (!forced || wasForced)) {
                    this.removeAttribute("open");
                    this.removeAttribute("forcedOpen");

                    var arrow = $(this).find(".nav-item-arrow");
                    arrow.stop().animate({ lineHeight: 0 }, {
                        duration: duration,
                        step: function (now) {
                            var angle = now * 90 + 45;
                            arrow.css("transform", "rotate(" + angle + "deg)");
                        }
                    });

                    var data = $(this).find(".nav-item-data");
                    data.stop(true).animate({ height: 0 }, duration);
                }
            };
        });
        $(".nav-item-arrow").mousedown(function (event) {
            event.preventDefault();
            event.stopImmediatePropagation();
        }).click(function () {
            $(this).closest(".nav-item")[0].toggle();
        });
    </script>
</div>