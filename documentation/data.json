{
    "classes": {
        "ChannelHandler": {
            "URL": "ChannelHandler.html",
            "sourceURL": "source-channelHandler.html",
            "range": [
                280,
                1448
            ],
            "name": "ChannelHandler",
            "description": "The public class to create channel senders and recievers, as the creation of a channel sender is asynchronous",
            "static": true,
            "methods": {
                "static": {
                    "public": [
                        {
                            "sourceURL": "source-channelHandler.html",
                            "range": [
                                802,
                                937
                            ],
                            "URL": "ChannelHandler.html#method-static-createSender",
                            "name": "createSender",
                            "access": "public",
                            "description": "Create a new channel sender, allowing to send messages to the channel",
                            "parameters": [
                                {
                                    "name": "ID",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The unique identifier for the channel",
                                    "optional": false
                                },
                                {
                                    "name": "subChannelID",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The subChannelID that will be used to access special subchannel methods",
                                    "optional": false
                                },
                                {
                                    "name": "senderID",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "An ID that the reciever of this channel can respond to (can be left out)",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Promise"
                                ],
                                "description": "An instance of the ChannelSender class"
                            }
                        },
                        {
                            "sourceURL": "source-channelHandler.html",
                            "range": [
                                1331,
                                1445
                            ],
                            "URL": "ChannelHandler.html#method-static-createReceiver",
                            "name": "createReceiver",
                            "access": "public",
                            "description": "Create a new channel reciever, allowing to recieve messages from the channel",
                            "parameters": [
                                {
                                    "name": "ID",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The unique identifier for the channel",
                                    "optional": false
                                },
                                {
                                    "name": "listeners",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "An object of functions to act on messages indexed by message type",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Promise"
                                ],
                                "description": "An instance of the ChannelReceiver class"
                            }
                        }
                    ],
                    "protected": [],
                    "private": []
                },
                "instance": {
                    "public": [],
                    "protected": [],
                    "private": []
                },
                "all": [
                    {
                        "sourceURL": "source-channelHandler.html",
                        "range": [
                            802,
                            937
                        ],
                        "URL": "ChannelHandler.html#method-static-createSender",
                        "name": "createSender",
                        "access": "public",
                        "description": "Create a new channel sender, allowing to send messages to the channel",
                        "parameters": [
                            {
                                "name": "ID",
                                "type": [
                                    "string"
                                ],
                                "description": "The unique identifier for the channel",
                                "optional": false
                            },
                            {
                                "name": "subChannelID",
                                "type": [
                                    "string"
                                ],
                                "description": "The subChannelID that will be used to access special subchannel methods",
                                "optional": false
                            },
                            {
                                "name": "senderID",
                                "type": [
                                    "string"
                                ],
                                "description": "An ID that the reciever of this channel can respond to (can be left out)",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Promise"
                            ],
                            "description": "An instance of the ChannelSender class"
                        }
                    },
                    {
                        "sourceURL": "source-channelHandler.html",
                        "range": [
                            1331,
                            1445
                        ],
                        "URL": "ChannelHandler.html#method-static-createReceiver",
                        "name": "createReceiver",
                        "access": "public",
                        "description": "Create a new channel reciever, allowing to recieve messages from the channel",
                        "parameters": [
                            {
                                "name": "ID",
                                "type": [
                                    "string"
                                ],
                                "description": "The unique identifier for the channel",
                                "optional": false
                            },
                            {
                                "name": "listeners",
                                "type": [
                                    "Object"
                                ],
                                "description": "An object of functions to act on messages indexed by message type",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Promise"
                            ],
                            "description": "An instance of the ChannelReceiver class"
                        }
                    }
                ]
            },
            "fields": {
                "static": [],
                "instance": []
            },
            "types": []
        },
        "ChannelReceiver": {
            "URL": "ChannelReceiver.html",
            "sourceURL": "source-channelReceiver.html",
            "range": [
                610,
                2085
            ],
            "name": "ChannelReceiver",
            "static": true,
            "params": [
                {
                    "name": "ID",
                    "type": [
                        "string"
                    ],
                    "description": "The unique identifier for the channel",
                    "optional": false
                },
                {
                    "name": "listeners",
                    "type": [
                        "Object"
                    ],
                    "description": "An object of functions to act on messages indexed by message type",
                    "optional": false
                }
            ],
            "methods": {
                "static": {
                    "public": [],
                    "protected": [],
                    "private": []
                },
                "instance": {
                    "public": [
                        {
                            "sourceURL": "source-channelReceiver.html",
                            "range": [
                                2435,
                                2570
                            ],
                            "URL": "ChannelReceiver.html#method-createSubChannel",
                            "name": "createSubChannel",
                            "access": "public",
                            "description": "Create a subchannel that can overwrite certain listeners on the channel, or add listeners just for the sub channel",
                            "parameters": [
                                {
                                    "name": "ID",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The ID of the subchannel",
                                    "optional": false
                                },
                                {
                                    "name": "listeners",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "An object of functions to act on messages indexed by message type",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-channelReceiver.html",
                            "range": [
                                2722,
                                2788
                            ],
                            "URL": "ChannelReceiver.html#method-deleteSubChannel",
                            "name": "deleteSubChannel",
                            "access": "public",
                            "description": "Delete a subchannel",
                            "parameters": [
                                {
                                    "name": "ID",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The subChannel to remove",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-channelReceiver.html",
                            "range": [
                                2895,
                                2936
                            ],
                            "URL": "ChannelReceiver.html#method-getID",
                            "name": "getID",
                            "access": "public",
                            "description": "Get the channel ID",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "string"
                                ],
                                "description": "The channel ID"
                            }
                        },
                        {
                            "sourceURL": "source-channelReceiver.html",
                            "range": [
                                3035,
                                3298
                            ],
                            "URL": "ChannelReceiver.html#method-close",
                            "name": "close",
                            "access": "public",
                            "description": "Dispose of all data",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        }
                    ],
                    "protected": [],
                    "private": [
                        {
                            "sourceURL": "source-channelReceiver.html",
                            "range": [
                                3683,
                                4319
                            ],
                            "URL": "ChannelReceiver.html#method-__emitEvent",
                            "name": "__emitEvent",
                            "access": "private",
                            "description": "Emit an event to the registered listener",
                            "parameters": [
                                {
                                    "name": "message",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The event type to invoke",
                                    "optional": false
                                },
                                {
                                    "name": "event",
                                    "type": [
                                        "ChannelReceiver~ChannelEvent"
                                    ],
                                    "description": "The event data to pass to the listener",
                                    "optional": false
                                },
                                {
                                    "name": "subChannelID",
                                    "type": [
                                        "string",
                                        "undefined"
                                    ],
                                    "description": "The subchannel of which to take the listener if available",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-channelReceiver.html",
                            "range": [
                                4573,
                                5301
                            ],
                            "URL": "ChannelReceiver.html#method-__broadCastMessageTypes",
                            "name": "__broadCastMessageTypes",
                            "access": "private",
                            "description": "Broadcast all available message types to the specified processes/windows",
                            "parameters": [
                                {
                                    "name": "processes",
                                    "type": [
                                        "string",
                                        "Array"
                                    ],
                                    "description": "The processes/windows to send the message types to",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        }
                    ]
                },
                "all": [
                    {
                        "sourceURL": "source-channelReceiver.html",
                        "range": [
                            2435,
                            2570
                        ],
                        "URL": "ChannelReceiver.html#method-createSubChannel",
                        "name": "createSubChannel",
                        "access": "public",
                        "description": "Create a subchannel that can overwrite certain listeners on the channel, or add listeners just for the sub channel",
                        "parameters": [
                            {
                                "name": "ID",
                                "type": [
                                    "string"
                                ],
                                "description": "The ID of the subchannel",
                                "optional": false
                            },
                            {
                                "name": "listeners",
                                "type": [
                                    "Object"
                                ],
                                "description": "An object of functions to act on messages indexed by message type",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-channelReceiver.html",
                        "range": [
                            2722,
                            2788
                        ],
                        "URL": "ChannelReceiver.html#method-deleteSubChannel",
                        "name": "deleteSubChannel",
                        "access": "public",
                        "description": "Delete a subchannel",
                        "parameters": [
                            {
                                "name": "ID",
                                "type": [
                                    "string"
                                ],
                                "description": "The subChannel to remove",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-channelReceiver.html",
                        "range": [
                            2895,
                            2936
                        ],
                        "URL": "ChannelReceiver.html#method-getID",
                        "name": "getID",
                        "access": "public",
                        "description": "Get the channel ID",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "string"
                            ],
                            "description": "The channel ID"
                        }
                    },
                    {
                        "sourceURL": "source-channelReceiver.html",
                        "range": [
                            3035,
                            3298
                        ],
                        "URL": "ChannelReceiver.html#method-close",
                        "name": "close",
                        "access": "public",
                        "description": "Dispose of all data",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-channelReceiver.html",
                        "range": [
                            3683,
                            4319
                        ],
                        "URL": "ChannelReceiver.html#method-__emitEvent",
                        "name": "__emitEvent",
                        "access": "private",
                        "description": "Emit an event to the registered listener",
                        "parameters": [
                            {
                                "name": "message",
                                "type": [
                                    "string"
                                ],
                                "description": "The event type to invoke",
                                "optional": false
                            },
                            {
                                "name": "event",
                                "type": [
                                    "ChannelReceiver~ChannelEvent"
                                ],
                                "description": "The event data to pass to the listener",
                                "optional": false
                            },
                            {
                                "name": "subChannelID",
                                "type": [
                                    "string",
                                    "undefined"
                                ],
                                "description": "The subchannel of which to take the listener if available",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-channelReceiver.html",
                        "range": [
                            4573,
                            5301
                        ],
                        "URL": "ChannelReceiver.html#method-__broadCastMessageTypes",
                        "name": "__broadCastMessageTypes",
                        "access": "private",
                        "description": "Broadcast all available message types to the specified processes/windows",
                        "parameters": [
                            {
                                "name": "processes",
                                "type": [
                                    "string",
                                    "Array"
                                ],
                                "description": "The processes/windows to send the message types to",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    }
                ]
            },
            "fields": {
                "static": [],
                "instance": []
            },
            "types": [
                {
                    "name": "ChannelEvent",
                    "type": {
                        "names": [
                            "object"
                        ]
                    },
                    "properties": [
                        {
                            "name": "senderID",
                            "description": "The ID of the channel that sent the message",
                            "type": [
                                "number"
                            ]
                        },
                        {
                            "name": "data",
                            "description": "The data that was sent with the event",
                            "type": [
                                "*"
                            ]
                        }
                    ],
                    "URL": "ChannelReceiver.htmlundefined"
                }
            ]
        },
        "ChannelSender": {
            "URL": "ChannelSender.html",
            "sourceURL": "source-channelSender.html",
            "range": [
                512,
                900
            ],
            "name": "ChannelSender",
            "static": true,
            "params": [
                {
                    "name": "ID",
                    "type": [
                        "string"
                    ],
                    "description": "The unique identifier for the channel",
                    "optional": false
                },
                {
                    "name": "subChannelID",
                    "type": [
                        "string"
                    ],
                    "description": "The subChannelID that will be used to access special subchannel methods",
                    "optional": false
                },
                {
                    "name": "senderID",
                    "type": [
                        "string"
                    ],
                    "description": "An ID that the reciever of this channel can respond to (can be left out)",
                    "optional": false
                }
            ],
            "methods": {
                "static": {
                    "public": [],
                    "protected": [],
                    "private": []
                },
                "instance": {
                    "public": [],
                    "protected": [
                        {
                            "sourceURL": "source-channelSender.html",
                            "range": [
                                1213,
                                2693
                            ],
                            "URL": "ChannelSender.html#method-_setupMethods",
                            "name": "_setupMethods",
                            "access": "protected",
                            "description": "Either requests methods to be set up according to the available message types,\rOr sets up the actual methods according to the passed data",
                            "parameters": [
                                {
                                    "name": "types",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The available message types to set",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-channelSender.html",
                            "range": [
                                2804,
                                2853
                            ],
                            "URL": "ChannelSender.html#method-_getID",
                            "name": "_getID",
                            "access": "protected",
                            "description": "Get the channel ID",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "string"
                                ],
                                "description": "The channel ID"
                            }
                        },
                        {
                            "sourceURL": "source-channelSender.html",
                            "range": [
                                2970,
                                3039
                            ],
                            "URL": "ChannelSender.html#method-_getSubChannelID",
                            "name": "_getSubChannelID",
                            "access": "protected",
                            "description": "Get the subchannel ID",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "string"
                                ],
                                "description": "The subchannel ID"
                            }
                        }
                    ],
                    "private": [
                        {
                            "sourceURL": "source-channelSender.html",
                            "range": [
                                3197,
                                4029
                            ],
                            "URL": "ChannelSender.html#method-__setupChannelMessageTypeListener",
                            "name": "__setupChannelMessageTypeListener",
                            "access": "private",
                            "description": "Starts listening for the channel receiver to send its available message types",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-channelSender.html",
                            "range": [
                                4270,
                                4739
                            ],
                            "URL": "ChannelSender.html#method-__sendMessage",
                            "name": "__sendMessage",
                            "access": "private",
                            "description": "Send a message to the channel receiver",
                            "parameters": [
                                {
                                    "name": "message",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The message type",
                                    "optional": false
                                },
                                {
                                    "name": "args",
                                    "type": [
                                        "Array"
                                    ],
                                    "description": "The data to send as an argument array",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        }
                    ]
                },
                "all": [
                    {
                        "sourceURL": "source-channelSender.html",
                        "range": [
                            1213,
                            2693
                        ],
                        "URL": "ChannelSender.html#method-_setupMethods",
                        "name": "_setupMethods",
                        "access": "protected",
                        "description": "Either requests methods to be set up according to the available message types,\rOr sets up the actual methods according to the passed data",
                        "parameters": [
                            {
                                "name": "types",
                                "type": [
                                    "Object"
                                ],
                                "description": "The available message types to set",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-channelSender.html",
                        "range": [
                            2804,
                            2853
                        ],
                        "URL": "ChannelSender.html#method-_getID",
                        "name": "_getID",
                        "access": "protected",
                        "description": "Get the channel ID",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "string"
                            ],
                            "description": "The channel ID"
                        }
                    },
                    {
                        "sourceURL": "source-channelSender.html",
                        "range": [
                            2970,
                            3039
                        ],
                        "URL": "ChannelSender.html#method-_getSubChannelID",
                        "name": "_getSubChannelID",
                        "access": "protected",
                        "description": "Get the subchannel ID",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "string"
                            ],
                            "description": "The subchannel ID"
                        }
                    },
                    {
                        "sourceURL": "source-channelSender.html",
                        "range": [
                            3197,
                            4029
                        ],
                        "URL": "ChannelSender.html#method-__setupChannelMessageTypeListener",
                        "name": "__setupChannelMessageTypeListener",
                        "access": "private",
                        "description": "Starts listening for the channel receiver to send its available message types",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-channelSender.html",
                        "range": [
                            4270,
                            4739
                        ],
                        "URL": "ChannelSender.html#method-__sendMessage",
                        "name": "__sendMessage",
                        "access": "private",
                        "description": "Send a message to the channel receiver",
                        "parameters": [
                            {
                                "name": "message",
                                "type": [
                                    "string"
                                ],
                                "description": "The message type",
                                "optional": false
                            },
                            {
                                "name": "args",
                                "type": [
                                    "Array"
                                ],
                                "description": "The data to send as an argument array",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    }
                ]
            },
            "fields": {
                "static": [],
                "instance": []
            },
            "types": []
        },
        "GlobalData": {
            "URL": "GlobalData.html",
            "sourceURL": "source-globalData.html",
            "range": [
                310,
                751
            ],
            "name": "GlobalData",
            "static": true,
            "params": [
                {
                    "name": "ID",
                    "type": [
                        "string"
                    ],
                    "description": "The ID of the global data to synchronise with",
                    "optional": false
                }
            ],
            "methods": {
                "static": {
                    "public": [],
                    "protected": [],
                    "private": []
                },
                "instance": {
                    "public": [
                        {
                            "sourceURL": "source-globalData.html",
                            "range": [
                                1088,
                                1283
                            ],
                            "URL": "GlobalData.html#method-change",
                            "name": "change",
                            "access": "public",
                            "description": "Changes the data by providing an object with the field you want to alter,\rThe value 'undefined' can be used to delete a field",
                            "parameters": [
                                {
                                    "name": "data",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The object with the altered fields",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "The currently saved data after the alteration"
                            }
                        },
                        {
                            "sourceURL": "source-globalData.html",
                            "range": [
                                1518,
                                1937
                            ],
                            "URL": "GlobalData.html#method-get",
                            "name": "get",
                            "access": "public",
                            "description": "Gets a specific property by specifying the path to said property",
                            "parameters": [
                                {
                                    "name": "path",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The path to the property",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "*"
                                ],
                                "description": "The data saved under the specified field"
                            }
                        },
                        {
                            "sourceURL": "source-globalData.html",
                            "range": [
                                2400,
                                2801
                            ],
                            "URL": "GlobalData.html#method-on",
                            "name": "on",
                            "access": "public",
                            "description": "Adds a listener to the object which will get invoked when data changes",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": [
                                        "'update'",
                                        "'delete'",
                                        "'create'",
                                        "'change'"
                                    ],
                                    "description": "The event type to listen to (may be prefexid by path E.G. 'field.subField.update')",
                                    "optional": false
                                },
                                {
                                    "name": "listener",
                                    "type": [
                                        "function"
                                    ],
                                    "description": "The function to call once a property has been changed",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-globalData.html",
                            "range": [
                                3206,
                                3703
                            ],
                            "URL": "GlobalData.html#method-off",
                            "name": "off",
                            "access": "public",
                            "description": "Removes a listener from the object which would have gotten invoked when data changes",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": [
                                        "'update'",
                                        "'delete'",
                                        "'create'",
                                        "'change'"
                                    ],
                                    "description": "The event type that was listened to (may be prefexid by path E.G. 'field.subField.update')",
                                    "optional": false
                                },
                                {
                                    "name": "listener",
                                    "type": [
                                        "function"
                                    ],
                                    "description": "The function that was listening to said event type",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-globalData.html",
                            "range": [
                                3852,
                                3976
                            ],
                            "URL": "GlobalData.html#method-dispose",
                            "name": "dispose",
                            "access": "public",
                            "description": "Gets rid of all connected data such that the object is safely removed",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        }
                    ],
                    "protected": [
                        {
                            "sourceURL": "source-globalData.html",
                            "range": [
                                4202,
                                4252
                            ],
                            "URL": "GlobalData.html#method-_setData",
                            "name": "_setData",
                            "access": "protected",
                            "description": "Sets the initial data of the object, without sending events to other instances",
                            "parameters": [
                                {
                                    "name": "data",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The data to store in the instance",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        }
                    ],
                    "private": [
                        {
                            "sourceURL": "source-globalData.html",
                            "range": [
                                4598,
                                5757
                            ],
                            "URL": "GlobalData.html#method-__setField",
                            "name": "__setField",
                            "access": "private",
                            "description": "Alters a local field and sends out an event to all listeners",
                            "parameters": [
                                {
                                    "name": "path",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The path to the field to change",
                                    "optional": false
                                },
                                {
                                    "name": "value",
                                    "type": [
                                        "*"
                                    ],
                                    "description": "The new value to store in the field",
                                    "optional": false
                                },
                                {
                                    "name": "type",
                                    "type": [
                                        "'delete'",
                                        "'create'",
                                        "'change'"
                                    ],
                                    "description": "The event type to execute",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-globalData.html",
                            "range": [
                                6118,
                                7355
                            ],
                            "URL": "GlobalData.html#method-__emitEvent",
                            "name": "__emitEvent",
                            "access": "private",
                            "description": "Sends an event to the correct listeners with the correct data",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": [
                                        "'update'",
                                        "'delete'",
                                        "'create'",
                                        "'change'"
                                    ],
                                    "description": "The type of event to emit",
                                    "optional": false
                                },
                                {
                                    "name": "path",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The path to the field for which to emit the event",
                                    "optional": false
                                },
                                {
                                    "name": "event",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The event to emit",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        }
                    ]
                },
                "all": [
                    {
                        "sourceURL": "source-globalData.html",
                        "range": [
                            1088,
                            1283
                        ],
                        "URL": "GlobalData.html#method-change",
                        "name": "change",
                        "access": "public",
                        "description": "Changes the data by providing an object with the field you want to alter,\rThe value 'undefined' can be used to delete a field",
                        "parameters": [
                            {
                                "name": "data",
                                "type": [
                                    "Object"
                                ],
                                "description": "The object with the altered fields",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Object"
                            ],
                            "description": "The currently saved data after the alteration"
                        }
                    },
                    {
                        "sourceURL": "source-globalData.html",
                        "range": [
                            1518,
                            1937
                        ],
                        "URL": "GlobalData.html#method-get",
                        "name": "get",
                        "access": "public",
                        "description": "Gets a specific property by specifying the path to said property",
                        "parameters": [
                            {
                                "name": "path",
                                "type": [
                                    "string"
                                ],
                                "description": "The path to the property",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "*"
                            ],
                            "description": "The data saved under the specified field"
                        }
                    },
                    {
                        "sourceURL": "source-globalData.html",
                        "range": [
                            2400,
                            2801
                        ],
                        "URL": "GlobalData.html#method-on",
                        "name": "on",
                        "access": "public",
                        "description": "Adds a listener to the object which will get invoked when data changes",
                        "parameters": [
                            {
                                "name": "type",
                                "type": [
                                    "'update'",
                                    "'delete'",
                                    "'create'",
                                    "'change'"
                                ],
                                "description": "The event type to listen to (may be prefexid by path E.G. 'field.subField.update')",
                                "optional": false
                            },
                            {
                                "name": "listener",
                                "type": [
                                    "function"
                                ],
                                "description": "The function to call once a property has been changed",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-globalData.html",
                        "range": [
                            3206,
                            3703
                        ],
                        "URL": "GlobalData.html#method-off",
                        "name": "off",
                        "access": "public",
                        "description": "Removes a listener from the object which would have gotten invoked when data changes",
                        "parameters": [
                            {
                                "name": "type",
                                "type": [
                                    "'update'",
                                    "'delete'",
                                    "'create'",
                                    "'change'"
                                ],
                                "description": "The event type that was listened to (may be prefexid by path E.G. 'field.subField.update')",
                                "optional": false
                            },
                            {
                                "name": "listener",
                                "type": [
                                    "function"
                                ],
                                "description": "The function that was listening to said event type",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-globalData.html",
                        "range": [
                            3852,
                            3976
                        ],
                        "URL": "GlobalData.html#method-dispose",
                        "name": "dispose",
                        "access": "public",
                        "description": "Gets rid of all connected data such that the object is safely removed",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-globalData.html",
                        "range": [
                            4202,
                            4252
                        ],
                        "URL": "GlobalData.html#method-_setData",
                        "name": "_setData",
                        "access": "protected",
                        "description": "Sets the initial data of the object, without sending events to other instances",
                        "parameters": [
                            {
                                "name": "data",
                                "type": [
                                    "Object"
                                ],
                                "description": "The data to store in the instance",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-globalData.html",
                        "range": [
                            4598,
                            5757
                        ],
                        "URL": "GlobalData.html#method-__setField",
                        "name": "__setField",
                        "access": "private",
                        "description": "Alters a local field and sends out an event to all listeners",
                        "parameters": [
                            {
                                "name": "path",
                                "type": [
                                    "string"
                                ],
                                "description": "The path to the field to change",
                                "optional": false
                            },
                            {
                                "name": "value",
                                "type": [
                                    "*"
                                ],
                                "description": "The new value to store in the field",
                                "optional": false
                            },
                            {
                                "name": "type",
                                "type": [
                                    "'delete'",
                                    "'create'",
                                    "'change'"
                                ],
                                "description": "The event type to execute",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-globalData.html",
                        "range": [
                            6118,
                            7355
                        ],
                        "URL": "GlobalData.html#method-__emitEvent",
                        "name": "__emitEvent",
                        "access": "private",
                        "description": "Sends an event to the correct listeners with the correct data",
                        "parameters": [
                            {
                                "name": "type",
                                "type": [
                                    "'update'",
                                    "'delete'",
                                    "'create'",
                                    "'change'"
                                ],
                                "description": "The type of event to emit",
                                "optional": false
                            },
                            {
                                "name": "path",
                                "type": [
                                    "string"
                                ],
                                "description": "The path to the field for which to emit the event",
                                "optional": false
                            },
                            {
                                "name": "event",
                                "type": [
                                    "Object"
                                ],
                                "description": "The event to emit",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    }
                ]
            },
            "fields": {
                "static": [],
                "instance": []
            },
            "types": []
        },
        "GlobalDataHandler": {
            "URL": "GlobalDataHandler.html",
            "sourceURL": "source-globalDataHandler.html",
            "range": [
                279,
                7254
            ],
            "name": "GlobalDataHandler",
            "description": "A static class that allows you to create global data which will be synchronised between modules",
            "static": true,
            "methods": {
                "static": {
                    "public": [
                        {
                            "sourceURL": "source-globalDataHandler.html",
                            "range": [
                                674,
                                1280
                            ],
                            "URL": "GlobalDataHandler.html#method-static-create",
                            "name": "create",
                            "access": "public",
                            "description": "Creates a new globalData instance",
                            "parameters": [
                                {
                                    "name": "ID",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The identifier of the globalData (preferably prefixed with some class ID)",
                                    "optional": false
                                },
                                {
                                    "name": "defaultData",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The data that the globalData should contain if it hasn't been initialised yet",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "GlobalData"
                                ],
                                "description": "The globalData instance"
                            }
                        }
                    ],
                    "protected": [
                        {
                            "sourceURL": "source-globalDataHandler.html",
                            "range": [
                                1752,
                                5790
                            ],
                            "URL": "GlobalDataHandler.html#method-static-_changeField",
                            "name": "_changeField",
                            "access": "protected",
                            "description": "Changes a field of for all instances of a specific globalData object",
                            "parameters": [
                                {
                                    "name": "ID",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The identifier of the globalData that this data belongs to",
                                    "optional": false
                                },
                                {
                                    "name": "currentData",
                                    "type": [
                                        "*"
                                    ],
                                    "description": "The data that is currently located at this path",
                                    "optional": false
                                },
                                {
                                    "name": "newData",
                                    "type": [
                                        "*"
                                    ],
                                    "description": "The data that we want to assign to this path",
                                    "optional": false
                                },
                                {
                                    "name": "path",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The path to assign the data to",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "The newly set data"
                            }
                        }
                    ],
                    "private": [
                        {
                            "sourceURL": "source-globalDataHandler.html",
                            "range": [
                                5971,
                                7251
                            ],
                            "URL": "GlobalDataHandler.html#method-static-__setup",
                            "name": "__setup",
                            "access": "private",
                            "description": "The initial setup method to be called by this file itself, initialises the static fields of the class",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        }
                    ]
                },
                "instance": {
                    "public": [],
                    "protected": [],
                    "private": []
                },
                "all": [
                    {
                        "sourceURL": "source-globalDataHandler.html",
                        "range": [
                            674,
                            1280
                        ],
                        "URL": "GlobalDataHandler.html#method-static-create",
                        "name": "create",
                        "access": "public",
                        "description": "Creates a new globalData instance",
                        "parameters": [
                            {
                                "name": "ID",
                                "type": [
                                    "string"
                                ],
                                "description": "The identifier of the globalData (preferably prefixed with some class ID)",
                                "optional": false
                            },
                            {
                                "name": "defaultData",
                                "type": [
                                    "Object"
                                ],
                                "description": "The data that the globalData should contain if it hasn't been initialised yet",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "GlobalData"
                            ],
                            "description": "The globalData instance"
                        }
                    },
                    {
                        "sourceURL": "source-globalDataHandler.html",
                        "range": [
                            1752,
                            5790
                        ],
                        "URL": "GlobalDataHandler.html#method-static-_changeField",
                        "name": "_changeField",
                        "access": "protected",
                        "description": "Changes a field of for all instances of a specific globalData object",
                        "parameters": [
                            {
                                "name": "ID",
                                "type": [
                                    "string"
                                ],
                                "description": "The identifier of the globalData that this data belongs to",
                                "optional": false
                            },
                            {
                                "name": "currentData",
                                "type": [
                                    "*"
                                ],
                                "description": "The data that is currently located at this path",
                                "optional": false
                            },
                            {
                                "name": "newData",
                                "type": [
                                    "*"
                                ],
                                "description": "The data that we want to assign to this path",
                                "optional": false
                            },
                            {
                                "name": "path",
                                "type": [
                                    "string"
                                ],
                                "description": "The path to assign the data to",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Object"
                            ],
                            "description": "The newly set data"
                        }
                    },
                    {
                        "sourceURL": "source-globalDataHandler.html",
                        "range": [
                            5971,
                            7251
                        ],
                        "URL": "GlobalDataHandler.html#method-static-__setup",
                        "name": "__setup",
                        "access": "private",
                        "description": "The initial setup method to be called by this file itself, initialises the static fields of the class",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    }
                ]
            },
            "fields": {
                "static": [],
                "instance": []
            },
            "types": []
        },
        "Settings": {
            "URL": "Settings.html",
            "sourceURL": "source-settings.html",
            "range": [
                483,
                572
            ],
            "name": "Settings",
            "extends": [
                "GlobalData"
            ],
            "static": true,
            "params": [
                {
                    "name": "ID",
                    "type": [
                        "string"
                    ],
                    "description": "The ID of the settings to synchronise with",
                    "optional": false
                },
                {
                    "name": "fileName",
                    "type": [
                        "string"
                    ],
                    "description": "The file name in which to save the settings",
                    "optional": false
                }
            ],
            "methods": {
                "static": {
                    "public": [],
                    "protected": [],
                    "private": []
                },
                "instance": {
                    "public": [
                        {
                            "sourceURL": "source-settings.html",
                            "range": [
                                832,
                                975
                            ],
                            "URL": "Settings.html#method-dispose",
                            "name": "dispose",
                            "access": "public",
                            "description": "Gets rid of all connected data such that the object is safely removed and saves the data in the file",
                            "parameters": [
                                {
                                    "name": "dontSave",
                                    "type": [
                                        "boolean"
                                    ],
                                    "description": "Whether to not save the file when disposing",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-settings.html",
                            "range": [
                                1106,
                                1311
                            ],
                            "URL": "Settings.html#method-save",
                            "name": "save",
                            "access": "public",
                            "description": "Saves the data in the specified file",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-settings.html",
                            "range": [
                                1446,
                                1657
                            ],
                            "URL": "Settings.html#method-reload",
                            "name": "reload",
                            "access": "public",
                            "description": "Reloads the data from the specified file",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-globalData.html",
                            "range": [
                                1088,
                                1283
                            ],
                            "URL": "Settings.html#method-change",
                            "name": "change",
                            "access": "public",
                            "description": "Changes the data by providing an object with the field you want to alter,\rThe value 'undefined' can be used to delete a field",
                            "parameters": [
                                {
                                    "name": "data",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The object with the altered fields",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "The currently saved data after the alteration"
                            }
                        },
                        {
                            "sourceURL": "source-globalData.html",
                            "range": [
                                1518,
                                1937
                            ],
                            "URL": "Settings.html#method-get",
                            "name": "get",
                            "access": "public",
                            "description": "Gets a specific property by specifying the path to said property",
                            "parameters": [
                                {
                                    "name": "path",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The path to the property",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "*"
                                ],
                                "description": "The data saved under the specified field"
                            }
                        },
                        {
                            "sourceURL": "source-globalData.html",
                            "range": [
                                2400,
                                2801
                            ],
                            "URL": "Settings.html#method-on",
                            "name": "on",
                            "access": "public",
                            "description": "Adds a listener to the object which will get invoked when data changes",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": [
                                        "'update'",
                                        "'delete'",
                                        "'create'",
                                        "'change'"
                                    ],
                                    "description": "The event type to listen to (may be prefexid by path E.G. 'field.subField.update')",
                                    "optional": false
                                },
                                {
                                    "name": "listener",
                                    "type": [
                                        "function"
                                    ],
                                    "description": "The function to call once a property has been changed",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-globalData.html",
                            "range": [
                                3206,
                                3703
                            ],
                            "URL": "Settings.html#method-off",
                            "name": "off",
                            "access": "public",
                            "description": "Removes a listener from the object which would have gotten invoked when data changes",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": [
                                        "'update'",
                                        "'delete'",
                                        "'create'",
                                        "'change'"
                                    ],
                                    "description": "The event type that was listened to (may be prefexid by path E.G. 'field.subField.update')",
                                    "optional": false
                                },
                                {
                                    "name": "listener",
                                    "type": [
                                        "function"
                                    ],
                                    "description": "The function that was listening to said event type",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        }
                    ],
                    "protected": [
                        {
                            "sourceURL": "source-globalData.html",
                            "range": [
                                4202,
                                4252
                            ],
                            "URL": "Settings.html#method-_setData",
                            "name": "_setData",
                            "access": "protected",
                            "description": "Sets the initial data of the object, without sending events to other instances",
                            "parameters": [
                                {
                                    "name": "data",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The data to store in the instance",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        }
                    ],
                    "private": [
                        {
                            "sourceURL": "source-globalData.html",
                            "range": [
                                4598,
                                5757
                            ],
                            "URL": "Settings.html#method-__setField",
                            "name": "__setField",
                            "access": "private",
                            "description": "Alters a local field and sends out an event to all listeners",
                            "parameters": [
                                {
                                    "name": "path",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The path to the field to change",
                                    "optional": false
                                },
                                {
                                    "name": "value",
                                    "type": [
                                        "*"
                                    ],
                                    "description": "The new value to store in the field",
                                    "optional": false
                                },
                                {
                                    "name": "type",
                                    "type": [
                                        "'delete'",
                                        "'create'",
                                        "'change'"
                                    ],
                                    "description": "The event type to execute",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-globalData.html",
                            "range": [
                                6118,
                                7355
                            ],
                            "URL": "Settings.html#method-__emitEvent",
                            "name": "__emitEvent",
                            "access": "private",
                            "description": "Sends an event to the correct listeners with the correct data",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": [
                                        "'update'",
                                        "'delete'",
                                        "'create'",
                                        "'change'"
                                    ],
                                    "description": "The type of event to emit",
                                    "optional": false
                                },
                                {
                                    "name": "path",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The path to the field for which to emit the event",
                                    "optional": false
                                },
                                {
                                    "name": "event",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The event to emit",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        }
                    ]
                },
                "all": [
                    {
                        "sourceURL": "source-settings.html",
                        "range": [
                            832,
                            975
                        ],
                        "URL": "Settings.html#method-dispose",
                        "name": "dispose",
                        "access": "public",
                        "description": "Gets rid of all connected data such that the object is safely removed and saves the data in the file",
                        "parameters": [
                            {
                                "name": "dontSave",
                                "type": [
                                    "boolean"
                                ],
                                "description": "Whether to not save the file when disposing",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-settings.html",
                        "range": [
                            1106,
                            1311
                        ],
                        "URL": "Settings.html#method-save",
                        "name": "save",
                        "access": "public",
                        "description": "Saves the data in the specified file",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-settings.html",
                        "range": [
                            1446,
                            1657
                        ],
                        "URL": "Settings.html#method-reload",
                        "name": "reload",
                        "access": "public",
                        "description": "Reloads the data from the specified file",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-globalData.html",
                        "range": [
                            1088,
                            1283
                        ],
                        "URL": "Settings.html#method-change",
                        "name": "change",
                        "access": "public",
                        "description": "Changes the data by providing an object with the field you want to alter,\rThe value 'undefined' can be used to delete a field",
                        "parameters": [
                            {
                                "name": "data",
                                "type": [
                                    "Object"
                                ],
                                "description": "The object with the altered fields",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Object"
                            ],
                            "description": "The currently saved data after the alteration"
                        }
                    },
                    {
                        "sourceURL": "source-globalData.html",
                        "range": [
                            1518,
                            1937
                        ],
                        "URL": "Settings.html#method-get",
                        "name": "get",
                        "access": "public",
                        "description": "Gets a specific property by specifying the path to said property",
                        "parameters": [
                            {
                                "name": "path",
                                "type": [
                                    "string"
                                ],
                                "description": "The path to the property",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "*"
                            ],
                            "description": "The data saved under the specified field"
                        }
                    },
                    {
                        "sourceURL": "source-globalData.html",
                        "range": [
                            2400,
                            2801
                        ],
                        "URL": "Settings.html#method-on",
                        "name": "on",
                        "access": "public",
                        "description": "Adds a listener to the object which will get invoked when data changes",
                        "parameters": [
                            {
                                "name": "type",
                                "type": [
                                    "'update'",
                                    "'delete'",
                                    "'create'",
                                    "'change'"
                                ],
                                "description": "The event type to listen to (may be prefexid by path E.G. 'field.subField.update')",
                                "optional": false
                            },
                            {
                                "name": "listener",
                                "type": [
                                    "function"
                                ],
                                "description": "The function to call once a property has been changed",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-globalData.html",
                        "range": [
                            3206,
                            3703
                        ],
                        "URL": "Settings.html#method-off",
                        "name": "off",
                        "access": "public",
                        "description": "Removes a listener from the object which would have gotten invoked when data changes",
                        "parameters": [
                            {
                                "name": "type",
                                "type": [
                                    "'update'",
                                    "'delete'",
                                    "'create'",
                                    "'change'"
                                ],
                                "description": "The event type that was listened to (may be prefexid by path E.G. 'field.subField.update')",
                                "optional": false
                            },
                            {
                                "name": "listener",
                                "type": [
                                    "function"
                                ],
                                "description": "The function that was listening to said event type",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-globalData.html",
                        "range": [
                            4202,
                            4252
                        ],
                        "URL": "Settings.html#method-_setData",
                        "name": "_setData",
                        "access": "protected",
                        "description": "Sets the initial data of the object, without sending events to other instances",
                        "parameters": [
                            {
                                "name": "data",
                                "type": [
                                    "Object"
                                ],
                                "description": "The data to store in the instance",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-globalData.html",
                        "range": [
                            4598,
                            5757
                        ],
                        "URL": "Settings.html#method-__setField",
                        "name": "__setField",
                        "access": "private",
                        "description": "Alters a local field and sends out an event to all listeners",
                        "parameters": [
                            {
                                "name": "path",
                                "type": [
                                    "string"
                                ],
                                "description": "The path to the field to change",
                                "optional": false
                            },
                            {
                                "name": "value",
                                "type": [
                                    "*"
                                ],
                                "description": "The new value to store in the field",
                                "optional": false
                            },
                            {
                                "name": "type",
                                "type": [
                                    "'delete'",
                                    "'create'",
                                    "'change'"
                                ],
                                "description": "The event type to execute",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-globalData.html",
                        "range": [
                            6118,
                            7355
                        ],
                        "URL": "Settings.html#method-__emitEvent",
                        "name": "__emitEvent",
                        "access": "private",
                        "description": "Sends an event to the correct listeners with the correct data",
                        "parameters": [
                            {
                                "name": "type",
                                "type": [
                                    "'update'",
                                    "'delete'",
                                    "'create'",
                                    "'change'"
                                ],
                                "description": "The type of event to emit",
                                "optional": false
                            },
                            {
                                "name": "path",
                                "type": [
                                    "string"
                                ],
                                "description": "The path to the field for which to emit the event",
                                "optional": false
                            },
                            {
                                "name": "event",
                                "type": [
                                    "Object"
                                ],
                                "description": "The event to emit",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    }
                ]
            },
            "fields": {
                "static": [],
                "instance": []
            },
            "types": []
        },
        "SettingsHandler": {
            "URL": "SettingsHandler.html",
            "sourceURL": "source-settingsHandler.html",
            "range": [
                608,
                8037
            ],
            "name": "SettingsHandler",
            "description": "A static class that allows you to create settings which will be synchronised between modules and can be saved in files",
            "static": true,
            "methods": {
                "static": {
                    "public": [
                        {
                            "sourceURL": "source-settingsHandler.html",
                            "range": [
                                979,
                                1325
                            ],
                            "URL": "SettingsHandler.html#method-static-create",
                            "name": "create",
                            "access": "public",
                            "description": "Creates a new settings instance",
                            "parameters": [
                                {
                                    "name": "ID",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The identifier of the settings (preferably prefixed with some class ID)",
                                    "optional": false
                                },
                                {
                                    "name": "defaultData",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The data that the settings should contain if no file exists yet",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Settings"
                                ],
                                "description": "The settings instance"
                            }
                        }
                    ],
                    "protected": [
                        {
                            "sourceURL": "source-settingsHandler.html",
                            "range": [
                                1759,
                                2448
                            ],
                            "URL": "SettingsHandler.html#method-static-_create",
                            "name": "_create",
                            "access": "protected",
                            "description": "Creates a new settings instance",
                            "parameters": [
                                {
                                    "name": "ID",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The identifier of the settings (preferably prefixed with some class ID)",
                                    "optional": false
                                },
                                {
                                    "name": "defaultData",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The data that the settings should contain if no file exists yet",
                                    "optional": false
                                },
                                {
                                    "name": "fileName",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The name of the file to store the settings in",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Settings"
                                ],
                                "description": "The settings instance"
                            }
                        },
                        {
                            "sourceURL": "source-settingsHandler.html",
                            "range": [
                                4466,
                                4717
                            ],
                            "URL": "SettingsHandler.html#method-static-_getModuleFile",
                            "name": "_getModuleFile",
                            "access": "protected",
                            "description": "Gets the contents of a file corresponding to a specific requestPath",
                            "parameters": [
                                {
                                    "name": "requestPath",
                                    "type": [
                                        "RequestPath"
                                    ],
                                    "description": "The path for which to get a file",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "The data that was retrieved from the file"
                            }
                        }
                    ],
                    "private": [
                        {
                            "sourceURL": "source-settingsHandler.html",
                            "range": [
                                2719,
                                3356
                            ],
                            "URL": "SettingsHandler.html#method-static-__getFile",
                            "name": "__getFile",
                            "access": "private",
                            "description": "Gets the contents of the file at the speciifed path",
                            "parameters": [
                                {
                                    "name": "path",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The path to get the data from",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "The data that was retrieved from the file"
                            }
                        },
                        {
                            "sourceURL": "source-settingsHandler.html",
                            "range": [
                                3608,
                                3772
                            ],
                            "URL": "SettingsHandler.html#method-static-__setFile",
                            "name": "__setFile",
                            "access": "private",
                            "description": "Writes contents in the file at the speciifed path",
                            "parameters": [
                                {
                                    "name": "path",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The path to write the data to",
                                    "optional": false
                                },
                                {
                                    "name": "data",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The data to write to the file",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-settingsHandler.html",
                            "range": [
                                4014,
                                4203
                            ],
                            "URL": "SettingsHandler.html#method-static-__getPath",
                            "name": "__getPath",
                            "access": "private",
                            "description": "Gets the correct fle path based on the file name (without extension)",
                            "parameters": [
                                {
                                    "name": "fileName",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The name of the file",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "The data that was retrieved from the file"
                            }
                        },
                        {
                            "sourceURL": "source-settingsHandler.html",
                            "range": [
                                4898,
                                8034
                            ],
                            "URL": "SettingsHandler.html#method-static-__setup",
                            "name": "__setup",
                            "access": "private",
                            "description": "The initial setup method to be called by this file itself, initialises the static fields of the class",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        }
                    ]
                },
                "instance": {
                    "public": [],
                    "protected": [],
                    "private": []
                },
                "all": [
                    {
                        "sourceURL": "source-settingsHandler.html",
                        "range": [
                            979,
                            1325
                        ],
                        "URL": "SettingsHandler.html#method-static-create",
                        "name": "create",
                        "access": "public",
                        "description": "Creates a new settings instance",
                        "parameters": [
                            {
                                "name": "ID",
                                "type": [
                                    "string"
                                ],
                                "description": "The identifier of the settings (preferably prefixed with some class ID)",
                                "optional": false
                            },
                            {
                                "name": "defaultData",
                                "type": [
                                    "Object"
                                ],
                                "description": "The data that the settings should contain if no file exists yet",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Settings"
                            ],
                            "description": "The settings instance"
                        }
                    },
                    {
                        "sourceURL": "source-settingsHandler.html",
                        "range": [
                            1759,
                            2448
                        ],
                        "URL": "SettingsHandler.html#method-static-_create",
                        "name": "_create",
                        "access": "protected",
                        "description": "Creates a new settings instance",
                        "parameters": [
                            {
                                "name": "ID",
                                "type": [
                                    "string"
                                ],
                                "description": "The identifier of the settings (preferably prefixed with some class ID)",
                                "optional": false
                            },
                            {
                                "name": "defaultData",
                                "type": [
                                    "Object"
                                ],
                                "description": "The data that the settings should contain if no file exists yet",
                                "optional": false
                            },
                            {
                                "name": "fileName",
                                "type": [
                                    "string"
                                ],
                                "description": "The name of the file to store the settings in",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Settings"
                            ],
                            "description": "The settings instance"
                        }
                    },
                    {
                        "sourceURL": "source-settingsHandler.html",
                        "range": [
                            4466,
                            4717
                        ],
                        "URL": "SettingsHandler.html#method-static-_getModuleFile",
                        "name": "_getModuleFile",
                        "access": "protected",
                        "description": "Gets the contents of a file corresponding to a specific requestPath",
                        "parameters": [
                            {
                                "name": "requestPath",
                                "type": [
                                    "RequestPath"
                                ],
                                "description": "The path for which to get a file",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Object"
                            ],
                            "description": "The data that was retrieved from the file"
                        }
                    },
                    {
                        "sourceURL": "source-settingsHandler.html",
                        "range": [
                            2719,
                            3356
                        ],
                        "URL": "SettingsHandler.html#method-static-__getFile",
                        "name": "__getFile",
                        "access": "private",
                        "description": "Gets the contents of the file at the speciifed path",
                        "parameters": [
                            {
                                "name": "path",
                                "type": [
                                    "string"
                                ],
                                "description": "The path to get the data from",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Object"
                            ],
                            "description": "The data that was retrieved from the file"
                        }
                    },
                    {
                        "sourceURL": "source-settingsHandler.html",
                        "range": [
                            3608,
                            3772
                        ],
                        "URL": "SettingsHandler.html#method-static-__setFile",
                        "name": "__setFile",
                        "access": "private",
                        "description": "Writes contents in the file at the speciifed path",
                        "parameters": [
                            {
                                "name": "path",
                                "type": [
                                    "string"
                                ],
                                "description": "The path to write the data to",
                                "optional": false
                            },
                            {
                                "name": "data",
                                "type": [
                                    "Object"
                                ],
                                "description": "The data to write to the file",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-settingsHandler.html",
                        "range": [
                            4014,
                            4203
                        ],
                        "URL": "SettingsHandler.html#method-static-__getPath",
                        "name": "__getPath",
                        "access": "private",
                        "description": "Gets the correct fle path based on the file name (without extension)",
                        "parameters": [
                            {
                                "name": "fileName",
                                "type": [
                                    "string"
                                ],
                                "description": "The name of the file",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Object"
                            ],
                            "description": "The data that was retrieved from the file"
                        }
                    },
                    {
                        "sourceURL": "source-settingsHandler.html",
                        "range": [
                            4898,
                            8034
                        ],
                        "URL": "SettingsHandler.html#method-static-__setup",
                        "name": "__setup",
                        "access": "private",
                        "description": "The initial setup method to be called by this file itself, initialises the static fields of the class",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    }
                ]
            },
            "fields": {
                "static": [],
                "instance": []
            },
            "types": []
        },
        "ExtendedJSON": {
            "URL": "ExtendedJSON.html",
            "sourceURL": "source-extendedJSON.html",
            "range": [
                618,
                13615
            ],
            "name": "ExtendedJSON",
            "description": "An extended version of JSON that is able to also encode the following information:\r - Module classes\r - Module class instances (if the class has serialize and deserialize methods)\r - recursive objects/internal object references",
            "static": true,
            "methods": {
                "static": {
                    "public": [
                        {
                            "sourceURL": "source-extendedJSON.html",
                            "range": [
                                888,
                                6085
                            ],
                            "URL": "ExtendedJSON.html#method-static-encode",
                            "name": "encode",
                            "access": "public",
                            "description": "Encode more complicated data into a serializable object",
                            "parameters": [
                                {
                                    "name": "object",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The data you want to map",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "The object that represents your data as as serializable string"
                            }
                        },
                        {
                            "sourceURL": "source-extendedJSON.html",
                            "range": [
                                6374,
                                11254
                            ],
                            "URL": "ExtendedJSON.html#method-static-decode",
                            "name": "decode",
                            "access": "public",
                            "description": "Decode the more complicated data that was encoded into a serializable object",
                            "parameters": [
                                {
                                    "name": "object",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The data you want return into its source data",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "The source data in its format before encoding was applied"
                            }
                        },
                        {
                            "sourceURL": "source-extendedJSON.html",
                            "range": [
                                11525,
                                11603
                            ],
                            "URL": "ExtendedJSON.html#method-static-parse",
                            "name": "parse",
                            "access": "public",
                            "description": "Use ExtendedJSON to turn a string into an object just like JSON would",
                            "parameters": [
                                {
                                    "name": "string",
                                    "type": [
                                        "String"
                                    ],
                                    "description": "The string to translate back into an object",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "The source object that the string was made from"
                            }
                        },
                        {
                            "sourceURL": "source-extendedJSON.html",
                            "range": [
                                11867,
                                11953
                            ],
                            "URL": "ExtendedJSON.html#method-static-stringify",
                            "name": "stringify",
                            "access": "public",
                            "description": "Use ExtendedJSON to turn an object into a string just like JSON would",
                            "parameters": [
                                {
                                    "name": "object",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The source object to turn into a string",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "String"
                                ],
                                "description": "The string that the object was translated into"
                            }
                        }
                    ],
                    "protected": [],
                    "private": [
                        {
                            "sourceURL": "source-extendedJSON.html",
                            "range": [
                                12832,
                                13612
                            ],
                            "URL": "ExtendedJSON.html#method-static-__cleanObject",
                            "name": "__cleanObject",
                            "access": "private",
                            "description": "Goes through an object and returns all the pathSymbols from it",
                            "parameters": [
                                {
                                    "name": "object",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "0 The object to clean up",
                                    "optional": false
                                },
                                {
                                    "name": "prop",
                                    "type": [
                                        "Symbol",
                                        "string"
                                    ],
                                    "description": "The property to remove from the object",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ],
                                "description": "The method returns no useful information"
                            }
                        }
                    ]
                },
                "instance": {
                    "public": [],
                    "protected": [],
                    "private": []
                },
                "all": [
                    {
                        "sourceURL": "source-extendedJSON.html",
                        "range": [
                            888,
                            6085
                        ],
                        "URL": "ExtendedJSON.html#method-static-encode",
                        "name": "encode",
                        "access": "public",
                        "description": "Encode more complicated data into a serializable object",
                        "parameters": [
                            {
                                "name": "object",
                                "type": [
                                    "Object"
                                ],
                                "description": "The data you want to map",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Object"
                            ],
                            "description": "The object that represents your data as as serializable string"
                        }
                    },
                    {
                        "sourceURL": "source-extendedJSON.html",
                        "range": [
                            6374,
                            11254
                        ],
                        "URL": "ExtendedJSON.html#method-static-decode",
                        "name": "decode",
                        "access": "public",
                        "description": "Decode the more complicated data that was encoded into a serializable object",
                        "parameters": [
                            {
                                "name": "object",
                                "type": [
                                    "Object"
                                ],
                                "description": "The data you want return into its source data",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Object"
                            ],
                            "description": "The source data in its format before encoding was applied"
                        }
                    },
                    {
                        "sourceURL": "source-extendedJSON.html",
                        "range": [
                            11525,
                            11603
                        ],
                        "URL": "ExtendedJSON.html#method-static-parse",
                        "name": "parse",
                        "access": "public",
                        "description": "Use ExtendedJSON to turn a string into an object just like JSON would",
                        "parameters": [
                            {
                                "name": "string",
                                "type": [
                                    "String"
                                ],
                                "description": "The string to translate back into an object",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Object"
                            ],
                            "description": "The source object that the string was made from"
                        }
                    },
                    {
                        "sourceURL": "source-extendedJSON.html",
                        "range": [
                            11867,
                            11953
                        ],
                        "URL": "ExtendedJSON.html#method-static-stringify",
                        "name": "stringify",
                        "access": "public",
                        "description": "Use ExtendedJSON to turn an object into a string just like JSON would",
                        "parameters": [
                            {
                                "name": "object",
                                "type": [
                                    "Object"
                                ],
                                "description": "The source object to turn into a string",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "String"
                            ],
                            "description": "The string that the object was translated into"
                        }
                    },
                    {
                        "sourceURL": "source-extendedJSON.html",
                        "range": [
                            12832,
                            13612
                        ],
                        "URL": "ExtendedJSON.html#method-static-__cleanObject",
                        "name": "__cleanObject",
                        "access": "private",
                        "description": "Goes through an object and returns all the pathSymbols from it",
                        "parameters": [
                            {
                                "name": "object",
                                "type": [
                                    "Object"
                                ],
                                "description": "0 The object to clean up",
                                "optional": false
                            },
                            {
                                "name": "prop",
                                "type": [
                                    "Symbol",
                                    "string"
                                ],
                                "description": "The property to remove from the object",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ],
                            "description": "The method returns no useful information"
                        }
                    }
                ]
            },
            "fields": {
                "static": [
                    {
                        "sourceURL": "source-extendedJSON.html",
                        "range": [
                            12148,
                            12218
                        ],
                        "name": "serializeSymbol",
                        "description": "Get the serializeSymbol to use as a function name in your own class, allowing said class to be serialized by ExtendedJSON",
                        "type": [
                            "Symbol"
                        ],
                        "URL": "ExtendedJSON.htmlundefined"
                    },
                    {
                        "sourceURL": "source-extendedJSON.html",
                        "range": [
                            12415,
                            12489
                        ],
                        "name": "deserializeSymbol",
                        "description": "Get the deserializeSymbol to use as a function name in your own class, allowing said class to be deserialized by ExtendedJSON",
                        "type": [
                            "Symbol"
                        ],
                        "URL": "ExtendedJSON.htmlundefined"
                    }
                ],
                "instance": []
            },
            "types": []
        },
        "IPC": {
            "URL": "IPC.html",
            "sourceURL": "source-IPC.html",
            "range": [
                501,
                18766
            ],
            "name": "IPC",
            "description": "A static class that allows for communication between different processes and windows",
            "static": true,
            "methods": {
                "static": {
                    "public": [
                        {
                            "sourceURL": "source-IPC.html",
                            "range": [
                                967,
                                1153
                            ],
                            "URL": "IPC.html#method-static-send",
                            "name": "send",
                            "access": "public",
                            "description": "Send data to another window or the main script",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The event type to send (preferably prefixed with some class ID)",
                                    "optional": false
                                },
                                {
                                    "name": "data",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The data to send",
                                    "optional": false
                                },
                                {
                                    "name": "dest",
                                    "type": [
                                        "string",
                                        "Array"
                                    ],
                                    "description": "The process/window ID(s) to send this data to",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Promise"
                                ],
                                "description": "An array of all the data that listeners for the event have returned"
                            }
                        },
                        {
                            "sourceURL": "source-IPC.html",
                            "range": [
                                1482,
                                1662
                            ],
                            "URL": "IPC.html#method-static-sendSync",
                            "name": "sendSync",
                            "access": "public",
                            "description": "Send data synchronously to the main script",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The event type to send (preferably prefixed with some class ID)",
                                    "optional": false
                                },
                                {
                                    "name": "data",
                                    "type": [
                                        "*"
                                    ],
                                    "description": "The data to send",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Array"
                                ],
                                "description": "An array of all the data that listeners for the event have returned"
                            }
                        },
                        {
                            "sourceURL": "source-IPC.html",
                            "range": [
                                2004,
                                2460
                            ],
                            "URL": "IPC.html#method-static-on",
                            "name": "on",
                            "access": "public",
                            "description": "Listens for data being sent by a process/window",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The type of event to listen for",
                                    "optional": false
                                },
                                {
                                    "name": "handler",
                                    "type": [
                                        "function"
                                    ],
                                    "description": "The function to handle the event occuring",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-IPC.html",
                            "range": [
                                2759,
                                3258
                            ],
                            "URL": "IPC.html#method-static-once",
                            "name": "once",
                            "access": "public",
                            "description": "Listens for data being sent by a process/window, but only listen for it once",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The type of event to listen for",
                                    "optional": false
                                },
                                {
                                    "name": "handler",
                                    "type": [
                                        "function"
                                    ],
                                    "description": "The function to handle the event occuring",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-IPC.html",
                            "range": [
                                3548,
                                3949
                            ],
                            "URL": "IPC.html#method-static-off",
                            "name": "off",
                            "access": "public",
                            "description": "Stops listening for data being sent by a process/window",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": [
                                        "String"
                                    ],
                                    "description": "The type of event that is being listened for",
                                    "optional": false
                                },
                                {
                                    "name": "handler",
                                    "type": [
                                        "function"
                                    ],
                                    "description": "The function that handles the event when occuring",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-IPC.html",
                            "range": [
                                4149,
                                4197
                            ],
                            "URL": "IPC.html#method-static-getID",
                            "name": "getID",
                            "access": "public",
                            "description": "Gets the identifier of this process or window which other processes or windows can use to communicate",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "number"
                                ],
                                "description": "The numeric identifier"
                            }
                        }
                    ],
                    "protected": [
                        {
                            "sourceURL": "source-IPC.html",
                            "range": [
                                4405,
                                4464
                            ],
                            "URL": "IPC.html#method-static-_getWindows",
                            "name": "_getWindows",
                            "access": "protected",
                            "description": "Get all the windows that are registered and can be communicated with (only works in the main process)",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "Array"
                                ],
                                "description": "The actual windows"
                            }
                        },
                        {
                            "sourceURL": "source-IPC.html",
                            "range": [
                                4769,
                                4860
                            ],
                            "URL": "IPC.html#method-static-_registerWindow",
                            "name": "_registerWindow",
                            "access": "protected",
                            "description": "Register a window such that it can start communicating with other processes and windows",
                            "parameters": [
                                {
                                    "name": "window",
                                    "type": [
                                        "BrowserWindow"
                                    ],
                                    "description": "The window to register",
                                    "optional": false
                                },
                                {
                                    "name": "windowID",
                                    "type": [
                                        "number"
                                    ],
                                    "description": "The ID to register the window under",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-IPC.html",
                            "range": [
                                5112,
                                5195
                            ],
                            "URL": "IPC.html#method-static-_deregisterWindow",
                            "name": "_deregisterWindow",
                            "access": "protected",
                            "description": "Deregister a window for when it is destroyed, such that it is no longer listed as a valid window",
                            "parameters": [
                                {
                                    "name": "windowID",
                                    "type": [
                                        "number"
                                    ],
                                    "description": "The ID the window is registered under",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        }
                    ],
                    "private": [
                        {
                            "sourceURL": "source-IPC.html",
                            "range": [
                                5663,
                                6845
                            ],
                            "URL": "IPC.html#method-static-__emitEvent",
                            "name": "__emitEvent",
                            "access": "private",
                            "description": "Emit an event to all the registered listeners in this process/window",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The event type to invoke",
                                    "optional": false
                                },
                                {
                                    "name": "event",
                                    "type": [
                                        "IPC~IPCevent"
                                    ],
                                    "description": "The event data to pass to the listeners",
                                    "optional": false
                                },
                                {
                                    "name": "sync",
                                    "type": [
                                        "boolean"
                                    ],
                                    "description": "Whether to act synchronously and only allow sync returns",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Promise"
                                ],
                                "description": "An array of all the data that listeners for the event have returned"
                            }
                        },
                        {
                            "sourceURL": "source-IPC.html",
                            "range": [
                                7486,
                                11256
                            ],
                            "URL": "IPC.html#method-static-__send",
                            "name": "__send",
                            "access": "private",
                            "description": "Send data to other processes/windows",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The event type to send (preferbly prefixed with some module ID)",
                                    "optional": false
                                },
                                {
                                    "name": "data",
                                    "type": [
                                        "*"
                                    ],
                                    "description": "The data to send",
                                    "optional": false
                                },
                                {
                                    "name": "dest",
                                    "type": [
                                        "string",
                                        "Array"
                                    ],
                                    "description": "The process/window ID(s) to send this data to",
                                    "optional": true
                                },
                                {
                                    "name": "source",
                                    "type": [
                                        "number"
                                    ],
                                    "description": "The process/window ID that the event was originally sent from",
                                    "optional": false
                                },
                                {
                                    "name": "respID",
                                    "type": [
                                        "number"
                                    ],
                                    "description": "The ID of the response listener in the source process/window to call",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Promise"
                                ],
                                "description": "An array of all the data that listeners for the event have returned"
                            }
                        },
                        {
                            "sourceURL": "source-IPC.html",
                            "range": [
                                11681,
                                12415
                            ],
                            "URL": "IPC.html#method-static-__sendSync",
                            "name": "__sendSync",
                            "access": "private",
                            "description": "Send data synchronously to the main script",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The event type to send (preferably prefixed with some class ID)",
                                    "optional": false
                                },
                                {
                                    "name": "data",
                                    "type": [
                                        "*"
                                    ],
                                    "description": "The data to send",
                                    "optional": false
                                },
                                {
                                    "name": "source",
                                    "type": [
                                        "number"
                                    ],
                                    "description": "The process/window ID that the event was originally sent from",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Array"
                                ],
                                "description": "An array of all the data that listeners for the event have returned"
                            }
                        },
                        {
                            "sourceURL": "source-IPC.html",
                            "range": [
                                13001,
                                14500
                            ],
                            "URL": "IPC.html#method-static-__sendResponse",
                            "name": "__sendResponse",
                            "access": "private",
                            "description": "Send a response to the source window that emitted the event",
                            "parameters": [
                                {
                                    "name": "sourceID",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The ID of the event source process/window",
                                    "optional": false
                                },
                                {
                                    "name": "responseData",
                                    "type": [
                                        "object"
                                    ],
                                    "description": "The response data",
                                    "optional": false
                                },
                                {
                                    "name": "responseData.responseID",
                                    "type": [
                                        "number"
                                    ],
                                    "description": "The ID of the response in said process/window",
                                    "optional": false
                                },
                                {
                                    "name": "responseData.responses",
                                    "type": [
                                        "Array"
                                    ],
                                    "description": "The actual array of returned responses",
                                    "optional": false
                                },
                                {
                                    "name": "responseData.responseOriginCount",
                                    "type": [
                                        "number"
                                    ],
                                    "description": "The number of processes/windows that need to return responses",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-IPC.html",
                            "range": [
                                14926,
                                15656
                            ],
                            "URL": "IPC.html#method-static-__recieveResponse",
                            "name": "__recieveResponse",
                            "access": "private",
                            "description": "Recieve a response from some process/window, and resolve promise when all are recieved",
                            "parameters": [
                                {
                                    "name": "responseID",
                                    "type": [
                                        "number"
                                    ],
                                    "description": "The ID of the response identifier",
                                    "optional": false
                                },
                                {
                                    "name": "responses",
                                    "type": [
                                        "Array"
                                    ],
                                    "description": "The actual array of returned responses",
                                    "optional": false
                                },
                                {
                                    "name": "responseOriginCount",
                                    "type": [
                                        "number"
                                    ],
                                    "description": "The number of processes/windows that need to return responses",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-IPC.html",
                            "range": [
                                15837,
                                18763
                            ],
                            "URL": "IPC.html#method-static-__setup",
                            "name": "__setup",
                            "access": "private",
                            "description": "The initial setup method to be called by this file itself, initialises the static fields of the class",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        }
                    ]
                },
                "instance": {
                    "public": [],
                    "protected": [],
                    "private": []
                },
                "all": [
                    {
                        "sourceURL": "source-IPC.html",
                        "range": [
                            967,
                            1153
                        ],
                        "URL": "IPC.html#method-static-send",
                        "name": "send",
                        "access": "public",
                        "description": "Send data to another window or the main script",
                        "parameters": [
                            {
                                "name": "type",
                                "type": [
                                    "string"
                                ],
                                "description": "The event type to send (preferably prefixed with some class ID)",
                                "optional": false
                            },
                            {
                                "name": "data",
                                "type": [
                                    "Object"
                                ],
                                "description": "The data to send",
                                "optional": false
                            },
                            {
                                "name": "dest",
                                "type": [
                                    "string",
                                    "Array"
                                ],
                                "description": "The process/window ID(s) to send this data to",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "Promise"
                            ],
                            "description": "An array of all the data that listeners for the event have returned"
                        }
                    },
                    {
                        "sourceURL": "source-IPC.html",
                        "range": [
                            2004,
                            2460
                        ],
                        "URL": "IPC.html#method-static-on",
                        "name": "on",
                        "access": "public",
                        "description": "Listens for data being sent by a process/window",
                        "parameters": [
                            {
                                "name": "type",
                                "type": [
                                    "string"
                                ],
                                "description": "The type of event to listen for",
                                "optional": false
                            },
                            {
                                "name": "handler",
                                "type": [
                                    "function"
                                ],
                                "description": "The function to handle the event occuring",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-IPC.html",
                        "range": [
                            2759,
                            3258
                        ],
                        "URL": "IPC.html#method-static-once",
                        "name": "once",
                        "access": "public",
                        "description": "Listens for data being sent by a process/window, but only listen for it once",
                        "parameters": [
                            {
                                "name": "type",
                                "type": [
                                    "string"
                                ],
                                "description": "The type of event to listen for",
                                "optional": false
                            },
                            {
                                "name": "handler",
                                "type": [
                                    "function"
                                ],
                                "description": "The function to handle the event occuring",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-IPC.html",
                        "range": [
                            3548,
                            3949
                        ],
                        "URL": "IPC.html#method-static-off",
                        "name": "off",
                        "access": "public",
                        "description": "Stops listening for data being sent by a process/window",
                        "parameters": [
                            {
                                "name": "type",
                                "type": [
                                    "String"
                                ],
                                "description": "The type of event that is being listened for",
                                "optional": false
                            },
                            {
                                "name": "handler",
                                "type": [
                                    "function"
                                ],
                                "description": "The function that handles the event when occuring",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-IPC.html",
                        "range": [
                            4149,
                            4197
                        ],
                        "URL": "IPC.html#method-static-getID",
                        "name": "getID",
                        "access": "public",
                        "description": "Gets the identifier of this process or window which other processes or windows can use to communicate",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "number"
                            ],
                            "description": "The numeric identifier"
                        }
                    },
                    {
                        "sourceURL": "source-IPC.html",
                        "range": [
                            1482,
                            1662
                        ],
                        "URL": "IPC.html#method-static-sendSync",
                        "name": "sendSync",
                        "access": "public",
                        "description": "Send data synchronously to the main script",
                        "parameters": [
                            {
                                "name": "type",
                                "type": [
                                    "string"
                                ],
                                "description": "The event type to send (preferably prefixed with some class ID)",
                                "optional": false
                            },
                            {
                                "name": "data",
                                "type": [
                                    "*"
                                ],
                                "description": "The data to send",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Array"
                            ],
                            "description": "An array of all the data that listeners for the event have returned"
                        }
                    },
                    {
                        "sourceURL": "source-IPC.html",
                        "range": [
                            4405,
                            4464
                        ],
                        "URL": "IPC.html#method-static-_getWindows",
                        "name": "_getWindows",
                        "access": "protected",
                        "description": "Get all the windows that are registered and can be communicated with (only works in the main process)",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "Array"
                            ],
                            "description": "The actual windows"
                        }
                    },
                    {
                        "sourceURL": "source-IPC.html",
                        "range": [
                            4769,
                            4860
                        ],
                        "URL": "IPC.html#method-static-_registerWindow",
                        "name": "_registerWindow",
                        "access": "protected",
                        "description": "Register a window such that it can start communicating with other processes and windows",
                        "parameters": [
                            {
                                "name": "window",
                                "type": [
                                    "BrowserWindow"
                                ],
                                "description": "The window to register",
                                "optional": false
                            },
                            {
                                "name": "windowID",
                                "type": [
                                    "number"
                                ],
                                "description": "The ID to register the window under",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-IPC.html",
                        "range": [
                            5112,
                            5195
                        ],
                        "URL": "IPC.html#method-static-_deregisterWindow",
                        "name": "_deregisterWindow",
                        "access": "protected",
                        "description": "Deregister a window for when it is destroyed, such that it is no longer listed as a valid window",
                        "parameters": [
                            {
                                "name": "windowID",
                                "type": [
                                    "number"
                                ],
                                "description": "The ID the window is registered under",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-IPC.html",
                        "range": [
                            5663,
                            6845
                        ],
                        "URL": "IPC.html#method-static-__emitEvent",
                        "name": "__emitEvent",
                        "access": "private",
                        "description": "Emit an event to all the registered listeners in this process/window",
                        "parameters": [
                            {
                                "name": "type",
                                "type": [
                                    "string"
                                ],
                                "description": "The event type to invoke",
                                "optional": false
                            },
                            {
                                "name": "event",
                                "type": [
                                    "IPC~IPCevent"
                                ],
                                "description": "The event data to pass to the listeners",
                                "optional": false
                            },
                            {
                                "name": "sync",
                                "type": [
                                    "boolean"
                                ],
                                "description": "Whether to act synchronously and only allow sync returns",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "Promise"
                            ],
                            "description": "An array of all the data that listeners for the event have returned"
                        }
                    },
                    {
                        "sourceURL": "source-IPC.html",
                        "range": [
                            7486,
                            11256
                        ],
                        "URL": "IPC.html#method-static-__send",
                        "name": "__send",
                        "access": "private",
                        "description": "Send data to other processes/windows",
                        "parameters": [
                            {
                                "name": "type",
                                "type": [
                                    "string"
                                ],
                                "description": "The event type to send (preferbly prefixed with some module ID)",
                                "optional": false
                            },
                            {
                                "name": "data",
                                "type": [
                                    "*"
                                ],
                                "description": "The data to send",
                                "optional": false
                            },
                            {
                                "name": "dest",
                                "type": [
                                    "string",
                                    "Array"
                                ],
                                "description": "The process/window ID(s) to send this data to",
                                "optional": true
                            },
                            {
                                "name": "source",
                                "type": [
                                    "number"
                                ],
                                "description": "The process/window ID that the event was originally sent from",
                                "optional": false
                            },
                            {
                                "name": "respID",
                                "type": [
                                    "number"
                                ],
                                "description": "The ID of the response listener in the source process/window to call",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Promise"
                            ],
                            "description": "An array of all the data that listeners for the event have returned"
                        }
                    },
                    {
                        "sourceURL": "source-IPC.html",
                        "range": [
                            11681,
                            12415
                        ],
                        "URL": "IPC.html#method-static-__sendSync",
                        "name": "__sendSync",
                        "access": "private",
                        "description": "Send data synchronously to the main script",
                        "parameters": [
                            {
                                "name": "type",
                                "type": [
                                    "string"
                                ],
                                "description": "The event type to send (preferably prefixed with some class ID)",
                                "optional": false
                            },
                            {
                                "name": "data",
                                "type": [
                                    "*"
                                ],
                                "description": "The data to send",
                                "optional": false
                            },
                            {
                                "name": "source",
                                "type": [
                                    "number"
                                ],
                                "description": "The process/window ID that the event was originally sent from",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Array"
                            ],
                            "description": "An array of all the data that listeners for the event have returned"
                        }
                    },
                    {
                        "sourceURL": "source-IPC.html",
                        "range": [
                            13001,
                            14500
                        ],
                        "URL": "IPC.html#method-static-__sendResponse",
                        "name": "__sendResponse",
                        "access": "private",
                        "description": "Send a response to the source window that emitted the event",
                        "parameters": [
                            {
                                "name": "sourceID",
                                "type": [
                                    "string"
                                ],
                                "description": "The ID of the event source process/window",
                                "optional": false
                            },
                            {
                                "name": "responseData",
                                "type": [
                                    "object"
                                ],
                                "description": "The response data",
                                "optional": false
                            },
                            {
                                "name": "responseData.responseID",
                                "type": [
                                    "number"
                                ],
                                "description": "The ID of the response in said process/window",
                                "optional": false
                            },
                            {
                                "name": "responseData.responses",
                                "type": [
                                    "Array"
                                ],
                                "description": "The actual array of returned responses",
                                "optional": false
                            },
                            {
                                "name": "responseData.responseOriginCount",
                                "type": [
                                    "number"
                                ],
                                "description": "The number of processes/windows that need to return responses",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-IPC.html",
                        "range": [
                            14926,
                            15656
                        ],
                        "URL": "IPC.html#method-static-__recieveResponse",
                        "name": "__recieveResponse",
                        "access": "private",
                        "description": "Recieve a response from some process/window, and resolve promise when all are recieved",
                        "parameters": [
                            {
                                "name": "responseID",
                                "type": [
                                    "number"
                                ],
                                "description": "The ID of the response identifier",
                                "optional": false
                            },
                            {
                                "name": "responses",
                                "type": [
                                    "Array"
                                ],
                                "description": "The actual array of returned responses",
                                "optional": false
                            },
                            {
                                "name": "responseOriginCount",
                                "type": [
                                    "number"
                                ],
                                "description": "The number of processes/windows that need to return responses",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-IPC.html",
                        "range": [
                            15837,
                            18763
                        ],
                        "URL": "IPC.html#method-static-__setup",
                        "name": "__setup",
                        "access": "private",
                        "description": "The initial setup method to be called by this file itself, initialises the static fields of the class",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    }
                ]
            },
            "fields": {
                "static": [],
                "instance": []
            },
            "types": [
                {
                    "name": "IPCevent",
                    "type": {
                        "names": [
                            "object"
                        ]
                    },
                    "properties": [
                        {
                            "name": "sourceID",
                            "description": "The ID of the process/window that original sent the event",
                            "type": [
                                "number"
                            ]
                        },
                        {
                            "name": "data",
                            "description": "The data that was sent with the event",
                            "type": [
                                "*"
                            ]
                        }
                    ],
                    "URL": "IPC.htmlundefined"
                }
            ]
        },
        "Module": {
            "URL": "Module.html",
            "sourceURL": "source-module.html",
            "range": [
                588,
                1897
            ],
            "name": "Module",
            "static": false,
            "params": [
                {
                    "name": "request",
                    "type": [
                        "Request"
                    ],
                    "description": "The request that caused this module to be instantiated",
                    "optional": false
                },
                {
                    "name": "canBeDirectlyInstantiated",
                    "type": [
                        "boolean"
                    ],
                    "description": "Whether or not this module should be instantiatable without a request",
                    "optional": false
                }
            ],
            "methods": {
                "static": {
                    "public": [
                        {
                            "sourceURL": "source-module.html",
                            "range": [
                                7324,
                                7482
                            ],
                            "URL": "Module.html#method-static-getPath",
                            "name": "getPath",
                            "access": "public",
                            "description": "Returns the path to this module class",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "string"
                                ],
                                "description": "The path to this module class"
                            }
                        },
                        {
                            "sourceURL": "source-module.html",
                            "range": [
                                7626,
                                7684
                            ],
                            "URL": "Module.html#method-static-toString",
                            "name": "toString",
                            "access": "public",
                            "description": "Returns the path to this module class",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "string"
                                ],
                                "description": "The path to this module class"
                            }
                        }
                    ],
                    "protected": [],
                    "private": []
                },
                "instance": {
                    "public": [
                        {
                            "sourceURL": "source-module.html",
                            "range": [
                                6544,
                                6684
                            ],
                            "URL": "Module.html#method-toString",
                            "name": "toString",
                            "access": "public",
                            "description": "Returns the path to this module instance",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "string"
                                ],
                                "description": "The path to this module instance"
                            }
                        },
                        {
                            "sourceURL": "source-module.html",
                            "range": [
                                6843,
                                6960
                            ],
                            "URL": "Module.html#method-getClass",
                            "name": "getClass",
                            "access": "public",
                            "description": "Returns the class of this module instance",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "Class"
                                ],
                                "description": "The class of this module instance"
                            }
                        },
                        {
                            "sourceURL": "source-module.html",
                            "range": [
                                7116,
                                7180
                            ],
                            "URL": "Module.html#method-getPath",
                            "name": "getPath",
                            "access": "public",
                            "description": "Returns the requestPath that created this module instance",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "RequestPath"
                                ],
                                "description": "The request path"
                            }
                        },
                        {
                            "sourceURL": "source-module.html",
                            "range": [
                                11797,
                                13872
                            ],
                            "URL": "Module.html#method-dispose",
                            "name": "dispose",
                            "access": "public",
                            "description": "Disposes this module entirely, also getting rid of its connections to other modules",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "Promise"
                                ],
                                "description": "The promise that resolves once disposal has completed"
                            }
                        },
                        {
                            "sourceURL": "source-module.html",
                            "range": [
                                14216,
                                16077
                            ],
                            "URL": "Module.html#method-requestHandle",
                            "name": "requestHandle",
                            "access": "public",
                            "description": "Request modules to handle the passed data and establish a connection with these modules",
                            "parameters": [
                                {
                                    "name": "request",
                                    "type": [
                                        "Registry~Request"
                                    ],
                                    "description": "The information on how to handle the data",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Promise"
                                ],
                                "description": "The channel(s) that have been created to answer the request"
                            }
                        }
                    ],
                    "protected": [],
                    "private": [
                        {
                            "sourceURL": "source-module.html",
                            "range": [
                                2062,
                                4931
                            ],
                            "URL": "Module.html#method-__register",
                            "name": "__register",
                            "access": "private",
                            "description": "Registers the module if it wasn't registered already",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "Module"
                                ],
                                "description": "A reference to itself"
                            }
                        },
                        {
                            "sourceURL": "source-module.html",
                            "range": [
                                5208,
                                5370
                            ],
                            "URL": "Module.html#method-__init",
                            "name": "__init",
                            "access": "private",
                            "description": "Adds a function to run before indicating that initialisation has finished",
                            "parameters": [
                                {
                                    "name": "method",
                                    "type": [
                                        "function"
                                    ],
                                    "description": "The function to run (may be async)",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Promise"
                                ],
                                "description": "A promise that resolves when the module is initialised"
                            }
                        },
                        {
                            "sourceURL": "source-module.html",
                            "range": [
                                5762,
                                5874
                            ],
                            "URL": "Module.html#method-__onRegister",
                            "name": "__onRegister",
                            "access": "private",
                            "description": "Adds a then and catch function to the registration completion promise",
                            "parameters": [
                                {
                                    "name": "then",
                                    "type": [
                                        "function"
                                    ],
                                    "description": "The function to run when registration has finished",
                                    "optional": true
                                },
                                {
                                    "name": "ctch",
                                    "type": [
                                        "function"
                                    ],
                                    "description": "The function to run if something goes wrong during registration",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Promise"
                                ],
                                "description": "A reference to this module instance"
                            }
                        },
                        {
                            "sourceURL": "source-module.html",
                            "range": [
                                6272,
                                6361
                            ],
                            "URL": "Module.html#method-onInit",
                            "name": "onInit",
                            "access": "private",
                            "description": "Adds a then and catch function to the initialization completion promise",
                            "parameters": [
                                {
                                    "name": "then",
                                    "type": [
                                        "function"
                                    ],
                                    "description": "The function to run when initialization has finished",
                                    "optional": true
                                },
                                {
                                    "name": "ctch",
                                    "type": [
                                        "function"
                                    ],
                                    "description": "The function to run if something goes wrong during initialization",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Promise"
                                ],
                                "description": "A reference to this module instance"
                            }
                        },
                        {
                            "sourceURL": "source-module.html",
                            "range": [
                                8004,
                                9298
                            ],
                            "URL": "Module.html#method-__getMethods",
                            "name": "__getMethods",
                            "access": "private",
                            "description": "Gets all the methods of this module that are available for channels",
                            "parameters": [
                                {
                                    "name": "regexFilter",
                                    "type": [
                                        "Regex"
                                    ],
                                    "description": "The filter to apply to determine whether or not the method should be returned",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "All methods indexed by name"
                            }
                        },
                        {
                            "sourceURL": "source-module.html",
                            "range": [
                                9467,
                                10597
                            ],
                            "URL": "Module.html#method-__createChannelMethods",
                            "name": "__createChannelMethods",
                            "access": "private",
                            "description": "Creates all methods to interact with this module over a channel",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "All methods indexed by name"
                            }
                        },
                        {
                            "sourceURL": "source-module.html",
                            "range": [
                                10914,
                                11567
                            ],
                            "URL": "Module.html#method-__disconnectDescendant",
                            "name": "__disconnectDescendant",
                            "access": "private",
                            "description": "Disconnects a module from this module (But doesn't dispose it)",
                            "parameters": [
                                {
                                    "name": "requestPath",
                                    "type": [
                                        "RequestPath"
                                    ],
                                    "description": "The request path for the module to disconnect",
                                    "optional": false
                                },
                                {
                                    "name": "type",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The type of request that the module was instiated for",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        }
                    ]
                },
                "all": [
                    {
                        "sourceURL": "source-module.html",
                        "range": [
                            7324,
                            7482
                        ],
                        "URL": "Module.html#method-static-getPath",
                        "name": "getPath",
                        "access": "public",
                        "description": "Returns the path to this module class",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "string"
                            ],
                            "description": "The path to this module class"
                        }
                    },
                    {
                        "sourceURL": "source-module.html",
                        "range": [
                            14216,
                            16077
                        ],
                        "URL": "Module.html#method-requestHandle",
                        "name": "requestHandle",
                        "access": "public",
                        "description": "Request modules to handle the passed data and establish a connection with these modules",
                        "parameters": [
                            {
                                "name": "request",
                                "type": [
                                    "Registry~Request"
                                ],
                                "description": "The information on how to handle the data",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Promise"
                            ],
                            "description": "The channel(s) that have been created to answer the request"
                        }
                    },
                    {
                        "sourceURL": "source-module.html",
                        "range": [
                            11797,
                            13872
                        ],
                        "URL": "Module.html#method-dispose",
                        "name": "dispose",
                        "access": "public",
                        "description": "Disposes this module entirely, also getting rid of its connections to other modules",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "Promise"
                            ],
                            "description": "The promise that resolves once disposal has completed"
                        }
                    },
                    {
                        "sourceURL": "source-module.html",
                        "range": [
                            7626,
                            7684
                        ],
                        "URL": "Module.html#method-static-toString",
                        "name": "toString",
                        "access": "public",
                        "description": "Returns the path to this module class",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "string"
                            ],
                            "description": "The path to this module class"
                        }
                    },
                    {
                        "sourceURL": "source-module.html",
                        "range": [
                            6544,
                            6684
                        ],
                        "URL": "Module.html#method-toString",
                        "name": "toString",
                        "access": "public",
                        "description": "Returns the path to this module instance",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "string"
                            ],
                            "description": "The path to this module instance"
                        }
                    },
                    {
                        "sourceURL": "source-module.html",
                        "range": [
                            6843,
                            6960
                        ],
                        "URL": "Module.html#method-getClass",
                        "name": "getClass",
                        "access": "public",
                        "description": "Returns the class of this module instance",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "Class"
                            ],
                            "description": "The class of this module instance"
                        }
                    },
                    {
                        "sourceURL": "source-module.html",
                        "range": [
                            7116,
                            7180
                        ],
                        "URL": "Module.html#method-getPath",
                        "name": "getPath",
                        "access": "public",
                        "description": "Returns the requestPath that created this module instance",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "RequestPath"
                            ],
                            "description": "The request path"
                        }
                    },
                    {
                        "sourceURL": "source-module.html",
                        "range": [
                            5208,
                            5370
                        ],
                        "URL": "Module.html#method-__init",
                        "name": "__init",
                        "access": "private",
                        "description": "Adds a function to run before indicating that initialisation has finished",
                        "parameters": [
                            {
                                "name": "method",
                                "type": [
                                    "function"
                                ],
                                "description": "The function to run (may be async)",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Promise"
                            ],
                            "description": "A promise that resolves when the module is initialised"
                        }
                    },
                    {
                        "sourceURL": "source-module.html",
                        "range": [
                            6272,
                            6361
                        ],
                        "URL": "Module.html#method-onInit",
                        "name": "onInit",
                        "access": "private",
                        "description": "Adds a then and catch function to the initialization completion promise",
                        "parameters": [
                            {
                                "name": "then",
                                "type": [
                                    "function"
                                ],
                                "description": "The function to run when initialization has finished",
                                "optional": true
                            },
                            {
                                "name": "ctch",
                                "type": [
                                    "function"
                                ],
                                "description": "The function to run if something goes wrong during initialization",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "Promise"
                            ],
                            "description": "A reference to this module instance"
                        }
                    },
                    {
                        "sourceURL": "source-module.html",
                        "range": [
                            8004,
                            9298
                        ],
                        "URL": "Module.html#method-__getMethods",
                        "name": "__getMethods",
                        "access": "private",
                        "description": "Gets all the methods of this module that are available for channels",
                        "parameters": [
                            {
                                "name": "regexFilter",
                                "type": [
                                    "Regex"
                                ],
                                "description": "The filter to apply to determine whether or not the method should be returned",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Object"
                            ],
                            "description": "All methods indexed by name"
                        }
                    },
                    {
                        "sourceURL": "source-module.html",
                        "range": [
                            9467,
                            10597
                        ],
                        "URL": "Module.html#method-__createChannelMethods",
                        "name": "__createChannelMethods",
                        "access": "private",
                        "description": "Creates all methods to interact with this module over a channel",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "Object"
                            ],
                            "description": "All methods indexed by name"
                        }
                    },
                    {
                        "sourceURL": "source-module.html",
                        "range": [
                            10914,
                            11567
                        ],
                        "URL": "Module.html#method-__disconnectDescendant",
                        "name": "__disconnectDescendant",
                        "access": "private",
                        "description": "Disconnects a module from this module (But doesn't dispose it)",
                        "parameters": [
                            {
                                "name": "requestPath",
                                "type": [
                                    "RequestPath"
                                ],
                                "description": "The request path for the module to disconnect",
                                "optional": false
                            },
                            {
                                "name": "type",
                                "type": [
                                    "string"
                                ],
                                "description": "The type of request that the module was instiated for",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-module.html",
                        "range": [
                            5762,
                            5874
                        ],
                        "URL": "Module.html#method-__onRegister",
                        "name": "__onRegister",
                        "access": "private",
                        "description": "Adds a then and catch function to the registration completion promise",
                        "parameters": [
                            {
                                "name": "then",
                                "type": [
                                    "function"
                                ],
                                "description": "The function to run when registration has finished",
                                "optional": true
                            },
                            {
                                "name": "ctch",
                                "type": [
                                    "function"
                                ],
                                "description": "The function to run if something goes wrong during registration",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "Promise"
                            ],
                            "description": "A reference to this module instance"
                        }
                    },
                    {
                        "sourceURL": "source-module.html",
                        "range": [
                            2062,
                            4931
                        ],
                        "URL": "Module.html#method-__register",
                        "name": "__register",
                        "access": "private",
                        "description": "Registers the module if it wasn't registered already",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "Module"
                            ],
                            "description": "A reference to itself"
                        }
                    }
                ]
            },
            "fields": {
                "static": [],
                "instance": []
            },
            "types": []
        },
        "Registry": {
            "URL": "Registry.html",
            "sourceURL": "source-registry.html",
            "range": [
                1721,
                23557
            ],
            "name": "Registry",
            "description": "A class to track all the modules, and handle module requests",
            "static": true,
            "methods": {
                "static": {
                    "public": [
                        {
                            "sourceURL": "source-registry.html",
                            "range": [
                                2069,
                                2726
                            ],
                            "URL": "Registry.html#method-static-requestHandle",
                            "name": "requestHandle",
                            "access": "public",
                            "description": "Request modules to handle the passed data and establish a connection with these modules",
                            "parameters": [
                                {
                                    "name": "request",
                                    "type": [
                                        "Request"
                                    ],
                                    "description": "The information on how to handle the data",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Promise"
                                ],
                                "description": "The channel(s) that have been created to answer the request"
                            }
                        },
                        {
                            "sourceURL": "source-registry.html",
                            "range": [
                                3004,
                                4581
                            ],
                            "URL": "Registry.html#method-static-requestModule",
                            "name": "requestModule",
                            "access": "public",
                            "description": "Request module classes of a specific type",
                            "parameters": [
                                {
                                    "name": "request",
                                    "type": [
                                        "Request"
                                    ],
                                    "description": "The information on what module to get",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Class",
                                    "Array"
                                ],
                                "description": "The module(s) that it could find with the specified type"
                            }
                        },
                        {
                            "sourceURL": "source-registry.html",
                            "range": [
                                17223,
                                18452
                            ],
                            "URL": "Registry.html#method-static-getModuleInstanceChannels",
                            "name": "getModuleInstanceChannels",
                            "access": "public",
                            "description": "Gets channels to all instances of a specific module class",
                            "parameters": [
                                {
                                    "name": "module",
                                    "type": [
                                        "Class",
                                        "Module"
                                    ],
                                    "description": "The module to get the instance of",
                                    "optional": false
                                },
                                {
                                    "name": "subChannel",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The sub channel to target",
                                    "optional": true
                                },
                                {
                                    "name": "source",
                                    "type": [
                                        "Module",
                                        "string"
                                    ],
                                    "description": "The channelID to return messages to if needed",
                                    "optional": false
                                },
                                {
                                    "name": "windowID",
                                    "type": [
                                        "number"
                                    ],
                                    "description": "Only looks in this window for instances if provided",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Promise"
                                ],
                                "description": "The channels that were set up for the found modules"
                            }
                        }
                    ],
                    "protected": [
                        {
                            "sourceURL": "source-registry.html",
                            "range": [
                                4838,
                                6098
                            ],
                            "URL": "Registry.html#method-static-_loadModule",
                            "name": "_loadModule",
                            "access": "protected",
                            "description": "Loads a module at the specified path relative to the modules folder",
                            "parameters": [
                                {
                                    "name": "path",
                                    "type": [
                                        "string"
                                    ],
                                    "description": "The path to the module class",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Class"
                                ],
                                "description": "The module class"
                            }
                        },
                        {
                            "sourceURL": "source-registry.html",
                            "range": [
                                6256,
                                6327
                            ],
                            "URL": "Registry.html#method-static-_loadAllModules",
                            "name": "_loadAllModules",
                            "access": "protected",
                            "description": "Loads all the modules",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "Array"
                                ],
                                "description": "All the module classes that have been loaded"
                            }
                        },
                        {
                            "sourceURL": "source-registry.html",
                            "range": [
                                6607,
                                7216
                            ],
                            "URL": "Registry.html#method-static-_registerModuleInstance",
                            "name": "_registerModuleInstance",
                            "access": "protected",
                            "description": "Registeres the module so the registry knows of its existence",
                            "parameters": [
                                {
                                    "name": "moduleInstance",
                                    "type": [
                                        "Module"
                                    ],
                                    "description": "The module to register",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "number"
                                ],
                                "description": "The unique ID that the module instance has now been assigned"
                            }
                        },
                        {
                            "sourceURL": "source-registry.html",
                            "range": [
                                7445,
                                8141
                            ],
                            "URL": "Registry.html#method-static-_deregisterModuleInstance",
                            "name": "_deregisterModuleInstance",
                            "access": "protected",
                            "description": "Deregisters the module so the registry knows it is no longer used",
                            "parameters": [
                                {
                                    "name": "moduleInstance",
                                    "type": [
                                        "Module"
                                    ],
                                    "description": "The module to deregister",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        },
                        {
                            "sourceURL": "source-registry.html",
                            "range": [
                                8327,
                                8413
                            ],
                            "URL": "Registry.html#method-static-_getModuleInstanceCount",
                            "name": "_getModuleInstanceCount",
                            "access": "protected",
                            "description": "Returns the amount of modules that are currently registered",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "number"
                                ],
                                "description": "The amount of modules are currently registered"
                            }
                        }
                    ],
                    "private": [
                        {
                            "sourceURL": "source-registry.html",
                            "range": [
                                8791,
                                9111
                            ],
                            "URL": "Registry.html#method-static-__getListeners",
                            "name": "__getListeners",
                            "access": "private",
                            "description": "Creates an object to store what classes can answer a certain request type if it hasn't been created already, and returns it",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": [
                                        "String"
                                    ],
                                    "description": "The request type to return the object of",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Registry~Requestlistener"
                                ],
                                "description": "An object that tracks the listeners for a certain request type"
                            }
                        },
                        {
                            "sourceURL": "source-registry.html",
                            "range": [
                                9370,
                                9469
                            ],
                            "URL": "Registry.html#method-static-__getModulesPath",
                            "name": "__getModulesPath",
                            "access": "private",
                            "description": "Returns the relative path from this class to the modules directory",
                            "parameters": [
                                {
                                    "name": "path",
                                    "type": [
                                        "String"
                                    ],
                                    "description": "The path to append to the modules directory",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "String"
                                ],
                                "description": "The relative path to the directory"
                            }
                        },
                        {
                            "sourceURL": "source-registry.html",
                            "range": [
                                9779,
                                11100
                            ],
                            "URL": "Registry.html#method-static-__getModules",
                            "name": "__getModules",
                            "access": "private",
                            "description": "Retrieves the modules that can handle the passed request",
                            "parameters": [
                                {
                                    "name": "request",
                                    "type": [
                                        "Registry~Request"
                                    ],
                                    "description": "The request to find module classes for",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Class",
                                    "Array"
                                ],
                                "description": "The module classes that have been chosen to handle the request"
                            }
                        },
                        {
                            "sourceURL": "source-registry.html",
                            "range": [
                                11755,
                                14592
                            ],
                            "URL": "Registry.html#method-static-__finishRequest",
                            "name": "__finishRequest",
                            "access": "private",
                            "description": "Finishes the request by serving the correct data based on the module classes that were found",
                            "parameters": [
                                {
                                    "name": "type",
                                    "type": [
                                        "'module'",
                                        "'handle'"
                                    ],
                                    "description": "The type of request that was made (either to handle data, or to get modules)",
                                    "optional": false
                                },
                                {
                                    "name": "requests",
                                    "type": [
                                        "Array"
                                    ],
                                    "description": "The requests that are being finished (only contains 1 if type=='handle')",
                                    "optional": false
                                },
                                {
                                    "name": "requestsModules",
                                    "type": [
                                        "Array"
                                    ],
                                    "description": "The modules that are found to match each request",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Promise",
                                    "Promise",
                                    "Promise"
                                ],
                                "description": "The data that the request results in"
                            }
                        },
                        {
                            "sourceURL": "source-registry.html",
                            "range": [
                                15147,
                                16632
                            ],
                            "URL": "Registry.html#method-static-__request",
                            "name": "__request",
                            "access": "private",
                            "description": "Handles one or more requests and serves the responses",
                            "parameters": [
                                {
                                    "name": "requests",
                                    "type": [
                                        "Array"
                                    ],
                                    "description": "The requests to make",
                                    "optional": false
                                },
                                {
                                    "name": "type",
                                    "type": [
                                        "'module'",
                                        "'handle'"
                                    ],
                                    "description": "The type of request that was made (either to handle data, or to get modules)",
                                    "optional": false
                                },
                                {
                                    "name": "synced",
                                    "type": [
                                        "boolean"
                                    ],
                                    "description": "Whether or not to request data synchronously (can only be synced if type=='module')",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Promise",
                                    "Promise",
                                    "Promise"
                                ],
                                "description": "The data that the request results in"
                            }
                        },
                        {
                            "sourceURL": "source-registry.html",
                            "range": [
                                18633,
                                23554
                            ],
                            "URL": "Registry.html#method-static-__setup",
                            "name": "__setup",
                            "access": "private",
                            "description": "The initial setup method to be called by this file itself, initialises the static fields of the class",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        }
                    ]
                },
                "instance": {
                    "public": [],
                    "protected": [],
                    "private": []
                },
                "all": [
                    {
                        "sourceURL": "source-registry.html",
                        "range": [
                            2069,
                            2726
                        ],
                        "URL": "Registry.html#method-static-requestHandle",
                        "name": "requestHandle",
                        "access": "public",
                        "description": "Request modules to handle the passed data and establish a connection with these modules",
                        "parameters": [
                            {
                                "name": "request",
                                "type": [
                                    "Request"
                                ],
                                "description": "The information on how to handle the data",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Promise"
                            ],
                            "description": "The channel(s) that have been created to answer the request"
                        }
                    },
                    {
                        "sourceURL": "source-registry.html",
                        "range": [
                            3004,
                            4581
                        ],
                        "URL": "Registry.html#method-static-requestModule",
                        "name": "requestModule",
                        "access": "public",
                        "description": "Request module classes of a specific type",
                        "parameters": [
                            {
                                "name": "request",
                                "type": [
                                    "Request"
                                ],
                                "description": "The information on what module to get",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Class",
                                "Array"
                            ],
                            "description": "The module(s) that it could find with the specified type"
                        }
                    },
                    {
                        "sourceURL": "source-registry.html",
                        "range": [
                            17223,
                            18452
                        ],
                        "URL": "Registry.html#method-static-getModuleInstanceChannels",
                        "name": "getModuleInstanceChannels",
                        "access": "public",
                        "description": "Gets channels to all instances of a specific module class",
                        "parameters": [
                            {
                                "name": "module",
                                "type": [
                                    "Class",
                                    "Module"
                                ],
                                "description": "The module to get the instance of",
                                "optional": false
                            },
                            {
                                "name": "subChannel",
                                "type": [
                                    "string"
                                ],
                                "description": "The sub channel to target",
                                "optional": true
                            },
                            {
                                "name": "source",
                                "type": [
                                    "Module",
                                    "string"
                                ],
                                "description": "The channelID to return messages to if needed",
                                "optional": false
                            },
                            {
                                "name": "windowID",
                                "type": [
                                    "number"
                                ],
                                "description": "Only looks in this window for instances if provided",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "Promise"
                            ],
                            "description": "The channels that were set up for the found modules"
                        }
                    },
                    {
                        "sourceURL": "source-registry.html",
                        "range": [
                            4838,
                            6098
                        ],
                        "URL": "Registry.html#method-static-_loadModule",
                        "name": "_loadModule",
                        "access": "protected",
                        "description": "Loads a module at the specified path relative to the modules folder",
                        "parameters": [
                            {
                                "name": "path",
                                "type": [
                                    "string"
                                ],
                                "description": "The path to the module class",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Class"
                            ],
                            "description": "The module class"
                        }
                    },
                    {
                        "sourceURL": "source-registry.html",
                        "range": [
                            6256,
                            6327
                        ],
                        "URL": "Registry.html#method-static-_loadAllModules",
                        "name": "_loadAllModules",
                        "access": "protected",
                        "description": "Loads all the modules",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "Array"
                            ],
                            "description": "All the module classes that have been loaded"
                        }
                    },
                    {
                        "sourceURL": "source-registry.html",
                        "range": [
                            6607,
                            7216
                        ],
                        "URL": "Registry.html#method-static-_registerModuleInstance",
                        "name": "_registerModuleInstance",
                        "access": "protected",
                        "description": "Registeres the module so the registry knows of its existence",
                        "parameters": [
                            {
                                "name": "moduleInstance",
                                "type": [
                                    "Module"
                                ],
                                "description": "The module to register",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "number"
                            ],
                            "description": "The unique ID that the module instance has now been assigned"
                        }
                    },
                    {
                        "sourceURL": "source-registry.html",
                        "range": [
                            7445,
                            8141
                        ],
                        "URL": "Registry.html#method-static-_deregisterModuleInstance",
                        "name": "_deregisterModuleInstance",
                        "access": "protected",
                        "description": "Deregisters the module so the registry knows it is no longer used",
                        "parameters": [
                            {
                                "name": "moduleInstance",
                                "type": [
                                    "Module"
                                ],
                                "description": "The module to deregister",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-registry.html",
                        "range": [
                            8327,
                            8413
                        ],
                        "URL": "Registry.html#method-static-_getModuleInstanceCount",
                        "name": "_getModuleInstanceCount",
                        "access": "protected",
                        "description": "Returns the amount of modules that are currently registered",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "number"
                            ],
                            "description": "The amount of modules are currently registered"
                        }
                    },
                    {
                        "sourceURL": "source-registry.html",
                        "range": [
                            9370,
                            9469
                        ],
                        "URL": "Registry.html#method-static-__getModulesPath",
                        "name": "__getModulesPath",
                        "access": "private",
                        "description": "Returns the relative path from this class to the modules directory",
                        "parameters": [
                            {
                                "name": "path",
                                "type": [
                                    "String"
                                ],
                                "description": "The path to append to the modules directory",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "String"
                            ],
                            "description": "The relative path to the directory"
                        }
                    },
                    {
                        "sourceURL": "source-registry.html",
                        "range": [
                            9779,
                            11100
                        ],
                        "URL": "Registry.html#method-static-__getModules",
                        "name": "__getModules",
                        "access": "private",
                        "description": "Retrieves the modules that can handle the passed request",
                        "parameters": [
                            {
                                "name": "request",
                                "type": [
                                    "Registry~Request"
                                ],
                                "description": "The request to find module classes for",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Class",
                                "Array"
                            ],
                            "description": "The module classes that have been chosen to handle the request"
                        }
                    },
                    {
                        "sourceURL": "source-registry.html",
                        "range": [
                            11755,
                            14592
                        ],
                        "URL": "Registry.html#method-static-__finishRequest",
                        "name": "__finishRequest",
                        "access": "private",
                        "description": "Finishes the request by serving the correct data based on the module classes that were found",
                        "parameters": [
                            {
                                "name": "type",
                                "type": [
                                    "'module'",
                                    "'handle'"
                                ],
                                "description": "The type of request that was made (either to handle data, or to get modules)",
                                "optional": false
                            },
                            {
                                "name": "requests",
                                "type": [
                                    "Array"
                                ],
                                "description": "The requests that are being finished (only contains 1 if type=='handle')",
                                "optional": false
                            },
                            {
                                "name": "requestsModules",
                                "type": [
                                    "Array"
                                ],
                                "description": "The modules that are found to match each request",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Promise",
                                "Promise",
                                "Promise"
                            ],
                            "description": "The data that the request results in"
                        }
                    },
                    {
                        "sourceURL": "source-registry.html",
                        "range": [
                            15147,
                            16632
                        ],
                        "URL": "Registry.html#method-static-__request",
                        "name": "__request",
                        "access": "private",
                        "description": "Handles one or more requests and serves the responses",
                        "parameters": [
                            {
                                "name": "requests",
                                "type": [
                                    "Array"
                                ],
                                "description": "The requests to make",
                                "optional": false
                            },
                            {
                                "name": "type",
                                "type": [
                                    "'module'",
                                    "'handle'"
                                ],
                                "description": "The type of request that was made (either to handle data, or to get modules)",
                                "optional": false
                            },
                            {
                                "name": "synced",
                                "type": [
                                    "boolean"
                                ],
                                "description": "Whether or not to request data synchronously (can only be synced if type=='module')",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Promise",
                                "Promise",
                                "Promise"
                            ],
                            "description": "The data that the request results in"
                        }
                    },
                    {
                        "sourceURL": "source-registry.html",
                        "range": [
                            18633,
                            23554
                        ],
                        "URL": "Registry.html#method-static-__setup",
                        "name": "__setup",
                        "access": "private",
                        "description": "The initial setup method to be called by this file itself, initialises the static fields of the class",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    },
                    {
                        "sourceURL": "source-registry.html",
                        "range": [
                            8791,
                            9111
                        ],
                        "URL": "Registry.html#method-static-__getListeners",
                        "name": "__getListeners",
                        "access": "private",
                        "description": "Creates an object to store what classes can answer a certain request type if it hasn't been created already, and returns it",
                        "parameters": [
                            {
                                "name": "type",
                                "type": [
                                    "String"
                                ],
                                "description": "The request type to return the object of",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Registry~Requestlistener"
                            ],
                            "description": "An object that tracks the listeners for a certain request type"
                        }
                    }
                ]
            },
            "fields": {
                "static": [],
                "instance": []
            },
            "types": [
                {
                    "name": "Request",
                    "description": "A request that can be made to retrieve a module",
                    "type": {
                        "names": [
                            "Object"
                        ]
                    },
                    "properties": [
                        {
                            "name": "type",
                            "description": "The type of handeling you are requesting",
                            "type": [
                                "string"
                            ]
                        },
                        {
                            "name": "use",
                            "description": "What modules to use to answer the request",
                            "type": [
                                "'all'",
                                "'one'",
                                "function"
                            ]
                        },
                        {
                            "name": "data",
                            "description": "Any extra data you want to pass that modules can use to determine if they can answer the request",
                            "type": [
                                "Object"
                            ]
                        },
                        {
                            "name": "source",
                            "description": "The module that sent out the request (can be left out when usimg Module.requestHandle)",
                            "type": [
                                "Module"
                            ]
                        },
                        {
                            "name": "methods",
                            "description": "Extra methods that can get called by the handle (is only used by Module.requestHandle)",
                            "type": [
                                "Object"
                            ]
                        }
                    ],
                    "URL": "Registry.htmlundefined"
                },
                {
                    "name": "Requestlistener",
                    "description": "The data that is stored to track what modules can answer what requests",
                    "type": {
                        "names": [
                            "Object"
                        ]
                    },
                    "properties": [
                        {
                            "name": "type",
                            "description": "The type of request to handle",
                            "type": [
                                "string"
                            ]
                        },
                        {
                            "name": "listeners",
                            "description": "The modules that can answer this request",
                            "type": [
                                "Array"
                            ]
                        },
                        {
                            "name": "listeners[].module",
                            "description": "The module class that can answer the request",
                            "type": [
                                "Class"
                            ]
                        },
                        {
                            "name": "listeners[].filter",
                            "description": "The filter to make sure the class can handle this request",
                            "type": [
                                "function"
                            ]
                        }
                    ],
                    "URL": "Registry.htmlundefined"
                }
            ]
        },
        "RequestPath": {
            "URL": "RequestPath.html",
            "sourceURL": "source-requestPath.html",
            "range": [
                494,
                1128
            ],
            "name": "RequestPath",
            "static": false,
            "params": [
                {
                    "name": "path",
                    "type": [
                        "string"
                    ],
                    "description": "The string representation of the request path",
                    "optional": false
                }
            ],
            "methods": {
                "static": {
                    "public": [],
                    "protected": [],
                    "private": []
                },
                "instance": {
                    "public": [
                        {
                            "sourceURL": "source-requestPath.html",
                            "range": [
                                1393,
                                1632
                            ],
                            "URL": "RequestPath.html#method-toString",
                            "name": "toString",
                            "access": "public",
                            "description": "Gets the string representation of this path",
                            "parameters": [
                                {
                                    "name": "unique",
                                    "type": [
                                        "boolean"
                                    ],
                                    "description": "Whether or not to include the unique ID of each module instance",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "string"
                                ],
                                "description": "The string representation of this request path"
                            }
                        },
                        {
                            "sourceURL": "source-requestPath.html",
                            "range": [
                                1884,
                                2270
                            ],
                            "URL": "RequestPath.html#method-getSubPath",
                            "name": "getSubPath",
                            "access": "public",
                            "description": "Creates a new instance of RequestPath with the last n modules removed",
                            "parameters": [
                                {
                                    "name": "removeCount",
                                    "type": [
                                        "number"
                                    ],
                                    "description": "The number of modules to remove",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "RequestPath"
                                ],
                                "description": "The newly created request path"
                            }
                        },
                        {
                            "sourceURL": "source-requestPath.html",
                            "range": [
                                2590,
                                3184
                            ],
                            "URL": "RequestPath.html#method-augmentPath",
                            "name": "augmentPath",
                            "access": "public",
                            "description": "Creates a new instance of RequestPath with a new module added",
                            "parameters": [
                                {
                                    "name": "module",
                                    "type": [
                                        "Module",
                                        "string"
                                    ],
                                    "description": "The module to append to the path",
                                    "optional": false
                                },
                                {
                                    "name": "ID",
                                    "type": [
                                        "number"
                                    ],
                                    "description": "The unique ID of the module that is added",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "RequestPath"
                                ],
                                "description": "The newly created request path"
                            }
                        },
                        {
                            "sourceURL": "source-requestPath.html",
                            "range": [
                                3431,
                                3650
                            ],
                            "URL": "RequestPath.html#method-getModuleID",
                            "name": "getModuleID",
                            "access": "public",
                            "description": "Returns the moduleID at a specific index",
                            "parameters": [
                                {
                                    "name": "index",
                                    "type": [
                                        "number"
                                    ],
                                    "description": "The indedx at which to get the module (returns the last if left out)",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "RequestPath~ModuleID"
                                ],
                                "description": "The moduleID"
                            }
                        }
                    ],
                    "protected": [],
                    "private": []
                },
                "all": [
                    {
                        "sourceURL": "source-requestPath.html",
                        "range": [
                            1393,
                            1632
                        ],
                        "URL": "RequestPath.html#method-toString",
                        "name": "toString",
                        "access": "public",
                        "description": "Gets the string representation of this path",
                        "parameters": [
                            {
                                "name": "unique",
                                "type": [
                                    "boolean"
                                ],
                                "description": "Whether or not to include the unique ID of each module instance",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "string"
                            ],
                            "description": "The string representation of this request path"
                        }
                    },
                    {
                        "sourceURL": "source-requestPath.html",
                        "range": [
                            1884,
                            2270
                        ],
                        "URL": "RequestPath.html#method-getSubPath",
                        "name": "getSubPath",
                        "access": "public",
                        "description": "Creates a new instance of RequestPath with the last n modules removed",
                        "parameters": [
                            {
                                "name": "removeCount",
                                "type": [
                                    "number"
                                ],
                                "description": "The number of modules to remove",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "RequestPath"
                            ],
                            "description": "The newly created request path"
                        }
                    },
                    {
                        "sourceURL": "source-requestPath.html",
                        "range": [
                            2590,
                            3184
                        ],
                        "URL": "RequestPath.html#method-augmentPath",
                        "name": "augmentPath",
                        "access": "public",
                        "description": "Creates a new instance of RequestPath with a new module added",
                        "parameters": [
                            {
                                "name": "module",
                                "type": [
                                    "Module",
                                    "string"
                                ],
                                "description": "The module to append to the path",
                                "optional": false
                            },
                            {
                                "name": "ID",
                                "type": [
                                    "number"
                                ],
                                "description": "The unique ID of the module that is added",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "RequestPath"
                            ],
                            "description": "The newly created request path"
                        }
                    },
                    {
                        "sourceURL": "source-requestPath.html",
                        "range": [
                            3431,
                            3650
                        ],
                        "URL": "RequestPath.html#method-getModuleID",
                        "name": "getModuleID",
                        "access": "public",
                        "description": "Returns the moduleID at a specific index",
                        "parameters": [
                            {
                                "name": "index",
                                "type": [
                                    "number"
                                ],
                                "description": "The indedx at which to get the module (returns the last if left out)",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "RequestPath~ModuleID"
                            ],
                            "description": "The moduleID"
                        }
                    }
                ]
            },
            "fields": {
                "static": [],
                "instance": []
            },
            "types": [
                {
                    "name": "ModuleID",
                    "type": {
                        "names": [
                            "Object"
                        ]
                    },
                    "properties": [
                        {
                            "name": "module",
                            "description": "The path to the module class",
                            "type": [
                                "string"
                            ]
                        },
                        {
                            "name": "ID",
                            "description": "The unique ID of the module instance",
                            "type": [
                                "number"
                            ]
                        }
                    ],
                    "URL": "RequestPath.htmlundefined"
                }
            ]
        },
        "State": {
            "URL": "State.html",
            "sourceURL": "source-booleanProcess.html",
            "range": [
                223,
                284
            ],
            "name": "State",
            "static": false,
            "params": [
                {
                    "name": "state",
                    "type": [
                        "'0'",
                        "'1'",
                        "'2'",
                        "'3'"
                    ],
                    "description": "The initial state",
                    "optional": true
                }
            ],
            "methods": {
                "static": {
                    "public": [],
                    "protected": [],
                    "private": []
                },
                "instance": {
                    "public": [
                        {
                            "sourceURL": "source-booleanProcess.html",
                            "range": [
                                506,
                                601
                            ],
                            "URL": "State.html#method-true",
                            "name": "true",
                            "access": "public",
                            "description": "Check whether the state is true, or turn it to true",
                            "parameters": [
                                {
                                    "name": "setState",
                                    "type": [
                                        "boolean"
                                    ],
                                    "description": "Whether to turn the state to true",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "boolean"
                                ],
                                "description": "If the state is true"
                            }
                        },
                        {
                            "sourceURL": "source-booleanProcess.html",
                            "range": [
                                827,
                                923
                            ],
                            "URL": "State.html#method-false",
                            "name": "false",
                            "access": "public",
                            "description": "Check whether the state is false, or turn it to false",
                            "parameters": [
                                {
                                    "name": "setState",
                                    "type": [
                                        "boolean"
                                    ],
                                    "description": "Whether to turn the state to false",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "boolean"
                                ],
                                "description": "If the state is false"
                            }
                        },
                        {
                            "sourceURL": "source-booleanProcess.html",
                            "range": [
                                1177,
                                1279
                            ],
                            "URL": "State.html#method-turningTrue",
                            "name": "turningTrue",
                            "access": "public",
                            "description": "Check whether the state is turning true, or turn it to turning true",
                            "parameters": [
                                {
                                    "name": "setState",
                                    "type": [
                                        "boolean"
                                    ],
                                    "description": "Whether to turn the state to turning true",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "boolean"
                                ],
                                "description": "If the state is turning true"
                            }
                        },
                        {
                            "sourceURL": "source-booleanProcess.html",
                            "range": [
                                1537,
                                1640
                            ],
                            "URL": "State.html#method-turningFalse",
                            "name": "turningFalse",
                            "access": "public",
                            "description": "Check whether the state is turning false, or turn it to turning false",
                            "parameters": [
                                {
                                    "name": "setState",
                                    "type": [
                                        "boolean"
                                    ],
                                    "description": "Whether to turn the state to turning false",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "boolean"
                                ],
                                "description": "If the state is turning false"
                            }
                        },
                        {
                            "sourceURL": "source-booleanProcess.html",
                            "range": [
                                1801,
                                1881
                            ],
                            "URL": "State.html#method-trueOrTurningTrue",
                            "name": "trueOrTurningTrue",
                            "access": "public",
                            "description": "Check whether the state is true ot turning true",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "boolean"
                                ],
                                "description": "If the state is true orturning true"
                            }
                        },
                        {
                            "sourceURL": "source-booleanProcess.html",
                            "range": [
                                2046,
                                2128
                            ],
                            "URL": "State.html#method-falseOrTurningFalse",
                            "name": "falseOrTurningFalse",
                            "access": "public",
                            "description": "Check whether the state is false ot turning false",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "boolean"
                                ],
                                "description": "If the state is false orturning false"
                            }
                        }
                    ],
                    "protected": [],
                    "private": []
                },
                "all": [
                    {
                        "sourceURL": "source-booleanProcess.html",
                        "range": [
                            506,
                            601
                        ],
                        "URL": "State.html#method-true",
                        "name": "true",
                        "access": "public",
                        "description": "Check whether the state is true, or turn it to true",
                        "parameters": [
                            {
                                "name": "setState",
                                "type": [
                                    "boolean"
                                ],
                                "description": "Whether to turn the state to true",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "boolean"
                            ],
                            "description": "If the state is true"
                        }
                    },
                    {
                        "sourceURL": "source-booleanProcess.html",
                        "range": [
                            827,
                            923
                        ],
                        "URL": "State.html#method-false",
                        "name": "false",
                        "access": "public",
                        "description": "Check whether the state is false, or turn it to false",
                        "parameters": [
                            {
                                "name": "setState",
                                "type": [
                                    "boolean"
                                ],
                                "description": "Whether to turn the state to false",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "boolean"
                            ],
                            "description": "If the state is false"
                        }
                    },
                    {
                        "sourceURL": "source-booleanProcess.html",
                        "range": [
                            1177,
                            1279
                        ],
                        "URL": "State.html#method-turningTrue",
                        "name": "turningTrue",
                        "access": "public",
                        "description": "Check whether the state is turning true, or turn it to turning true",
                        "parameters": [
                            {
                                "name": "setState",
                                "type": [
                                    "boolean"
                                ],
                                "description": "Whether to turn the state to turning true",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "boolean"
                            ],
                            "description": "If the state is turning true"
                        }
                    },
                    {
                        "sourceURL": "source-booleanProcess.html",
                        "range": [
                            1537,
                            1640
                        ],
                        "URL": "State.html#method-turningFalse",
                        "name": "turningFalse",
                        "access": "public",
                        "description": "Check whether the state is turning false, or turn it to turning false",
                        "parameters": [
                            {
                                "name": "setState",
                                "type": [
                                    "boolean"
                                ],
                                "description": "Whether to turn the state to turning false",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "boolean"
                            ],
                            "description": "If the state is turning false"
                        }
                    },
                    {
                        "sourceURL": "source-booleanProcess.html",
                        "range": [
                            1801,
                            1881
                        ],
                        "URL": "State.html#method-trueOrTurningTrue",
                        "name": "trueOrTurningTrue",
                        "access": "public",
                        "description": "Check whether the state is true ot turning true",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "boolean"
                            ],
                            "description": "If the state is true orturning true"
                        }
                    },
                    {
                        "sourceURL": "source-booleanProcess.html",
                        "range": [
                            2046,
                            2128
                        ],
                        "URL": "State.html#method-falseOrTurningFalse",
                        "name": "falseOrTurningFalse",
                        "access": "public",
                        "description": "Check whether the state is false ot turning false",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "boolean"
                            ],
                            "description": "If the state is false orturning false"
                        }
                    }
                ]
            },
            "fields": {
                "static": [],
                "instance": []
            },
            "types": []
        },
        "WindowHandler": {
            "URL": "WindowHandler.html",
            "sourceURL": "source-windowHandler.html",
            "range": [
                1035,
                13233
            ],
            "name": "WindowHandler",
            "description": "A static class that allows for the creation and destruction of windows",
            "static": true,
            "methods": {
                "static": {
                    "public": [
                        {
                            "sourceURL": "source-windowHandler.html",
                            "range": [
                                8725,
                                9949
                            ],
                            "URL": "WindowHandler.html#method-static-openModuleInstance",
                            "name": "openModuleInstance",
                            "access": "public",
                            "description": "Opens a module in the proper window, will automatically open the window if it isn't already",
                            "parameters": [
                                {
                                    "name": "moduleData",
                                    "type": [
                                        "object"
                                    ],
                                    "description": "The settings data for the module to open",
                                    "optional": false
                                },
                                {
                                    "name": "request",
                                    "type": [
                                        "Registry~Request"
                                    ],
                                    "description": "The request that caused this module to be opened",
                                    "optional": false
                                },
                                {
                                    "name": "modulePath",
                                    "type": [
                                        "strubg"
                                    ],
                                    "description": "The path to the class of the module to be instantiated",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Promise"
                                ],
                                "description": "A channel to the module that has been created"
                            }
                        }
                    ],
                    "protected": [
                        {
                            "sourceURL": "source-windowHandler.html",
                            "range": [
                                6656,
                                8217
                            ],
                            "URL": "WindowHandler.html#method-static-_close",
                            "name": "_close",
                            "access": "protected",
                            "description": "Close a window (Doesn't properly dispose the modules loaded inside it)",
                            "parameters": [
                                {
                                    "name": "windowID",
                                    "type": [
                                        "number"
                                    ],
                                    "description": "The ID of the window to close",
                                    "optional": true
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Promise"
                                ],
                                "description": "Resolves once the window has fulyl closed"
                            }
                        }
                    ],
                    "private": [
                        {
                            "sourceURL": "source-windowHandler.html",
                            "range": [
                                1322,
                                6381
                            ],
                            "URL": "WindowHandler.html#method-static-__open",
                            "name": "__open",
                            "access": "private",
                            "description": "Opens a window according to the saved settings of that window",
                            "parameters": [
                                {
                                    "name": "windowID",
                                    "type": [
                                        "number"
                                    ],
                                    "description": "The ID of the window to open",
                                    "optional": false
                                }
                            ],
                            "returns": {
                                "type": [
                                    "Promise"
                                ],
                                "description": "Resolves once the window fully opened and loaded"
                            }
                        },
                        {
                            "sourceURL": "source-windowHandler.html",
                            "range": [
                                10130,
                                13230
                            ],
                            "URL": "WindowHandler.html#method-static-__setup",
                            "name": "__setup",
                            "access": "private",
                            "description": "The initial setup method to be called by this file itself, initialises the static fields of the class",
                            "parameters": [],
                            "returns": {
                                "type": [
                                    "undefined"
                                ]
                            }
                        }
                    ]
                },
                "instance": {
                    "public": [],
                    "protected": [],
                    "private": []
                },
                "all": [
                    {
                        "sourceURL": "source-windowHandler.html",
                        "range": [
                            8725,
                            9949
                        ],
                        "URL": "WindowHandler.html#method-static-openModuleInstance",
                        "name": "openModuleInstance",
                        "access": "public",
                        "description": "Opens a module in the proper window, will automatically open the window if it isn't already",
                        "parameters": [
                            {
                                "name": "moduleData",
                                "type": [
                                    "object"
                                ],
                                "description": "The settings data for the module to open",
                                "optional": false
                            },
                            {
                                "name": "request",
                                "type": [
                                    "Registry~Request"
                                ],
                                "description": "The request that caused this module to be opened",
                                "optional": false
                            },
                            {
                                "name": "modulePath",
                                "type": [
                                    "strubg"
                                ],
                                "description": "The path to the class of the module to be instantiated",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Promise"
                            ],
                            "description": "A channel to the module that has been created"
                        }
                    },
                    {
                        "sourceURL": "source-windowHandler.html",
                        "range": [
                            6656,
                            8217
                        ],
                        "URL": "WindowHandler.html#method-static-_close",
                        "name": "_close",
                        "access": "protected",
                        "description": "Close a window (Doesn't properly dispose the modules loaded inside it)",
                        "parameters": [
                            {
                                "name": "windowID",
                                "type": [
                                    "number"
                                ],
                                "description": "The ID of the window to close",
                                "optional": true
                            }
                        ],
                        "returns": {
                            "type": [
                                "Promise"
                            ],
                            "description": "Resolves once the window has fulyl closed"
                        }
                    },
                    {
                        "sourceURL": "source-windowHandler.html",
                        "range": [
                            1322,
                            6381
                        ],
                        "URL": "WindowHandler.html#method-static-__open",
                        "name": "__open",
                        "access": "private",
                        "description": "Opens a window according to the saved settings of that window",
                        "parameters": [
                            {
                                "name": "windowID",
                                "type": [
                                    "number"
                                ],
                                "description": "The ID of the window to open",
                                "optional": false
                            }
                        ],
                        "returns": {
                            "type": [
                                "Promise"
                            ],
                            "description": "Resolves once the window fully opened and loaded"
                        }
                    },
                    {
                        "sourceURL": "source-windowHandler.html",
                        "range": [
                            10130,
                            13230
                        ],
                        "URL": "WindowHandler.html#method-static-__setup",
                        "name": "__setup",
                        "access": "private",
                        "description": "The initial setup method to be called by this file itself, initialises the static fields of the class",
                        "parameters": [],
                        "returns": {
                            "type": [
                                "undefined"
                            ]
                        }
                    }
                ]
            },
            "fields": {
                "static": [],
                "instance": []
            },
            "types": []
        }
    },
    "global": {
        "URL": "global.html",
        "name": "global",
        "types": [],
        "methods": {
            "all": []
        }
    },
    "files": {
        "source-channelHandler.html": {
            "sourceURL": "C:\\Users\\tarde\\Documents\\Projects\\Github\\LaunchMenu\\src\\core\\communication\\channel\\channelHandler.js",
            "URL": "source-channelHandler.html",
            "sourceCode": "import ChannelReceiver from \"./ChannelReceiver\";\r\nimport ChannelSender from \"./ChannelSender\";\r\n\r\n/**\r\n * @classdesc The public class to create channel senders and recievers, as the creation of a channel sender is asynchronous\r\n * @class\r\n * @hideconstructor\r\n */\r\nexport default class ChannelHandler {\r\n    /**\r\n     * Create a new channel sender, allowing to send messages to the channel\r\n     * @param {string} ID - The unique identifier for the channel\r\n     * @param {string} subChannelID - The subChannelID that will be used to access special subchannel methods\r\n     * @param {string} senderID - An ID that the reciever of this channel can respond to (can be left out)\r\n     * @returns {Promise<ChannelSender>} An instance of the ChannelSender class\r\n     * @public\r\n     * @async\r\n     */\r\n    static createSender(ID, subChannelID, senderID) {\r\n        return new ChannelSender(ID, subChannelID, senderID)._setupMethods();\r\n    }\r\n    /**\r\n     * Create a new channel reciever, allowing to recieve messages from the channel\r\n     * @param {string} ID - The unique identifier for the channel\r\n     * @param {Object} listeners - An object of functions to act on messages indexed by message type\r\n     * @returns {Promise<ChannelReceiver>} An instance of the ChannelReceiver class\r\n     * @public\r\n     * @async\r\n     */\r\n    static createReceiver(ID, listeners) {\r\n        return Promise.resolve(new ChannelReceiver(ID, listeners));\r\n    }\r\n}\r\n"
        },
        "source-channelReceiver.html": {
            "sourceURL": "C:\\Users\\tarde\\Documents\\Projects\\Github\\LaunchMenu\\src\\core\\communication\\channel\\channelReceiver.js",
            "URL": "source-channelReceiver.html",
            "sourceCode": "import IPC from \"../IPC\";\r\n\r\n/**\r\n * @typedef {object} ChannelReceiver~ChannelEvent\r\n * @property {number} senderID - The ID of the channel that sent the message\r\n * @property {*} data - The data that was sent with the event\r\n */\r\n\r\nexport default class ChannelReceiver {\r\n    /**\r\n     * Create a new channel reciever, allowing to recieve messages from the channel\r\n     * @param {string} ID - The unique identifier for the channel\r\n     * @param {Object} listeners - An object of functions to act on messages indexed by message type\r\n     * @constructs ChannelReceiver\r\n     * @hideconstructor\r\n     */\r\n    constructor(ID, listeners) {\r\n        this.ID = ID;\r\n\r\n        // Create objects to store listeners\r\n        this.globalListeners = listeners;\r\n        this.subChannelListeners = {};\r\n\r\n        this.IPClisteners = {\r\n            // Forward IPC messages to channel listeners\r\n            message: event => {\r\n                let data = event.data;\r\n\r\n                // Extract the data to build the event to emit in this channel\r\n                const sender = data.senderID;\r\n                const subChannelID = data.subChannelID;\r\n                const message = data.message;\r\n                data = data.data;\r\n\r\n                // Emit the event\r\n                return this.__emitEvent(\r\n                    message,\r\n                    {\r\n                        senderID: sender,\r\n                        data: data,\r\n                    },\r\n                    subChannelID\r\n                );\r\n            },\r\n            // Send available message types on request\r\n            requestMessageTypes: event => {\r\n                this.__broadCastMessageTypes(event.sourceID);\r\n            },\r\n        };\r\n\r\n        // Set up the message listeners\r\n        IPC.on(\"channel.message:\" + ID, this.IPClisteners.message);\r\n        IPC.on(\r\n            \"channel.requestMessageTypes:\" + ID,\r\n            this.IPClisteners.requestMessageTypes\r\n        );\r\n\r\n        // Send available message types to all processes/renderers\r\n        this.__broadCastMessageTypes(\"*\");\r\n    }\r\n    /**\r\n     * Create a subchannel that can overwrite certain listeners on the channel, or add listeners just for the sub channel\r\n     * @param  {string} ID - The ID of the subchannel\r\n     * @param  {Object} listeners - An object of functions to act on messages indexed by message type\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    createSubChannel(ID, listeners) {\r\n        this.subChannelListeners[ID] = listeners;\r\n        this.__broadCastMessageTypes(\"*\");\r\n    }\r\n    /**\r\n     * Delete a subchannel\r\n     * @param  {string} ID - The subChannel to remove\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    deleteSubChannel(ID) {\r\n        delete this.subChannel[ID];\r\n    }\r\n    /**\r\n     * Get the channel ID\r\n     * @return {string} The channel ID\r\n     * @public\r\n     */\r\n    getID() {\r\n        return this.ID;\r\n    }\r\n\r\n    /**\r\n     * Dispose of all data\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    close() {\r\n        // Clear the IPC listeners\r\n        IPC.off(\"channel.message:\" + this.ID, this.IPClisteners.message);\r\n        IPC.off(\r\n            \"channel.requestMessageTypes:\" + this.ID,\r\n            this.IPClisteners.requestMessageTypes\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Emit an event to the registered listener\r\n     * @param  {string} message - The event type to invoke\r\n     * @param  {ChannelReceiver~ChannelEvent} event - The event data to pass to the listener\r\n     * @param  {(string|undefined)} subChannelID - The subchannel of which to take the listener if available\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    __emitEvent(message, event, subChannelID) {\r\n        if (subChannelID) {\r\n            // Attempt to find message listeners on this subchannel\r\n            const subChannel = this.subChannelListeners[subChannelID];\r\n            const listener = subChannel && subChannel[message];\r\n\r\n            // If listeners exist, call them and don't invoke any global listeners\r\n            if (listener) return listener.call(this, event);\r\n        }\r\n\r\n        // Retrieve listeners\r\n        const listener = this.globalListeners[message];\r\n\r\n        // If listeners exist, call them\r\n        if (listener) return listener.call(this, event);\r\n    }\r\n    /**\r\n     * Broadcast all available message types to the specified processes/windows\r\n     * @param  {(string|string[])} [processes=\"*\"] The processes/windows to send the message types to\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    __broadCastMessageTypes(processes = \"*\") {\r\n        // Create object to broadcast to the requesting renderer/process\r\n        const messageTypes = {\r\n            globalListeners: Object.keys(this.globalListeners),\r\n            subChannelListeners: {\r\n                // Will be filled by the for loop below\r\n            },\r\n        };\r\n\r\n        // Add all the subChannel\r\n        for (let key in this.subChannelListeners)\r\n            messageTypes.subChannelListeners[key] = Object.keys(\r\n                this.subChannelListeners[key]\r\n            );\r\n\r\n        // Broadcast the messages\r\n        IPC.send(\r\n            \"channel.sendMessageTypes:\" + this.ID,\r\n            messageTypes,\r\n            processes\r\n        );\r\n    }\r\n}\r\n"
        },
        "source-channelSender.html": {
            "sourceURL": "C:\\Users\\tarde\\Documents\\Projects\\Github\\LaunchMenu\\src\\core\\communication\\channel\\channelSender.js",
            "URL": "source-channelSender.html",
            "sourceCode": "import IPC from \"../IPC\";\r\n\r\nexport default class ChannelSender {\r\n    /**\r\n     * Create a new channel sender, allowing to send messages to the channel\r\n     * @param {string} ID - The unique identifier for the channel\r\n     * @param {string} subChannelID - The subChannelID that will be used to access special subchannel methods\r\n     * @param {string} senderID - An ID that the reciever of this channel can respond to (can be left out)\r\n     * @constructs ChannelSender\r\n     * @hideconstructor\r\n     */\r\n    constructor(ID, subChannelID, senderID) {\r\n        // Store data in a seperate object such that it isn't confused with channel methods\r\n        this.__data = {\r\n            ID: ID,\r\n            subChannelID: subChannelID,\r\n            senderID: senderID,\r\n        };\r\n\r\n        // Listen for the available message types being send\r\n        this.__setupChannelMessageTypeListener();\r\n    }\r\n\r\n    /**\r\n     * Either requests methods to be set up according to the available message types,\r\n     * Or sets up the actual methods according to the passed data\r\n     * @param  {Object} [types] - The available message types to set\r\n     * @returns {undefined}\r\n     * @protected\r\n     * @async\r\n     */\r\n    _setupMethods(types) {\r\n        // Check if this call is initiating the setup, or actually setting up the data\r\n        if (!types) {\r\n            // The call is initiating the setup\r\n            // Check if the channel hasn't been set up already\r\n            if (this.__data.initialised) {\r\n                return new Promise.resolve(this);\r\n            } else {\r\n                // Broadcast a request for all message types of this channel\r\n                IPC.send(\"channel.requestMessageTypes:\" + this.__data.ID);\r\n                return new Promise((resolve, reject) => {\r\n                    this.__data.finishSetup = resolve;\r\n                });\r\n            }\r\n        } else {\r\n            // Call is actually setting up the data\r\n            // Gather the relevant message types\r\n            let messageTypes = types.globalListeners;\r\n            const subChannelMessageTypes =\r\n                types.subChannelListeners[this.__data.subChannelID];\r\n            if (subChannelMessageTypes)\r\n                messageTypes = messageTypes.concat(subChannelMessageTypes);\r\n\r\n            // Setup the methods\r\n            for (let key of messageTypes)\r\n                this[key] = function() {\r\n                    return this.__sendMessage(key, Array.from(arguments));\r\n                };\r\n\r\n            // Notify that the channel is ready\r\n            this.__data.initialised = true;\r\n            if (this.__data.finishSetup) this.__data.finishSetup(this);\r\n        }\r\n    }\r\n    /**\r\n     * Get the channel ID\r\n     * @returns {string} The channel ID\r\n     * @protected\r\n     */\r\n    _getID() {\r\n        return this.__data.ID;\r\n    }\r\n    /**\r\n     * Get the subchannel ID\r\n     * @returns {string} The subchannel ID\r\n     * @protected\r\n     */\r\n    _getSubChannelID() {\r\n        return this.__data.subChannelID;\r\n    }\r\n\r\n    /**\r\n     * Starts listening for the channel receiver to send its available message types\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    __setupChannelMessageTypeListener() {\r\n        IPC.once(\"channel.sendMessageTypes:\" + this.__data.ID, event => {\r\n            // Check if all the subchannel methods have already been defined\r\n            const containsSubchannel =\r\n                !this.__data.subChannelID ||\r\n                event.data.subChannelListeners[this.__data.subChannelID];\r\n            if (containsSubchannel) {\r\n                // Store the location to send the messages to\r\n                this.__data.destProcessID = event.sourceID;\r\n\r\n                // Setup the methods of this object\r\n                this._setupMethods(event.data);\r\n            } else {\r\n                // Continue listening for message types if the subchannel hadn't been set up yet\r\n                this.__setupChannelMessageTypeListener();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Send a message to the channel receiver\r\n     * @param  {string} message - The message type\r\n     * @param  {Object[]} args - The data to send as an argument array\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    __sendMessage(message, args) {\r\n        // Send the message and relevant data to the process/window that contains the channel receiver\r\n        return IPC.send(\r\n            \"channel.message:\" + this.__data.ID,\r\n            {\r\n                message: message,\r\n                subChannelID: this.__data.subChannelID,\r\n                senderID: this.__data.senderID,\r\n                data: args,\r\n            },\r\n            this.__data.destProcessID\r\n        );\r\n    }\r\n}\r\n"
        },
        "source-globalData.html": {
            "sourceURL": "C:\\Users\\tarde\\Documents\\Projects\\Github\\LaunchMenu\\src\\core\\communication\\data\\globalData\\globalData.js",
            "URL": "source-globalData.html",
            "sourceCode": "import IPC from \"../../IPC\";\r\nexport default class GlobalData {\r\n    /**\r\n     * Create a new globalData object allowing you to share data between different modules\r\n     * @constructs GlobalData\r\n     * @hideconstructor\r\n     * @param {string} ID - The ID of the global data to synchronise with\r\n     */\r\n    constructor(ID) {\r\n        this.ID = ID;\r\n\r\n        // The IPC listener that checks data change evens\r\n        this.dataListener = event => {\r\n            const data = event.data;\r\n            this.__setField(data.path, data.value, data.type);\r\n        };\r\n        IPC.on(\"GlobalData.notifyChange.\" + ID, this.dataListener);\r\n\r\n        // The outside event listeners that will be called when data changes\r\n        this.listeners = {};\r\n    }\r\n\r\n    /**\r\n     * Changes the data by providing an object with the field you want to alter,\r\n     * The value 'undefined' can be used to delete a field\r\n     * @param {Object} data - The object with the altered fields\r\n     * @returns {Object} The currently saved data after the alteration\r\n     * @async\r\n     * @public\r\n     */\r\n    change(data) {\r\n        // Send data to main and spread it around from there\r\n        return IPC.send(\"GlobalData.change\", {\r\n            ID: this.ID,\r\n            data: data,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets a specific property by specifying the path to said property\r\n     * @param {string} [path] - The path to the property\r\n     * @returns {*} The data saved under the specified field\r\n     * @public\r\n     */\r\n    get(path) {\r\n        if (!path) path = \"\";\r\n\r\n        // Get field list from the path\r\n        let pathParts = path.split(\".\");\r\n\r\n        let data = this.data;\r\n        let field;\r\n        // Get the next field as long as there is a next field\r\n        while ((field = pathParts.shift()) && data && field.length > 0)\r\n            data = data[field];\r\n\r\n        // Return the retrieved data\r\n        return data;\r\n    }\r\n\r\n    //TODO: specify the callback once VScode works prooperly with @callback\r\n    /**\r\n     * Adds a listener to the object which will get invoked when data changes\r\n     * @param {('update'|'delete'|'create'|'change')} type - The event type to listen to (may be prefexid by path E.G. 'field.subField.update')\r\n     * @param {function} listener - The function to call once a property has been changed\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    on(type, listener) {\r\n        // Get the listeners list for this event type, or create if non-existent\r\n        let listeners = this.listeners[type];\r\n        if (!listeners) listeners = this.listeners[type] = [];\r\n\r\n        // Check if the listener is already added, and add it if it isn't\r\n        const index = listeners.indexOf(listener);\r\n        if (index == -1) listeners.push(listener);\r\n    }\r\n\r\n    /**\r\n     * Removes a listener from the object which would have gotten invoked when data changes\r\n     * @param {('update'|'delete'|'create'|'change')} type - The event type that was listened to (may be prefexid by path E.G. 'field.subField.update')\r\n     * @param {function} listener - The function that was listening to said event type\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    off(type, listener) {\r\n        // Get the listeners list for this event type\r\n        const listeners = this.listeners[type];\r\n        if (listeners) {\r\n            // Check at what index this listener is stored, and remove said index\r\n            const index = listeners.indexOf(listener);\r\n            if (index != -1) listeners.splice(index, 1);\r\n\r\n            // If no more listeners exist, remove the list\r\n            if (listeners.length == 0) delete this.listeners[type];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets rid of all connected data such that the object is safely removed\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    dispose() {\r\n        // Remove the IPC listener\r\n        IPC.off(\"GlobalData.notifyChange.\" + ID, this.dataListener);\r\n    }\r\n\r\n    /**\r\n     * Sets the initial data of the object, without sending events to other instances\r\n     * @param {Object} data - The data to store in the instance\r\n     * @returns {undefined}\r\n     * @protected\r\n     */\r\n    _setData(data) {\r\n        this.data = data;\r\n    }\r\n\r\n    /**\r\n     * Alters a local field and sends out an event to all listeners\r\n     * @param {string} path - The path to the field to change\r\n     * @param {*} value - The new value to store in the field\r\n     * @param {('delete'|'create'|'change')} type - The event type to execute\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    __setField(path, value, type) {\r\n        // Extract the field that was altered from the path\r\n        const pathParts = path.split(\".\");\r\n        const field = pathParts.pop();\r\n\r\n        // Get the object that contains the field\r\n        const data = this.get(pathParts.join(\".\"));\r\n        if (data) {\r\n            // Check if the event type was a deletion\r\n            if (type == \"delete\") {\r\n                // Delete the attribute\r\n                delete data[field];\r\n\r\n                // Send event to delete and update listeners\r\n                this.__emitEvent(type, path);\r\n                this.__emitEvent(\"update\", path, {\r\n                    type: \"delete\",\r\n                });\r\n            } else {\r\n                // Set the field to the new value\r\n                data[field] = value;\r\n\r\n                // Send event to (change or create) and update listeners\r\n                this.__emitEvent(type, path, {\r\n                    value: value,\r\n                });\r\n                this.__emitEvent(\"update\", path, {\r\n                    type: type,\r\n                    value: value,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends an event to the correct listeners with the correct data\r\n     * @param {('update'|'delete'|'create'|'change')} type - The type of event to emit\r\n     * @param {string} path - The path to the field for which to emit the event\r\n     * @param {Object} [event] - The event to emit\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    __emitEvent(type, path, event) {\r\n        // Create the event object if left out\r\n        if (!event) event = {};\r\n\r\n        // Add the full path, allData and type to the event\r\n        event.fullPath = path;\r\n        if (!event.type) event.type = type;\r\n        event.allData = this.data;\r\n\r\n        // Get all fields of the path\r\n        const pathParts = path.split(\".\");\r\n        let subPath = \"\"; // The path that we are currently at\r\n\r\n        // Go through all fields\r\n        while (true) {\r\n            // Get the listeners for the event type and check if they exist\r\n            let listeners = this.listeners[subPath + type];\r\n            if (listeners) {\r\n                // Set the path of the event relative from the current location\r\n                event.path = pathParts.join(\".\");\r\n\r\n                // Send the event to all listeners\r\n                listeners.forEach(listener => {\r\n                    listener.call(this, Object.assign({}, event));\r\n                });\r\n            }\r\n\r\n            // Check if the path has any fields left, if not break the loop\r\n            if (pathParts.length == 0) break;\r\n\r\n            // Go to the next field\r\n            subPath += pathParts.shift() + \".\";\r\n        }\r\n    }\r\n}\r\n"
        },
        "source-globalDataHandler.html": {
            "sourceURL": "C:\\Users\\tarde\\Documents\\Projects\\Github\\LaunchMenu\\src\\core\\communication\\data\\globalData\\globalDataHandler.js",
            "URL": "source-globalDataHandler.html",
            "sourceCode": "import isMain from \"../../../isMain\";\r\nimport IPC from \"../../IPC\";\r\nimport GlobalData from \"./globalData\";\r\n\r\n/**\r\n * @classdesc A static class that allows you to create global data which will be synchronised between modules\r\n * @class\r\n * @hideconstructor\r\n */\r\nexport default class GlobalDataHandler {\r\n    /**\r\n     * Creates a new globalData instance\r\n     * @param {string} ID - The identifier of the globalData (preferably prefixed with some class ID)\r\n     * @param {Object} defaultData - The data that the globalData should contain if it hasn't been initialised yet\r\n     * @returns {GlobalData} The globalData instance\r\n     * @async\r\n     * @public\r\n     */\r\n    static async create(ID, defaultData) {\r\n        // Get the currently stored data for this ID from main, will be set to default if absent\r\n        const data = (await IPC.send(\r\n            \"GlobalData.retrieve\",\r\n            {\r\n                ID: ID,\r\n                defaultData: defaultData,\r\n            },\r\n            0\r\n        ))[0];\r\n\r\n        // Create a new global data instance\r\n        const globalData = new GlobalData(ID);\r\n\r\n        // Add the data retrieved from main to this instance\r\n        globalData._setData(data);\r\n\r\n        // Return the instance\r\n        return globalData;\r\n    }\r\n\r\n    /**\r\n     * Changes a field of for all instances of a specific globalData object\r\n     * @param {string} ID - The identifier of the globalData that this data belongs to\r\n     * @param {*} currentData - The data that is currently located at this path\r\n     * @param {*} newData - The data that we want to assign to this path\r\n     * @param {string} path - The path to assign the data to\r\n     * @returns {Object} The newly set data\r\n     * @protected\r\n     */\r\n    static _changeField(ID, currentData, newData, path) {\r\n        // Check if the old data is a plain js object\r\n        if (currentData && currentData.__proto__ == Object.prototype) {\r\n            // Check if the new data is a plain js object\r\n            if (newData && newData.__proto__ == Object.prototype) {\r\n                // If both old and new data are objects, go through the fields in the new data to replace the old data with\r\n                for (let key in newData) {\r\n                    // Retrieve what the new value should be\r\n                    const newValue = this._changeField(\r\n                        ID,\r\n                        currentData[key], // Get the field of the old data\r\n                        newData[key], // get the field of the new data\r\n                        path ? path + \".\" + key : key // Append the field to the path\r\n                    );\r\n\r\n                    // Check if the new value is undefined, if so, it should be deleted. Otherwise it should simply be stored\r\n                    if (newValue === undefined) {\r\n                        delete currentData[key];\r\n                    } else {\r\n                        currentData[key] = newValue;\r\n                    }\r\n                }\r\n\r\n                // Return the now altered data\r\n                return currentData;\r\n            } else {\r\n                // If the new data is not an object, check if it is defined at all\r\n                if (newData === undefined) {\r\n                    // If it isn't defined, that means the object got deleted, no new value should be stored\r\n                    IPC.send(\"GlobalData.notifyChange.\" + ID, {\r\n                        type: \"delete\",\r\n                        path: path,\r\n                    });\r\n                } else {\r\n                    // If it is defined, the object just got replaced by another value type, so broardcast the change\r\n                    IPC.send(\"GlobalData.notifyChange.\" + ID, {\r\n                        type: \"change\",\r\n                        path: path,\r\n                        value: newData,\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            // check if the new data is defined at all\r\n            if (newData === undefined) {\r\n                // If not, that means the object got deleted, no new value should be stored\r\n                IPC.send(\"GlobalData.notifyChange.\" + ID, {\r\n                    type: \"delete\",\r\n                    path: path,\r\n                });\r\n\r\n                // Check if the new data is a plain js object\r\n            } else if (newData && newData.__proto__ == Object.prototype) {\r\n                // If the new data is an object, send out an event indicating that the new value should be a plain js object\r\n                // Either give it a create event type if there was no previous value, or change type if there was\r\n                IPC.send(\"GlobalData.notifyChange.\" + ID, {\r\n                    type: currentData ? \"change\" : \"create\",\r\n                    path: path,\r\n                    value: {},\r\n                });\r\n\r\n                // Go through all the fields in the new data and send events for each\r\n                for (let key in newData)\r\n                    this._changeField(\r\n                        ID,\r\n                        undefined,\r\n                        newData[key],\r\n                        path ? path + \".\" + key : key\r\n                    );\r\n            } else {\r\n                // If the new data is just a regular value, send out an event indicating what the new value should be\r\n                // Either give it a create event type if there was no previous value, or change type if there was\r\n                IPC.send(\"GlobalData.notifyChange.\" + ID, {\r\n                    type: currentData ? \"change\" : \"create\",\r\n                    path: path,\r\n                    value: newData,\r\n                });\r\n            }\r\n        }\r\n\r\n        // By default return the new data to be stored\r\n        return newData;\r\n    }\r\n\r\n    /**\r\n     * The initial setup method to be called by this file itself, initialises the static fields of the class\r\n     * @return {undefined}\r\n     * @private\r\n     */\r\n    static __setup() {\r\n        if (isMain) {\r\n            // Store all the correct global data in a single place in main:\r\n            this.globalDataInstances = {};\r\n\r\n            // Listen for data change events\r\n            IPC.on(\"GlobalData.change\", event => {\r\n                // Retrieve the globalData currently stored\r\n                const data = event.data;\r\n                const instance = this.globalDataInstances[data.ID];\r\n\r\n                // If there is any, change the root 'field' to the new data\r\n                if (instance)\r\n                    return this._changeField(data.ID, instance, data.data, \"\");\r\n\r\n                // Return false if there was no current data\r\n                return false;\r\n            });\r\n\r\n            // Listen for global data being requested\r\n            IPC.on(\"GlobalData.retrieve\", event => {\r\n                // Check if an instance of this global data already exists, if not created it\r\n                if (!this.globalDataInstances[event.data.ID])\r\n                    this.globalDataInstances[event.data.ID] =\r\n                        event.data.defaultData;\r\n\r\n                // Return the instance of this global data\r\n                return this.globalDataInstances[event.data.ID];\r\n            });\r\n        }\r\n    }\r\n}\r\nGlobalDataHandler.__setup();\r\n"
        },
        "source-settings.html": {
            "sourceURL": "C:\\Users\\tarde\\Documents\\Projects\\Github\\LaunchMenu\\src\\core\\communication\\data\\settings\\settings.js",
            "URL": "source-settings.html",
            "sourceCode": "import IPC from \"../../IPC\";\r\nimport GlobalData from \"../globalData/globalData\";\r\n\r\nexport default class Settings extends GlobalData {\r\n    /**\r\n     * Create a new globalData object allowing you to share data between different modules\r\n     * @constructs Settings\r\n     * @hideconstructor\r\n     * @param {string} ID - The ID of the settings to synchronise with\r\n     * @param {string} fileName - The file name in which to save the settings\r\n     * @extends GlobalData\r\n     */\r\n    constructor(ID, fileName) {\r\n        super(ID);\r\n        this.fileName = fileName;\r\n    }\r\n\r\n    /**\r\n     * Gets rid of all connected data such that the object is safely removed and saves the data in the file\r\n     * @param {boolean} dontSave - Whether to not save the file when disposing\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    dispose(dontSave) {\r\n        // By default save the data on exit\r\n        if (!dontSave) this.save();\r\n\r\n        return super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Saves the data in the specified file\r\n     * @returns {undefined}\r\n     * @async\r\n     * @public\r\n     */\r\n    save() {\r\n        // Send a request to the Settings Handler to save this data\r\n        return IPC.send(\"Settings.save\", {\r\n            ID: this.ID,\r\n            fileName: this.fileName,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reloads the data from the specified file\r\n     * @returns {undefined}\r\n     * @async\r\n     * @public\r\n     */\r\n    reload() {\r\n        // Send a request to the Settings Handler to reload this data\r\n        return IPC.send(\"Settings.reload\", {\r\n            ID: this.ID,\r\n            fileName: this.fileName,\r\n        });\r\n    }\r\n}\r\n"
        },
        "source-settingsHandler.html": {
            "sourceURL": "C:\\Users\\tarde\\Documents\\Projects\\Github\\LaunchMenu\\src\\core\\communication\\data\\settings\\settingsHandler.js",
            "URL": "source-settingsHandler.html",
            "sourceCode": "import GlobalDataHandler from \"../globalData/globalDataHandler\";\r\nimport Settings from \"./settings\";\r\nimport isMain from \"../../../isMain\";\r\nimport IPC from \"../../IPC\";\r\nimport Path from \"path\";\r\nimport FS from \"fs\";\r\n\r\nfunction escapePath(path) {\r\n    return path.replace(/\\>/g, \"\").replace(/\\\\\\//g, \"_\");\r\n}\r\nconst dataDir = Path.resolve(__dirname, \"../../../../../data/settings\");\r\nconst prefix = \"Settings:\";\r\n\r\n/**\r\n * @classdesc A static class that allows you to create settings which will be synchronised between modules and can be saved in files\r\n * @class\r\n * @hideconstructor\r\n */\r\nexport default class SettingsHandler {\r\n    /**\r\n     * Creates a new settings instance\r\n     * @param {string} ID - The identifier of the settings (preferably prefixed with some class ID)\r\n     * @param {Object} defaultData - The data that the settings should contain if no file exists yet\r\n     * @returns {Settings} The settings instance\r\n     * @async\r\n     * @public\r\n     */\r\n    static create(module, defaultData) {\r\n        // Use the module class path as the filename by default\r\n        const path = module.getPath().toString();\r\n\r\n        // Use the path with a settings prefix as the data ID\r\n        const ID = prefix + path;\r\n\r\n        // Create the settings\r\n        return this._create(ID, defaultData, path);\r\n    }\r\n\r\n    /**\r\n     * Creates a new settings instance\r\n     * @param {string} ID - The identifier of the settings (preferably prefixed with some class ID)\r\n     * @param {Object} defaultData - The data that the settings should contain if no file exists yet\r\n     * @param {string} fileName - The name of the file to store the settings in\r\n     * @returns {Settings} The settings instance\r\n     * @async\r\n     * @protected\r\n     */\r\n    static async _create(ID, defaultData, fileName) {\r\n        if (!fileName) fileName = ID;\r\n        // Get the currently stored data for this ID from main, will be set to default if absent\r\n        const data = (await IPC.send(\r\n            \"Settings.retrieve\",\r\n            {\r\n                ID: ID,\r\n                fileName: fileName,\r\n                defaultData: defaultData,\r\n            },\r\n            0\r\n        ))[0];\r\n\r\n        // Createa a new settings instance\r\n        const settings = new Settings(ID, prefix);\r\n\r\n        // Add the data retrieved from main to this instance\r\n        settings._setData(data);\r\n\r\n        // Return the instance\r\n        return settings;\r\n    }\r\n\r\n    // Some file manipulation methods\r\n    /**\r\n     * Gets the contents of the file at the speciifed path\r\n     * @param {string} path - The path to get the data from\r\n     * @returns {Object} The data that was retrieved from the file\r\n     * @private\r\n     */\r\n    static __getFile(path) {\r\n        // Check if a file exists at this path\r\n        if (FS.existsSync(path)) {\r\n            try {\r\n                // If it exists, read the contents and parse it to json\r\n                const data = JSON.parse(FS.readFileSync(path));\r\n\r\n                // Return the data\r\n                return data;\r\n            } catch (e) {\r\n                // If anything goes wrong, just log an error. TODO: Properly handle these errors\r\n                console.error(\r\n                    `Something went wrong while retrieving ${path}:`,\r\n                    e\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Writes contents in the file at the speciifed path\r\n     * @param {string} path - The path to write the data to\r\n     * @param {Object} data - The data to write to the file\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    static __setFile(path, data) {\r\n        // Turn the data to json and write at the path\r\n        return FS.writeFileSync(path, JSON.stringify(data, null, 4));\r\n    }\r\n    /**\r\n     * Gets the correct fle path based on the file name (without extension)\r\n     * @param {string} fileName - The name of the file\r\n     * @returns {Object} The data that was retrieved from the file\r\n     * @private\r\n     */\r\n    static __getPath(fileName) {\r\n        // Combine the escaped file with the settings path and add th json extension\r\n        return Path.join(dataDir, escapePath(fileName)) + \".json\";\r\n    }\r\n    /**\r\n     * Gets the contents of a file corresponding to a specific requestPath\r\n     * @param {RequestPath} requestPath - The path for which to get a file\r\n     * @returns {Object} The data that was retrieved from the file\r\n     * @protected\r\n     */\r\n    static _getModuleFile(requestPath) {\r\n        // Get the data from the combined escaped request path and the settings path\r\n        return this.__getFile(\r\n            Path.join(dataDir, escapePath(requestPath.toString())) + \".json\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * The initial setup method to be called by this file itself, initialises the static fields of the class\r\n     * @return {undefined}\r\n     * @private\r\n     */\r\n    static __setup() {\r\n        if (isMain) {\r\n            // Listen for settings save events\r\n            IPC.on(\"Settings.save\", event => {\r\n                // Get the data of the settings that want to be saved\r\n                const ID = event.data.ID;\r\n                const fileName = event.data.fileName;\r\n\r\n                // Retrieve the data to save\r\n                const instance = GlobalDataHandler.globalDataInstances[ID];\r\n                if (instance) {\r\n                    // Save the data in the correct file\r\n                    return this.__setFile(this.__getPath(fileName), instance);\r\n                }\r\n\r\n                // Return false if there was no data to save\r\n                return false;\r\n            });\r\n\r\n            // Listen for settings reload events\r\n            IPC.on(\"Settings.reload\", event => {\r\n                // Get the data of the settings that want to be saved\r\n                const ID = event.data.ID;\r\n                const fileName = event.data.fileName;\r\n\r\n                // Retrieve both the saved and currently loaded data\r\n                const instance = GlobalDataHandler.globalDataInstances[ID];\r\n                const data = this.__getFile(this.__getPath(fileName));\r\n\r\n                // Check if both are present\r\n                if (instance && data) {\r\n                    // Set undefined fields literally to undefined such that they will be deleted\r\n                    Object.keys(instance).forEach(field => {\r\n                        if (data[field] === undefined) data[field] = undefined;\r\n                    });\r\n\r\n                    // Change all the data\r\n                    GlobalDataHandler._changeField(ID, instance, data, \"\");\r\n                    return data;\r\n                }\r\n\r\n                // If either the current data or saved data is absent, return false\r\n                return false;\r\n            });\r\n\r\n            // Add dedicated retrieve method that checks if data is stored in a file first\r\n            IPC.on(\"Settings.retrieve\", event => {\r\n                // Get the data of the settings that want to be saved\r\n                const ID = event.data.ID;\r\n                const fileName = event.data.fileName;\r\n\r\n                //  Check if global data for these settings is already loaded\r\n                if (!GlobalDataHandler.globalDataInstances[ID]) {\r\n                    // If it isn't already loaded, try to retrieve it from the file\r\n                    const data = this.__getFile(this.__getPath(fileName));\r\n                    if (data) {\r\n                        // If the file contained data, load this data\r\n                        GlobalDataHandler.globalDataInstances[ID] = data;\r\n                    } else {\r\n                        // If the file contained no data, load the default data\r\n                        GlobalDataHandler.globalDataInstances[ID] =\r\n                            event.data.defaultData;\r\n                    }\r\n                }\r\n\r\n                // Return the stored data for these settings\r\n                return GlobalDataHandler.globalDataInstances[ID];\r\n            });\r\n        }\r\n    }\r\n}\r\nSettingsHandler.__setup();\r\n"
        },
        "source-extendedJSON.html": {
            "sourceURL": "C:\\Users\\tarde\\Documents\\Projects\\Github\\LaunchMenu\\src\\core\\communication\\extendedJSON.js",
            "URL": "source-extendedJSON.html",
            "sourceCode": "import Module from \"../registry/module\";\r\nconst pathSymbol = Symbol(\"path\");\r\nconst parentSymbol = Symbol(\"parent\");\r\nconst cleanSymbol = Symbol(\"clean\");\r\nconst serializeSymbol = Symbol(\"serialize\");\r\nconst deserializeSymbol = Symbol(\"deserialize\");\r\n\r\nexport {serializeSymbol, deserializeSymbol};\r\n\r\n/**\r\n * @classdesc\r\n * An extended version of JSON that is able to also encode the following information:\r\n *  - Module classes\r\n *  - Module class instances (if the class has serialize and deserialize methods)\r\n *  - recursive objects/internal object references\r\n * @class\r\n * @hideconstructor\r\n */\r\nexport default class ExtendedJSON {\r\n    /**\r\n     * Encode more complicated data into a serializable object\r\n     * @param {Object} object -The data you want to map\r\n     * @returns {Object} The object that represents your data as as serializable string\r\n     * @public\r\n     */\r\n    static encode(object) {\r\n        /**\r\n         * Goes through an object and returns the object in the encoded format\r\n         * @param {Object} object - The object to convert\r\n         * @param {string} path - The path within the parent object to reach this object so far\r\n         * @returns {Object} The encoded version of the input object\r\n         * @inner\r\n         * @private\r\n         */\r\n        const encodeValue = function(object, path) {\r\n            try {\r\n                if (object instanceof Object) {\r\n                    // Encode an object of data into the extended format\r\n                    // If object is null, return null object in the extended format\r\n                    if (!object)\r\n                        return {\r\n                            type: \"object\",\r\n                            value: null,\r\n                        };\r\n\r\n                    // If object has already been encoded, return a path instead (handles recursive structures)\r\n                    if (object[pathSymbol] != null) {\r\n                        // Get the current path and the reference path in array form\r\n                        const referencePathDirs = object[pathSymbol].split(\"/\");\r\n                        const currentPathDirs = path.split(\"/\");\r\n\r\n                        // Remove all the common nodes\r\n                        while (referencePathDirs[0] == currentPathDirs[0]) {\r\n                            referencePathDirs.shift();\r\n                            currentPathDirs.shift();\r\n                        }\r\n\r\n                        // Make the path go back to last common node\r\n                        for (let i in currentPathDirs)\r\n                            referencePathDirs.unshift(\"..\");\r\n\r\n                        // Return the referencePath as a string\r\n                        return {\r\n                            type: \"object\",\r\n                            subType: \"path\",\r\n                            value: referencePathDirs.join(\"/\"),\r\n                        };\r\n                    }\r\n\r\n                    // If object is an array or plain js object, recurse on this object\r\n                    if (\r\n                        object.__proto__ == Object.prototype ||\r\n                        object.__proto__ == Array.prototype\r\n                    ) {\r\n                        // Indicate that this object is currently being handled, and prevent recusion\r\n                        object[pathSymbol] = path;\r\n\r\n                        // Go through all children and append their values to this value\r\n                        const value = {};\r\n                        for (let key in object)\r\n                            value[key] = encodeValue(\r\n                                object[key],\r\n                                path + \"/\" + key\r\n                            );\r\n\r\n                        // Return either a plain js object type, or an array type\r\n                        const ret = {\r\n                            type: \"object\",\r\n                            value: value,\r\n                        };\r\n                        if (object instanceof Array) ret.subType = \"array\";\r\n                        return ret;\r\n                    }\r\n\r\n                    // If object is a module and serializable, serialize it\r\n                    if (\r\n                        object instanceof Module &&\r\n                        object[serializeSymbol] &&\r\n                        object[deserializeSymbol]\r\n                    ) {\r\n                        const module = object.getClass().modulePath;\r\n                        const data = object[serializeSymbol]();\r\n                        return {\r\n                            type: \"object\",\r\n                            subType: \"moduleInstance:\" + module,\r\n                            value: data,\r\n                        };\r\n                    }\r\n\r\n                    // If object is a module class, return the path of the class\r\n                    if (typeof object == \"function\" && object.modulePath)\r\n                        return {\r\n                            type: \"object\",\r\n                            subType: \"module:\" + object.modulePath,\r\n                            value: undefined,\r\n                        };\r\n\r\n                    // If none of the previous conditions apply, there is nothing left but ignore this value\r\n                    return {\r\n                        type: \"undefined\",\r\n                        value: undefined,\r\n                    };\r\n                } else {\r\n                    // Encode a primitive value in the extended format\r\n                    const type = typeof object;\r\n                    return {\r\n                        type: type,\r\n                        value: object,\r\n                    };\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                return undefined;\r\n            }\r\n        };\r\n\r\n        // Encode data\r\n        const encodedObject = encodeValue(object, \"\");\r\n\r\n        // Remove data added to the original object during the process\r\n        this.__cleanObject(object, pathSymbol);\r\n\r\n        // Return the encoded data\r\n        return encodedObject;\r\n    }\r\n    /**\r\n     * Decode the more complicated data that was encoded into a serializable object\r\n     * @param  {Object} object - The data you want return into its source data\r\n     * @returns {Object} The source data in its format before encoding was applied\r\n     * @public\r\n     */\r\n    static decode(object) {\r\n        /**\r\n         * Goes through an encoded object and returns the object in its original format\r\n         * @param {Object} value - The value to decode\r\n         * @param {Object} parent - The object that the value will be stored in (used for object reference paths)\r\n         * @returns {Object} The resulting value after decoding the input value\r\n         * @inner\r\n         * @private\r\n         */\r\n        const decodeValue = function(value, parent) {\r\n            try {\r\n                if (value.type == \"object\") {\r\n                    // Decode a value of the type Object\r\n                    // If object is of a special type, decode it\r\n                    if (value.subType) {\r\n                        // If object is of type path (internal reference), retrieve the object\r\n                        if (value.subType == \"path\") {\r\n                            const path = value.value.split(\"/\");\r\n                            path.shift(); // The first\r\n\r\n                            // Retrieve th object by going through the path\r\n                            let obj = parent;\r\n                            let key;\r\n                            while ((key = path.shift()) && obj) {\r\n                                if (key == \"..\")\r\n                                    // Step up in the object\r\n                                    obj = obj[parentSymbol];\r\n                                // Step down to a child in the object\r\n                                else obj = obj[key];\r\n                            }\r\n\r\n                            // Return the object\r\n                            return obj;\r\n                        }\r\n\r\n                        let m;\r\n                        // If object is a module class, retrieve said class\r\n                        if ((m = value.subType.match(/module\\:(.*)/))) {\r\n                            // Retrieve the Registry at runtime, as the registry also uses this module (cross link)\r\n                            const Registry = require(\"../registry/registry\")\r\n                                .default;\r\n\r\n                            // Load the module from its path\r\n                            const moduleData = Registry._loadModule(m[1]);\r\n                            const module = moduleData.default;\r\n\r\n                            // Load the module from its path and return it\r\n                            return module;\r\n                        }\r\n\r\n                        // If object is a module instance, retrieve its class, instatiate it, and load the data\r\n                        if ((m = value.subType.match(/moduleInstance\\:(.*)/))) {\r\n                            // Retrieve the Registry  at runtime, as the registry also uses this module (cross link)\r\n                            const Registry = require(\"../registry/registry\")\r\n                                .default;\r\n\r\n                            // Load the module from its path\r\n                            const moduleData = Registry._loadModule(m[1]);\r\n                            const module = moduleData.default;\r\n\r\n                            // Instanciate the module with the correct arguments, and call the deserializer\r\n                            const data = value.value;\r\n                            const instance = new (module.bind.apply(\r\n                                module,\r\n                                [module].concat(data.constArgs || [\"crap\"])\r\n                            ))();\r\n                            instance[deserializeSymbol](data);\r\n\r\n                            // Return the instance\r\n                            return instance;\r\n                        }\r\n                    }\r\n\r\n                    // Decode null objects\r\n                    if (value.value == null) {\r\n                        return null;\r\n                    }\r\n\r\n                    // Decode plain objects and arrays\r\n                    const val = value.subType == \"array\" ? [] : {};\r\n                    // Store the parent temporarely for relative path traversal\r\n                    val[parentSymbol] = parent;\r\n                    for (let key in value.value) // Fill object or array with child values\r\n                        val[key] = decodeValue(value.value[key], val);\r\n\r\n                    // Get rid of the temporary parent data\r\n                    delete val[parentSymbol];\r\n\r\n                    // Return the result\r\n                    return val;\r\n                } else {\r\n                    // Decode primitive value\r\n                    return value.value;\r\n                }\r\n            } catch (e) {\r\n                // If anything goes wrong, just write value undefined\r\n                console.error(e);\r\n                return undefined;\r\n            }\r\n        };\r\n\r\n        // Decode the object and return the result\r\n        return decodeValue(object);\r\n    }\r\n\r\n    /**\r\n     * Use ExtendedJSON to turn a string into an object just like JSON would\r\n     * @param {String} string - The string to translate back into an object\r\n     * @returns {Object} The source object that the string was made from\r\n     * @public\r\n     */\r\n    static parse(string) {\r\n        return this.decode(JSON.parse(string));\r\n    }\r\n    /**\r\n     * Use ExtendedJSON to turn an object into a string just like JSON would\r\n     * @param {Object} object - The source object to turn into a string\r\n     * @returns {String} The string that the object was translated into\r\n     * @public\r\n     */\r\n    static stringify(object) {\r\n        return JSON.stringify(this.encode(object));\r\n    }\r\n\r\n    /**\r\n     * Get the serializeSymbol to use as a function name in your own class, allowing said class to be serialized by ExtendedJSON\r\n     * @type {Symbol}\r\n     * @public\r\n     */\r\n    static get serializeSymbol() {\r\n        return serializeSymbol;\r\n    }\r\n    /**\r\n     * Get the deserializeSymbol to use as a function name in your own class, allowing said class to be deserialized by ExtendedJSON\r\n     * @type {Symbol}\r\n     * @public\r\n     */\r\n    static get deserializeSymbol() {\r\n        return deserializeSymbol;\r\n    }\r\n\r\n    // Private methods\r\n    /**\r\n     * Goes through an object and returns all the pathSymbols from it\r\n     * @param {Object} object 0 The object to clean up\r\n     * @param {(Symbol|string)} prop - The property to remove from the object\r\n     * @returns {undefined} The method returns no useful information\r\n     * @private\r\n     */\r\n    static __cleanObject(object, prop) {\r\n        // Only clean the object if it really is an object, if it isn't already cleaned and if there is still something to clean\r\n        if (\r\n            object instanceof Object &&\r\n            !object[cleanSymbol] &&\r\n            prop in object\r\n        ) {\r\n            // Prevent recursion while cleaning the object\r\n            object[cleanSymbol] = true;\r\n\r\n            // Remove the path or parent if it is present\r\n            if (prop in object) delete object[prop];\r\n\r\n            // If no path is present, recurse on its children\r\n            for (let key in object) this.__cleanObject(object[key], prop);\r\n\r\n            // Remove the cleanSymbol which prevent recursion\r\n            delete object[cleanSymbol];\r\n        }\r\n    }\r\n}\r\n"
        },
        "source-IPC.html": {
            "sourceURL": "C:\\Users\\tarde\\Documents\\Projects\\Github\\LaunchMenu\\src\\core\\communication\\IPC.js",
            "URL": "source-IPC.html",
            "sourceCode": "import {ipcMain, ipcRenderer} from \"electron\";\r\nimport isMain from \"../isMain\";\r\nimport ExtendedJSON from \"../communication/extendedJSON\";\r\n\r\n/**\r\n * @typedef {object} IPC~IPCevent\r\n * @property {number} sourceID - The ID of the process/window that original sent the event\r\n * @property {*} data - The data that was sent with the event\r\n */\r\n\r\n/**\r\n * @classdesc A static class that allows for communication between different processes and windows\r\n * @class\r\n * @hideconstructor\r\n */\r\nexport default class IPC {\r\n    /**\r\n     * Send data to another window or the main script\r\n     * @param  {string} type - The event type to send (preferably prefixed with some class ID)\r\n     * @param  {Object} data - The data to send\r\n     * @param  {(string|string[])} [dest=\"*\"] - The process/window ID(s) to send this data to\r\n     * @returns {Promise<Object[]>} An array of all the data that listeners for the event have returned\r\n     * @async\r\n     * @public\r\n     */\r\n    static send(type, data, dest = \"*\") {\r\n        // Forward the event to the private send method (which can take additional arguments)\r\n        return this.__send(type, data, dest);\r\n    }\r\n\r\n    /**\r\n     * Send data synchronously to the main script\r\n     * @param  {string} type - The event type to send (preferably prefixed with some class ID)\r\n     * @param  {*} data - The data to send\r\n     * @returns {Object[]} An array of all the data that listeners for the event have returned\r\n     * @public\r\n     */\r\n    static sendSync(type, data) {\r\n        // Forward the event to the private sendSync method (which can take additional arguments)\r\n        return this.__sendSync(type, data);\r\n    }\r\n\r\n    // TODO: add proper handler definition once VScode fixes @callback\r\n    /**\r\n     * Listens for data being sent by a process/window\r\n     * @param  {string} type - The type of event to listen for\r\n     * @param  {function} handler - The function to handle the event occuring\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    static on(type, handler) {\r\n        // If there are no listeners for this type yet, create an array for them\r\n        if (!this.listeners[type]) this.listeners[type] = [];\r\n\r\n        // Get the array of listeners for this type\r\n        const listeners = this.listeners[type];\r\n\r\n        // Check if this listener is already present, if not, add it\r\n        const index = listeners.indexOf(handler);\r\n        if (index == -1) listeners.push(handler);\r\n    }\r\n\r\n    /**\r\n     * Listens for data being sent by a process/window, but only listen for it once\r\n     * @param  {string} type - The type of event to listen for\r\n     * @param  {function} handler - The function to handle the event occuring\r\n     * @returns {undefined}\r\n     * @public\r\n     */\r\n    static once(type, handler) {\r\n        // Create a handler middleware that will automaticall remove itself\r\n        const handleMiddleware = function(event) {\r\n            // As soon as an event is received, remove yourself\r\n            this.off(type, handleMiddleware);\r\n\r\n            // Call the handler itself with the same data\r\n            handler.apply(this, arguments);\r\n        };\r\n\r\n        // Add the handler middleware event listener\r\n        return this.on(type, handleMiddleware);\r\n    }\r\n\r\n    /**\r\n     * Stops listening for data being sent by a process/window\r\n     * @param  {String} type - The type of event that is being listened for\r\n     * @param  {function} - The function that handles the event when occuring\r\n     * @return {undefined}\r\n     * @public\r\n     */\r\n    static off(type, handler) {\r\n        // Get the listeners for this type, and check if even existent\r\n        const listeners = this.listeners[type];\r\n        if (listeners) {\r\n            // Get the index at which this handler is stored, and remove that index if present\r\n            const index = listeners.indexOf(handler);\r\n            if (index != -1) listeners.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the identifier of this process or window which other processes or windows can use to communicate\r\n     * @return {number} The numeric identifier\r\n     * @public\r\n     */\r\n    static getID() {\r\n        return this.ID;\r\n    }\r\n\r\n    /**\r\n     * Get all the windows that are registered and can be communicated with (only works in the main process)\r\n     * @return {BrowserWindow[]} The actual windows\r\n     * @protected\r\n     */\r\n    static _getWindows() {\r\n        return this.windows;\r\n    }\r\n\r\n    /**\r\n     * Register a window such that it can start communicating with other processes and windows\r\n     * @param  {BrowserWindow} window - The window to register\r\n     * @param  {number} windowID - The ID to register the window under\r\n     * @return {undefined}\r\n     * @protected\r\n     */\r\n    static _registerWindow(window, windowID) {\r\n        this.windows[windowID] = window;\r\n    }\r\n\r\n    /**\r\n     * Deregister a window for when it is destroyed, such that it is no longer listed as a valid window\r\n     * @param  {number} windowID - The ID the window is registered under\r\n     * @return {undefined}\r\n     * @protected\r\n     */\r\n    static _deregisterWindow(windowID) {\r\n        delete this.windows[windowID];\r\n    }\r\n\r\n    /**\r\n     * Emit an event to all the registered listeners in this process/window\r\n     * @param  {string} type  - The event type to invoke\r\n     * @param  {IPC~IPCevent} event - The event data to pass to the listeners\r\n     * @param  {boolean} [sync] - Whether to act synchronously and only allow sync returns\r\n     * @return {Promise<Object[]>} An array of all the data that listeners for the event have returned\r\n     * @async\r\n     * @private\r\n     */\r\n    static __emitEvent(type, event, sync) {\r\n        // Retrieve the listeners to send this event to\r\n        const listeners = this.listeners[type];\r\n\r\n        // Track the returned respones as well as promises\r\n        const responses = [];\r\n        const promises = [];\r\n\r\n        // Emit the event itself\r\n        if (listeners)\r\n            listeners.forEach(listener => {\r\n                // Call the listener and store what it returns\r\n                const response = listener.call(this, event);\r\n\r\n                // If it returns a promise, add it to the promises, otherwise add it to the responses\r\n                if (response instanceof Promise) {\r\n                    promises.push(response);\r\n                } else {\r\n                    responses.push(response);\r\n                }\r\n            });\r\n\r\n        // Return the responses of the event and ignore the promises if synchronous\r\n        if (sync) return responses;\r\n\r\n        // If not synchronous, wait for all promises to resolve, and add their results to the reponses\r\n        return Promise.all(promises).then(promiseResponses => {\r\n            return responses.concat(promiseResponses);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send data to other processes/windows\r\n     * @param  {string} type - The event type to send (preferbly prefixed with some module ID)\r\n     * @param  {*} data - The data to send\r\n     * @param  {(string|string[])} [dest=\"*\"] - The process/window ID(s) to send this data to\r\n     * @param  {number} source - The process/window ID that the event was originally sent from\r\n     * @param  {number} respID - The ID of the response listener in the source process/window to call\r\n     * @return {Promise<Object[]>} An array of all the data that listeners for the event have returned\r\n     * @async\r\n     * @private\r\n     */\r\n    static __send(type, data, dest = \"*\", source = 0, respID = undefined) {\r\n        // Only create a promise if this is not a forwarded event\r\n        let promise;\r\n        if (respID == undefined) {\r\n            // Create a promise that can be used to return a response\r\n            let resolve;\r\n            promise = new Promise((res, reject) => {\r\n                resolve = res;\r\n            });\r\n            // Register the response listener\r\n            respID = this.responseListeners.ID++;\r\n            this.responseListeners[respID] = {\r\n                resolve, // The resolve function to call when finished\r\n                responseOriginsReceived: 0, // The number of processes/windows that have returned responses\r\n                responses: [], // The responses that have been recieved so far\r\n            };\r\n        }\r\n\r\n        // Send the data\r\n        const encodedData = ExtendedJSON.encode(data);\r\n        if (isMain) {\r\n            // If the call is made from the main process\r\n            // Send the data to the appropriate windows\r\n            const windows = this._getWindows();\r\n\r\n            // Format the destination\r\n            if (dest == \"*\") {\r\n                // If we want to target all windows (and the main thread), create a list of all destinations\r\n                dest = Object.keys(windows);\r\n            } else if (!(dest instanceof Array)) {\r\n                // If only a single destination is provided, still make sure it is an array\r\n                dest = [dest];\r\n            } else {\r\n                // Remove all invalid window ids\r\n                for (let i = dest.length - 1; i >= 0; i--) {\r\n                    let id = dest[i];\r\n                    if (!windows[Number(id)]) dest.splice(i, 1);\r\n                }\r\n            }\r\n\r\n            // Go through all destionations and send the data\r\n            const destCount = dest.length;\r\n            dest.forEach(id => {\r\n                if (id == 0) {\r\n                    // Target the main process\r\n                    // Emit the event if the main process is a destination of the event\r\n                    const getResponses = this.__emitEvent(type, {\r\n                        sourceID: source,\r\n                        data: data,\r\n                    });\r\n\r\n                    // Return responses\r\n                    getResponses.then(responses => {\r\n                        this.__sendResponse(source, {\r\n                            responseID: respID,\r\n                            responseOriginCount: destCount,\r\n                            responses: responses,\r\n                        });\r\n                    });\r\n                } else {\r\n                    // Target a window\r\n                    const window = windows[Number(id)];\r\n                    if (window) {\r\n                        // Tell a window that it received the event defined below, so it can emit it and send back its response data to main\r\n                        window.webContents.send(\"IPC.recieve\", {\r\n                            type: type,\r\n                            sourceID: source,\r\n                            data: encodedData,\r\n                            responseID: respID,\r\n                            responseOriginCount: destCount,\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // Send the event to the main process such that it can spread it to the appropriate windows\r\n            ipcRenderer.send(\"IPC.forward\", {\r\n                dest: dest,\r\n                type: type,\r\n                sourceID: this.ID,\r\n                responseID: respID,\r\n                data: encodedData,\r\n            });\r\n        }\r\n\r\n        // Return the response promise\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Send data synchronously to the main script\r\n     * @param  {string} type - The event type to send (preferably prefixed with some class ID)\r\n     * @param  {*} data - The data to send\r\n     * @param  {number} source - The process/window ID that the event was originally sent from\r\n     * @return {Object[]} An array of all the data that listeners for the event have returned\r\n     * @private\r\n     */\r\n    static __sendSync(type, data, sourceID) {\r\n        if (isMain) {\r\n            // If the call is made from the main process, just emit the event and return the responses\r\n            return this.__emitEvent(\r\n                type,\r\n                {\r\n                    sourceID: sourceID,\r\n                    data: data,\r\n                },\r\n                true\r\n            );\r\n        } else {\r\n            // Otherwise send the event to the main process and return the retrieved data from there\r\n            const response = ipcRenderer.sendSync(\"IPC.syncCall\", {\r\n                type: type,\r\n                data: ExtendedJSON.encode(data),\r\n            });\r\n            return ExtendedJSON.decode(response);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a response to the source window that emitted the event\r\n     * @param  {string} sourceID - The ID of the event source process/window\r\n     * @param  {object} responseData - The response data\r\n     * @param  {number} responseData.responseID - The ID of the response in said process/window\r\n     * @param  {Object[]}  responseData.responses - The actual array of returned responses\r\n     * @param  {number} responseData.responseOriginCount - The number of processes/windows that need to return responses\r\n     * @return {undefined}\r\n     * @private\r\n     */\r\n    static __sendResponse(sourceID, responseData) {\r\n        // Check whether this is the main process or a window\r\n        if (isMain) {\r\n            // If this is the main process, and the event was sent by the main process, process the data\r\n            if (sourceID == 0) {\r\n                this.__recieveResponse(\r\n                    responseData.responseID,\r\n                    responseData.responses,\r\n                    responseData.responseOriginCount\r\n                );\r\n\r\n                // If this is the main process and the data was meant for anotherw process/window, forward the data\r\n            } else {\r\n                const window = this.windows[Number(sourceID)];\r\n                if (window) {\r\n                    window.webContents.send(\"IPC.recieveResponse\", {\r\n                        responseID: responseData.responseID,\r\n                        responseOriginCount: responseData.responseOriginCount,\r\n                        responses: ExtendedJSON.encode(responseData.responses),\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            // If this is a process/window, pass the response back to the main process\r\n            ipcRenderer.send(\"IPC.forwardResponse\", {\r\n                sourceID: sourceID,\r\n                responseID: responseData.responseID,\r\n                responseOriginCount: responseData.responseOriginCount,\r\n                responses: ExtendedJSON.encode(responseData.responses),\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Recieve a response from some process/window, and resolve promise when all are recieved\r\n     * @param  {number} responseID - The ID of the response identifier\r\n     * @param  {Object[]}  responses - The actual array of returned responses\r\n     * @param  {number} responseOriginCount - The number of processes/windows that need to return responses\r\n     * @return {undefined}\r\n     * @private\r\n     */\r\n    static __recieveResponse(responseID, responses, responseOriginCount) {\r\n        // Find the attached response listener from the ID\r\n        const rl = this.responseListeners[responseID];\r\n        if (rl) {\r\n            // Combine the new responses with the already recieved responses\r\n            rl.responses = rl.responses.concat(responses);\r\n\r\n            // Increase the response count, and if it matches the required response count, resolve the promise\r\n            if (++rl.responseOriginsReceived == responseOriginCount) {\r\n                // Delete the listener, and resolve the promise\r\n                delete this.responseListeners[responseID];\r\n                rl.resolve(rl.responses);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The initial setup method to be called by this file itself, initialises the static fields of the class\r\n     * @return {undefined}\r\n     * @private\r\n     */\r\n    static __setup() {\r\n        this.windows = {0: this}; // The available windows to forward the events to\r\n        this.listeners = {}; // The event listeners in this process/window\r\n        this.responseListeners = {ID: 0}; // The response listeners in this process/window\r\n\r\n        // Check whether this is the main process or a window\r\n        if (isMain) {\r\n            this.ID = 0;\r\n\r\n            // Forward the call made by a window, and passing the sourceID to track the origin\r\n            ipcMain.on(\"IPC.forward\", (event, arg) => {\r\n                this.__send(\r\n                    arg.type,\r\n                    ExtendedJSON.decode(arg.data),\r\n                    arg.dest,\r\n                    arg.sourceID,\r\n                    arg.responseID\r\n                );\r\n            });\r\n\r\n            // Return any responses to the source process/window when recieved\r\n            ipcMain.on(\"IPC.forwardResponse\", (event, arg) => {\r\n                arg.responses = ExtendedJSON.decode(arg.responses); // __sendResponse expects non encodedData\r\n                this.__sendResponse(arg.sourceID, arg);\r\n            });\r\n\r\n            // Listen for synchonous IPC calls\r\n            ipcMain.on(\"IPC.syncCall\", (event, arg) => {\r\n                // Send the event synchrnously to all listeners, and retrieve their responses\r\n                const response = this.__sendSync(\r\n                    arg.type,\r\n                    ExtendedJSON.decode(arg.data),\r\n                    arg.sourceID\r\n                );\r\n\r\n                // Set their responses as the return datan\r\n                event.returnValue = ExtendedJSON.encode(response);\r\n            });\r\n        } else {\r\n            // Is a window thread\r\n            // this.ID gets set in windowHandler once finished loading\r\n\r\n            // Emit the IPC event to all listeners whenever it is recieved\r\n            ipcRenderer.on(\"IPC.recieve\", (event, arg) => {\r\n                // Emit the event when recieved\r\n                const getResponses = this.__emitEvent(arg.type, {\r\n                    sourceID: arg.sourceID,\r\n                    data: ExtendedJSON.decode(arg.data),\r\n                });\r\n\r\n                // Return responses\r\n                getResponses.then(responses => {\r\n                    this.__sendResponse(arg.sourceID, {\r\n                        responseID: arg.responseID,\r\n                        responseOriginCount: arg.responseOriginCount,\r\n                        responses: responses,\r\n                    });\r\n                });\r\n            });\r\n\r\n            // Call the response listener whenever the response returned\r\n            ipcRenderer.on(\"IPC.recieveResponse\", (event, arg) => {\r\n                this.__recieveResponse(\r\n                    arg.responseID,\r\n                    ExtendedJSON.decode(arg.responses),\r\n                    arg.responseOriginCount\r\n                );\r\n            });\r\n        }\r\n    }\r\n}\r\nIPC.__setup();\r\n"
        },
        "source-module.html": {
            "sourceURL": "C:\\Users\\tarde\\Documents\\Projects\\Github\\LaunchMenu\\src\\core\\registry\\module.js",
            "URL": "source-module.html",
            "sourceCode": "import ChannelHandler from \"../communication/channel/channelHandler\";\r\nimport Registry from \"./registry\";\r\nimport RequestPath from \"./requestPath\";\r\nimport BooleanProcess from \"../utils/booleanProcess\";\r\n\r\nexport default class Module {\r\n    /**\r\n     * Create a module instance which is the core building block for LM\r\n     * @param {Request} request - The request that caused this module to be instantiated\r\n     * @param {boolean} canBeDirectlyInstantiated - Whether or not this module should be instantiatable without a request\r\n     * @constructs Module\r\n     * @public\r\n     */\r\n    constructor(request, canBeDirectlyInstantiated) {\r\n        // Create the promise that gets resolved on registration\r\n        let registerPromiseResolve = null;\r\n        const registerPromise = new Promise((resolve, reject) => {\r\n            registerPromiseResolve = resolve;\r\n        });\r\n\r\n        // Create the core data of the module\r\n        this.core = {\r\n            registration: {\r\n                registered: new BooleanProcess(0),\r\n                registerPromise: registerPromise,\r\n                registerPromiseResolve: registerPromiseResolve,\r\n            },\r\n            initPromise: registerPromise, // Other methods may build upon this promise\r\n            handlers: {},\r\n            source: {},\r\n        };\r\n\r\n        // Check if the module was instanciated with a request\r\n        if (request) {\r\n            // Store the request\r\n            this.core.source = {\r\n                request: request,\r\n            };\r\n\r\n            // Register the module in the registry\r\n            this.__register();\r\n        } else if (!canBeDirectlyInstantiated) {\r\n            // Throw an error if this module was instanciated without a request but isn't allowed to\r\n            throw Error(\r\n                \"This module can only be instantiated from a handle request\"\r\n            );\r\n        }\r\n    }\r\n    /**\r\n     * Registers the module if it wasn't registered already\r\n     * @returns {Module} A reference to itself\r\n     * @async\r\n     * @private\r\n     */\r\n    async __register() {\r\n        // Chech if the module is currently unregistered\r\n        if (this.core.registration.registered.false()) {\r\n            // Indicate that we are now in the process of registering the moduke\r\n            this.core.registration.registered.turningTrue(true);\r\n\r\n            // Get the module source\r\n            const source = this.core.source;\r\n\r\n            // Check if the source contains a request that instanciated it\r\n            if (source.request) {\r\n                // Store the requestPath to this module by agumenting the request's requestPath by this module\r\n                const requestPath = new RequestPath(source.request.source);\r\n                source.requestPath = requestPath.augmentPath(\r\n                    this.getClass().modulePath,\r\n                    0\r\n                );\r\n\r\n                // Register this module in the registry (which will automatically assign a unique module ID)\r\n                await Registry._registerModuleInstance(this);\r\n\r\n                // Create a channel receiver that can be used to receive messages from other modules\r\n                this.core.channelReceiver = await ChannelHandler.createReceiver(\r\n                    source.requestPath.toString(true),\r\n                    this.__createChannelMethods()\r\n                );\r\n\r\n                // Creat a channel sender to the module that requested this module\r\n                source.channel = await ChannelHandler.createSender(\r\n                    source.request.source,\r\n                    source.request.type,\r\n                    source.requestPath.toString(true)\r\n                );\r\n\r\n                // Indicate that registering has finished and resolve the promise\r\n                this.core.registration.registered.true(true);\r\n                this.core.registration.registerPromiseResolve(this);\r\n            } else {\r\n                // If the module was not instantiated by a request, the request path is simply this module path\r\n                source.requestPath = new RequestPath(\r\n                    this.getClass().modulePath,\r\n                    0\r\n                );\r\n\r\n                // Register this module in the registry (which will automatically assign a unique module ID)\r\n                await Registry._registerModuleInstance(this);\r\n\r\n                // Create a channel receiver that can be used to receive message from other modules\r\n                this.core.channelReceiver = await ChannelHandler.createReceiver(\r\n                    source.requestPath.toString(true),\r\n                    this.__createChannelMethods()\r\n                );\r\n\r\n                // Indicate that registering has finished and resolve th epromise\r\n                this.core.registration.registered.true(true);\r\n                this.core.registration.registerPromiseResolve(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a function to run before indicating that initialisation has finished\r\n     * @param {function} method - The function to run (may be async)\r\n     * @returns {Promise} A promise that resolves when the module is initialised\r\n     * @private\r\n     */\r\n    __init(method) {\r\n        // Add the method to the chain and return the chain\r\n        return (this.core.initPromise = this.core.initPromise.then(method));\r\n    }\r\n\r\n    /**\r\n     * Adds a then and catch function to the registration completion promise\r\n     * @param {function} [then] - The function to run when registration has finished\r\n     * @param {function} [ctch] - The function to run if something goes wrong during registration\r\n     * @returns {Promise<Module>} A reference to this module instance\r\n     * @async\r\n     * @private\r\n     */\r\n    __onRegister(then, ctch) {\r\n        return this.core.registration.registerPromise.then(then).catch(ctch);\r\n    }\r\n\r\n    /**\r\n     * Adds a then and catch function to the initialization completion promise\r\n     * @param {function} [then] - The function to run when initialization has finished\r\n     * @param {function} [ctch] - The function to run if something goes wrong during initialization\r\n     * @returns {Promise<Module>} A reference to this module instance\r\n     * @async\r\n     * @private\r\n     */\r\n    onInit(then, ctch) {\r\n        return this.core.initPromise.then(then).catch(ctch);\r\n    }\r\n\r\n    // Registry related methods\r\n    /**\r\n     * Returns the path to this module instance\r\n     * @returns {string} The path to this module instance\r\n     * @public\r\n     */\r\n    toString() {\r\n        // Get the request path and get its unique string representation\r\n        return this.getPath().toString(true);\r\n    }\r\n\r\n    /**\r\n     * Returns the class of this module instance\r\n     * @returns {Class<Module>} The class of this module instance\r\n     * @public\r\n     */\r\n    getClass() {\r\n        // Get the class out of this object instance\r\n        return this.__proto__.constructor;\r\n    }\r\n\r\n    /**\r\n     * Returns the requestPath that created this module instance\r\n     * @returns {RequestPath} The request path\r\n     * @public\r\n     */\r\n    getPath() {\r\n        return this.core.source.requestPath;\r\n    }\r\n\r\n    /**\r\n     * Returns the path to this module class\r\n     * @returns {string} The path to this module class\r\n     * @public\r\n     */\r\n    static getPath() {\r\n        // Get the modulePath that has been assigned by the registry when loading the module class\r\n        return this.modulePath;\r\n    }\r\n\r\n    /**\r\n     * Returns the path to this module class\r\n     * @returns {string} The path to this module class\r\n     * @public\r\n     */\r\n    static toString() {\r\n        return this.getPath();\r\n    }\r\n\r\n    // Channel-related methods\r\n    /**\r\n     * Gets all the methods of this module that are available for channels\r\n     * @param {Regex} regexFilter - The filter to apply to determine whether or not the method should be returned\r\n     * @returns {Object} All methods indexed by name\r\n     * @private\r\n     */\r\n    __getMethods(regexFilter) {\r\n        // Set up an object to store the output methods\r\n        const output = {};\r\n\r\n        // Go through the inheritence chain\r\n        let nextProto = this.__proto__;\r\n        while (nextProto && nextProto != Module.prototype) {\r\n            // Get the prototype of which to get the methods\r\n            const proto = nextProto;\r\n            nextProto = proto.__proto__;\r\n\r\n            // Go through all methods in the class\r\n            Object.getOwnPropertyNames(proto).forEach(varName => {\r\n                // Get the variable\r\n                const variable = this.__proto__[varName];\r\n\r\n                // Check if the variable is a method that should be available for the chanenl\r\n                const isChannelMethod =\r\n                    variable instanceof Function &&\r\n                    regexFilter.test(varName) &&\r\n                    !output[varName];\r\n\r\n                if (isChannelMethod) {\r\n                    // If the method should be avaiable, remove the prefix and store it in the output\r\n                    output[varName.replace(regexFilter, \"\")] = this.__proto__[\r\n                        varName\r\n                    ];\r\n                }\r\n            });\r\n        }\r\n\r\n        // Return the output\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * Creates all methods to interact with this module over a channel\r\n     * @returns {Object} All methods indexed by name\r\n     * @private\r\n     */\r\n    __createChannelMethods() {\r\n        // Set up an object to store the output methods\r\n        const output = {};\r\n\r\n        // Get the methpds that are available for the channel\r\n        const methods = this.__getMethods(/^\\$/g);\r\n\r\n        // Go through all the methods to correctly map the channel data\r\n        Object.keys(methods).forEach(methodName => {\r\n            // Get the method from its name\r\n            const method = methods[methodName];\r\n\r\n            // Apply the event followed by the channel data as arguments for the method\r\n            output[methodName] = event => {\r\n                return method.apply(this, [event].concat(event.data));\r\n            };\r\n        });\r\n\r\n        // Set up a close method for the channel\r\n        output.close = event => {\r\n            return this.dispose();\r\n        };\r\n\r\n        // Set up a disconnectDescendant method for the channel that will detach a descendant from itself\r\n        output.disconnectDescendant = event => {\r\n            return this.__disconnectDescendant.apply(this, event.data);\r\n        };\r\n\r\n        // Return the output\r\n        return output;\r\n    }\r\n\r\n    /**\r\n     * Disconnects a module from this module (But doesn't dispose it)\r\n     * @param {RequestPath} requestPath - The request path for the module to disconnect\r\n     * @param {string} type - The type of request that the module was instiated for\r\n     * @returns {undefined}\r\n     * @private\r\n     */\r\n    __disconnectDescendant(requestPath, type) {\r\n        // Get the handler for this request type if available\r\n        const handler = this.core.handlers[type];\r\n        if (handler) {\r\n            // Extract the channels from this handler\r\n            const channels = handler.channels;\r\n\r\n            // Remove the channel that matches the requestPath\r\n            handler.channels = channels.filter(channel => {\r\n                return channel._getID() != requestPath;\r\n            });\r\n\r\n            // Remove the handler if all channels have been closed\r\n            if (handler.channels.length == 0) delete this.core.handlers[type];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes this module entirely, also getting rid of its connections to other modules\r\n     * @returns {Promise} The promise that resolves once disposal has completed\r\n     * @async\r\n     * @public\r\n     */\r\n    async dispose() {\r\n        // Check if the module is not still registering\r\n        if (this.core.registration.registered.turningTrue())\r\n            throw Error(\"Module is still registering\");\r\n\r\n        // Check if the module is registered in the first place\r\n        if (this.core.registration.registered.true()) {\r\n            // Indicate that the module is now in the process of deregestering\r\n            this.core.registration.registered.turningFalse(true);\r\n\r\n            // Object to track all the promises of modules being disposed\r\n            const channelDisposalPromises = [];\r\n\r\n            // Go through all the handlers to dispose them\r\n            Object.keys(this.core.handlers).forEach(type => {\r\n                // Get the handler and its channels\r\n                const handler = this.core.handlers[type];\r\n                const channels = handler.channels;\r\n\r\n                // Close all the handle modules and track their promises\r\n                channelDisposalPromises.push.apply(\r\n                    channelDisposalPromises,\r\n                    channels.map(channel => {\r\n                        return channel.close();\r\n                    })\r\n                );\r\n            });\r\n\r\n            // Wait for all modules to finish disposing\r\n            await Promise.all(channelDisposalPromises);\r\n\r\n            // If this module has a source channel, indicate that this module has been closed by disconnecting it\r\n            if (this.core.source.channel) {\r\n                await this.core.source.channel.disconnectDescendant(\r\n                    this.getPath().toString(true),\r\n                    this.core.source.request.type\r\n                );\r\n            }\r\n\r\n            // Dispose the channel receiver properly\r\n            await this.core.channelReceiver.close();\r\n\r\n            // Tell the registry that this module no longer exists\r\n            await Registry._deregisterModuleInstance(this);\r\n\r\n            // Indicate that deregistering has finished\r\n            this.core.registration.registered.false(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Request modules to handle the passed data and establish a connection with these modules\r\n     * @param  {Registry~Request} request - The information on how to handle the data\r\n     * @returns {Promise<ChannelSender[]>} The channel(s) that have been created to answer the request\r\n     * @async\r\n     * @public\r\n     */\r\n    async requestHandle(request) {\r\n        // Check if the module is not currently deregistering, if it is, throw an error\r\n        if (this.core.registration.registered.turningFalse())\r\n            throw Error(\"Module is currently deregistering\");\r\n\r\n        // Check if the module is currently not registered\r\n        if (this.core.registration.registered.false()) {\r\n            // Wait for the module to finish registering\r\n            await this.__register();\r\n\r\n            // Check if the module is currently registering\r\n        } else if (this.core.registration.registered.turningTrue()) {\r\n            // Wait for th emodule to finish regestering\r\n            await this.__onRegister();\r\n        }\r\n\r\n        // If no extra methods have been assigned to the request, assign it an empty object\r\n        if (!request.methods) request.methods = {};\r\n\r\n        // Set this module to be the source of the request\r\n        request.source = this;\r\n\r\n        // If this module has already made a request for this type, return those channels instead\r\n        if (this.core.handlers[request.type])\r\n            return this.core.handler[request.type].channels;\r\n\r\n        // Create a subchannel in this channel receiver to handle received data from the requested handlers\r\n        this.core.channelReceiver.createSubChannel(\r\n            request.type,\r\n            request.methods\r\n        );\r\n\r\n        // Send the request to the registry and receive its created channels\r\n        const channels = await Registry.requestHandle(request);\r\n\r\n        // Store the created handlers locally\r\n        this.core.handlers[request.type] = {\r\n            request: request,\r\n            channels: channels instanceof Array ? channels : [channels], // Make sure it is an array of channels\r\n        };\r\n\r\n        // Return the received channels\r\n        return channels;\r\n    }\r\n}\r\n"
        },
        "source-registry.html": {
            "sourceURL": "C:\\Users\\tarde\\Documents\\Projects\\Github\\LaunchMenu\\src\\core\\registry\\registry.js",
            "URL": "source-registry.html",
            "sourceCode": "import Path from \"path\";\r\nimport isMain from \"../isMain\";\r\nimport Module from \"./module\";\r\nimport RequestPath from \"./requestPath\";\r\nimport SettingsHandler from \"../communication/data/settings/settingsHandler\";\r\nimport WindowHandler from \"../window/windowHandler\";\r\nimport ChannelHandler from \"../communication/channel/channelHandler\";\r\nimport IPC from \"../communication/IPC\";\r\n\r\nconst defaultModuleData = {\r\n    location: {\r\n        window: 1,\r\n        section: 0,\r\n    },\r\n};\r\n\r\n/**\r\n * A request that can be made to retrieve a module\r\n * @typedef {Object} Registry~Request\r\n * @property {string} type - The type of handeling you are requesting\r\n * @property {('all'|'one'|function)} [use] - What modules to use to answer the request\r\n * @property {Object} [data] - Any extra data you want to pass that modules can use to determine if they can answer the request\r\n * @property {Module} [source] - The module that sent out the request (can be left out when usimg Module.requestHandle)\r\n * @property {Object} [methods] - Extra methods that can get called by the handle (is only used by Module.requestHandle)\r\n */\r\n\r\n/**\r\n * The data that is stored to track what modules can answer what requests\r\n * @typedef {Object} Registry~Requestlistener\r\n * @property {string} type - The type of request to handle\r\n * @property {Object[]} listeners - The modules that can answer this request\r\n * @property {Class<Module>} listeners[].module - The module class that can answer the request\r\n * @property {function} listeners[].filter - The filter to make sure the class can handle this request\r\n */\r\n\r\n/**\r\n * @classdesc A class to track all the modules, and handle module requests\r\n * @class\r\n * @hideconstructor\r\n */\r\nexport default class Registry {\r\n    /**\r\n     * Request modules to handle the passed data and establish a connection with these modules\r\n     * @param  {Request} request - The information on how to handle the data\r\n     * @return {Promise<ChannelSender[]>} The channel(s) that have been created to answer the request\r\n     * @async\r\n     * @public\r\n     */\r\n    static requestHandle(request) {\r\n        // Check if the request contains a valid use, if not set it to 'one'\r\n        const hasInvalidUse =\r\n            !request.use ||\r\n            (typeof request.use == \"string\" ||\r\n                !request.use.match(/^(one|all)$/g));\r\n        if (hasInvalidUse) request.use = \"one\";\r\n\r\n        // Check if the request source type is a module, if so, get its string identifier\r\n        if (request.source instanceof Module)\r\n            request.source = request.source.getPath().toString(true);\r\n\r\n        // let the private __request method handle the request\r\n        return this.__request([request], \"handle\");\r\n    }\r\n\r\n    /**\r\n     * Request module classes of a specific type\r\n     * @param {Request} request - The information on what module to get\r\n     * @returns {(Class<Module>|Array<Class<Module>>)} The module(s) that it could find with the specified type\r\n     * @public\r\n     */\r\n    static requestModule(request) {\r\n        // Get all the requests that were passed (multiple are allowed) TODO: indicate in JSdoc\r\n        var requests = Array.from(arguments);\r\n\r\n        // Normalize the format of the requests\r\n        var requests = requests.map(request => {\r\n            // If the request is only a string rather than an object, turn it into an object\r\n            if (typeof request == \"string\") request = {type: request};\r\n\r\n            // Check if the request contains a valid use, if not set it to 'one'\r\n            const hasInvalidUse =\r\n                !request.use ||\r\n                (typeof request.use == \"string\" ||\r\n                    !request.use.match(/^(one|all)$/g));\r\n            if (hasInvalidUse) request.use = \"one\";\r\n\r\n            // Return the new request variable\r\n            return request;\r\n        });\r\n\r\n        // Retrieve the request modules\r\n        const requestsModules = this.__request(requests, \"module\", true);\r\n\r\n        // Format the response appropriately\r\n        if (requestsModules.length > 1) {\r\n            const response = {};\r\n\r\n            // Map the modules to their request types\r\n            for (let i = 0; i < requestsModules.length; i++) {\r\n                const requestType = requests[i].type;\r\n                response[requestType] = requestsModules[i];\r\n            }\r\n\r\n            // Return the modules indexed by request type\r\n            return response;\r\n        } else {\r\n            // Directly return the modules from the only request\r\n            return requestsModules[0];\r\n        }\r\n    }\r\n\r\n    // Protected methods\r\n    /**\r\n     * Loads a module at the specified path relative to the modules folder\r\n     * @param {string} path - The path to the module class\r\n     * @returns {Class<Module>} The module class\r\n     * @protected\r\n     */\r\n    static _loadModule(path) {\r\n        // Only load the module if it hadn't been loaded already\r\n        if (!this.moduleClasses[path]) {\r\n            // Require module\r\n            const data = require(this.__getModulesPath(path));\r\n\r\n            // Verify all necessary data is passed\r\n            if (data) {\r\n                const clas = data.default;\r\n                const config = data.config;\r\n                // Check if the module returned a config\r\n                if (config) {\r\n                    // Augment data with some variables that can be extracted\r\n                    clas.modulePath = path;\r\n                    config.module = clas;\r\n\r\n                    // Register the module itself\r\n                    this.moduleClasses[path] = data;\r\n\r\n                    // Add listener to the list of listeners for this request type\r\n                    const listeners = this.__getListeners(config.type);\r\n                    listeners.listeners.push(config);\r\n                } else {\r\n                    // If the module didn't return a config, simply return the exports of the file\r\n                    return data;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return the module\r\n        return this.moduleClasses[path];\r\n    }\r\n    /**\r\n     * Loads all the modules\r\n     * @returns {Array<Class<Module>>} All the module classes that have been loaded\r\n     * @protected\r\n     */\r\n    static _loadAllModules() {\r\n        //TODO: make a module loader\r\n    }\r\n\r\n    /**\r\n     * Registeres the module so the registry knows of its existence\r\n     * @param {Module} moduleInstance - The module to register\r\n     * @returns {number} The unique ID that the module instance has now been assigned\r\n     * @async\r\n     * @protected\r\n     */\r\n    static async _registerModuleInstance(moduleInstance) {\r\n        // Store the instance in this module/process\r\n        this.moduleInstances.push(moduleInstance);\r\n\r\n        // Get the a unique ID for the request path\r\n        const requestPath = moduleInstance.getPath();\r\n        const ID = (await IPC.send(\r\n            \"Registry.registerModuleInstance\",\r\n            {\r\n                requestPath: requestPath.toString(true),\r\n            },\r\n            0\r\n        ))[0];\r\n\r\n        // Assign the ID to this request path and return it\r\n        requestPath.getModuleID().ID = ID;\r\n        return ID;\r\n    }\r\n\r\n    /**\r\n     * Deregisters the module so the registry knows it is no longer used\r\n     * @param {Module} moduleInstance - The module to deregister\r\n     * @returns {undefined}\r\n     * @async\r\n     * @protected\r\n     */\r\n    static async _deregisterModuleInstance(moduleInstance) {\r\n        // Remove the module path in the main process\r\n        const requestPath = moduleInstance.getPath();\r\n        await IPC.send(\r\n            \"Registry.deregisterModuleInstance\",\r\n            {\r\n                requestPath: requestPath.toString(true),\r\n            },\r\n            0\r\n        );\r\n\r\n        // Remove the instance from this process/window\r\n        const index = this.moduleInstances.indexOf(moduleInstance);\r\n        if (index !== -1) this.moduleInstances.splice(index, 1);\r\n\r\n        // Close this window if there are no more modules in it\r\n        if (this.moduleInstances.length == 0) WindowHandler._close();\r\n    }\r\n\r\n    /**\r\n     * Returns the amount of modules that are currently registered\r\n     * @returns {number} The amount of modules are currently registered\r\n     * @protected\r\n     */\r\n    static _getModuleInstanceCount() {\r\n        return this.moduleInstances.length;\r\n    }\r\n\r\n    // Private methods\r\n    /**\r\n     * Creates an object to store what classes can answer a certain request type if it hasn't been created already, and returns it\r\n     * @param {String} type - The request type to return the object of\r\n     * @returns {Registry~Requestlistener} An object that tracks the listeners for a certain request type\r\n     * @private\r\n     */\r\n    static __getListeners(type) {\r\n        // Create listeners type variable if not available\r\n        if (!this.listeners[type])\r\n            this.listeners[type] = {\r\n                type: type,\r\n                listeners: [],\r\n            };\r\n\r\n        // Return listener type\r\n        return this.listeners[type];\r\n    }\r\n\r\n    /**\r\n     * Returns the relative path from this class to the modules directory\r\n     * @param {String} [path=\"\"] - The path to append to the modules directory\r\n     * @returns {String} The relative path to the directory\r\n     * @private\r\n     */\r\n    static __getModulesPath(path = \"\") {\r\n        return Path.join(\"..\", \"..\", \"modules\", path);\r\n    }\r\n\r\n    /**\r\n     * Retrieves the modules that can handle the passed request\r\n     * @param {Registry~Request} request - The request to find module classes for\r\n     * @returns {(Class<Module>|Array<Class<Module>>)} The module classes that have been chosen to handle the request\r\n     * @private\r\n     */\r\n    static __getModules(request) {\r\n        // Get the module listeners to handle this type of request\r\n        const listenerType = this.__getListeners(request.type);\r\n\r\n        // Map modules with their priority to this particular request\r\n        const priorities = listenerType.listeners\r\n            .map(listener => {\r\n                return {\r\n                    priority: listener.filter(request),\r\n                    module: listener.module,\r\n                };\r\n            })\r\n            .filter(priority => priority.priority > 0);\r\n\r\n        // Sort the results\r\n        priorities.sort((a, b) => b.priority - a.priority);\r\n\r\n        // Determine what modules to return\r\n        if (request.use == \"all\") {\r\n            // If all modules should be returned, simply extract the modules from the priority data and return them\r\n            return priorities.map(a => a.module);\r\n        } else if (typeof request.use == \"Function\") {\r\n            // If a filter function is provided, apply it and then extract the modules from the data and return them\r\n            return priorities.filter(request.use).map(a => a.module);\r\n        } else {\r\n            // Otherwise only a single module should be returned, so simply return this module\r\n            return priorities[0] && priorities[0].module;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finishes the request by serving the correct data based on the module classes that were found\r\n     * @param {('module'|'handle')} type - The type of request that was made (either to handle data, or to get modules)\r\n     * @param {Registry~Request[]} requests - The requests that are being finished (only contains 1 if type=='handle')\r\n     * @param {Array<Array<Class<Module>>>} requestsModules - The modules that are found to match each request\r\n     * @returns {(Promise<Array<Array<Class<Module>>>>|Promise<ChannelSender[]>|Promise<ChannelSender>)} The data that the request results in\r\n     * @async\r\n     * @private\r\n     */\r\n    static async __finishRequest(type, requests, requestsModules) {\r\n        // Resolve request by simply returning the module if it was a module request,\r\n        //      or instanciate a module and return a channel on a handle request\r\n        if (type == \"module\") {\r\n            return requestsModules;\r\n        } else if (type == \"handle\") {\r\n            // The handle type only permits 1 request to exist\r\n            let requestModules = requestsModules[0];\r\n            const request = requests[0];\r\n\r\n            // In order to batch the await, instead of waiting between each open instance request\r\n            const instantiatePromises = [];\r\n\r\n            if (!(requestModules instanceof Array))\r\n                requestModules = [requestModules];\r\n\r\n            // Go through modules for 1 request\r\n            requestModules.forEach(module => {\r\n                try {\r\n                    // Create the proper request path\r\n                    let source;\r\n                    if (request.source) {\r\n                        source = new RequestPath(request.source).augmentPath(\r\n                            module\r\n                        );\r\n                    } else {\r\n                        source = new RequestPath(module);\r\n                    }\r\n\r\n                    // Attempt to retrieve the correct startup settings\r\n                    let moduleData = SettingsHandler._getModuleFile(source);\r\n                    if (!moduleData)\r\n                        moduleData = SettingsHandler._getModuleFile(\r\n                            new RequestPath(module)\r\n                        );\r\n                    if (!moduleData) moduleData = defaultModuleData;\r\n\r\n                    // Open the window that the module should appear in\r\n                    instantiatePromises.push(\r\n                        WindowHandler.openModuleInstance(\r\n                            moduleData,\r\n                            request,\r\n                            module.toString()\r\n                        )\r\n                    );\r\n                } catch (e) {\r\n                    // TODO: properply handle the error if something goes wrong\r\n                    console.error(\r\n                        `Something went wrong while trying to instantiate ${module}: `,\r\n                        e\r\n                    );\r\n                }\r\n            });\r\n\r\n            // Wait for all the promises to resolve and get their channels\r\n            const channels = await Promise.all(instantiatePromises);\r\n\r\n            // Determine whether to return only a single channel or an array of channels and return it\r\n            if (request.use == \"one\") {\r\n                return channels[0];\r\n            } else {\r\n                return channels.filter(channel => channel); // Remove failed instanciations\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles one or more requests and serves the responses\r\n     * @param {Registry~Request[]} requests - The requests to make\r\n     * @param {('module'|'handle')} type - The type of request that was made (either to handle data, or to get modules)\r\n     * @param {boolean} synced - Whether or not to request data synchronously (can only be synced if type=='module')\r\n     * @returns {(Promise<Array<Array<Class<Module>>>>|Promise<ChannelSender[]>|Promise<ChannelSender>)} The data that the request results in\r\n     * @private\r\n     */\r\n    static __request(requests, type, synced) {\r\n        if (synced) {\r\n            if (isMain) {\r\n                // Directly resolve the request as we have access to all modules\r\n                return requests.map(request => {\r\n                    return this.__getModules(request);\r\n                });\r\n            } else {\r\n                // Send a command to the main window to look for modules to resolve the request\r\n                return IPC.sendSync(\"Registry.request\", requests)[0];\r\n            }\r\n        } else {\r\n            // Retrieve the modules to resolve the request\r\n            if (isMain) {\r\n                // Directly resolve the request as we have access to all modules\r\n                const requestsModules = requests.map(request => {\r\n                    return this.__getModules(request);\r\n                });\r\n                return this.__finishRequest(type, requests, requestsModules);\r\n            } else {\r\n                // Send a command to the main window to look for modules to resolve the request\r\n                return IPC.send(\"Registry.request\", requests, 0).then(\r\n                    responses => {\r\n                        const requestsModules = responses[0];\r\n\r\n                        return this.__finishRequest(\r\n                            type,\r\n                            requests,\r\n                            requestsModules\r\n                        );\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    // TODO: test if this method works at all\r\n    /**\r\n     * Gets channels to all instances of a specific module class\r\n     * @param {(Class<Module>|Module)} module - The module to get the instance of\r\n     * @param {string} [subChannel] - The sub channel to target\r\n     * @param {(Module|string)} source - The channelID to return messages to if needed\r\n     * @param {number} [windowID] - Only looks in this window for instances if provided\r\n     * @returns {Promise<ChannelSender[]>} The channels that were set up for the found modules\r\n     * @async\r\n     * @public\r\n     */\r\n    static async getModuleInstanceChannels(\r\n        module,\r\n        subChannel,\r\n        source,\r\n        windowID\r\n    ) {\r\n        // Get the module class path from the module\r\n        if (module.getClass) module = module.getClass();\r\n        if (module.getPath) module = module.getPath();\r\n\r\n        // Ask for all module instances from main\r\n        const instancePaths = (await IPC.send(\r\n            \"Registry.getModuleInstances\",\r\n            module,\r\n            0\r\n        ))[0];\r\n\r\n        // Get the actual unique request path from the module\r\n        if (source.getPath) source = source.getPath().toString(true);\r\n\r\n        // If a windowID is specified, filter the instancePaths so only ones in the correct window are kept\r\n        if (windowID != undefined)\r\n            instancePaths = instancePaths.filter(path => {\r\n                return path.windowID == windowID;\r\n            });\r\n\r\n        // Create a channel for each of retrieved instance paths\r\n        const channels = instancePaths.map(path => {\r\n            return ChannelHandler.createSender(path.path, subChannel, source);\r\n        });\r\n\r\n        // Wait for all channels to be created and then return them\r\n        return Promise.all(channels);\r\n    }\r\n\r\n    /**\r\n     * The initial setup method to be called by this file itself, initialises the static fields of the class\r\n     * @return {undefined}\r\n     * @private\r\n     */\r\n    static __setup() {\r\n        // Stores the listeners for handle and module requests, indexed by type\r\n        this.listeners = {};\r\n\r\n        // Stores the registered modules themselves, indexed by path\r\n        this.moduleClasses = {};\r\n\r\n        // Stores instances of modules registered in this window/process\r\n        this.moduleInstances = [];\r\n\r\n        // Set up the IPC listeners in the renderers and main process to allow renderers to request modules\r\n        if (isMain) {\r\n            // Filter out possible modules in this window to handle the handle request\r\n            IPC.on(\"Registry.request\", event => {\r\n                const requests = event.data;\r\n\r\n                // Retrieve the priority mapping for every request\r\n                const requestsModules = requests.map(request => {\r\n                    return this.__getModules(request);\r\n                });\r\n\r\n                // Return the mapping of modules and their priorities\r\n                return requestsModules;\r\n            });\r\n\r\n            // Stores unique module instance request paths, indexed by [request path][UID]\r\n            this.requestPaths = {};\r\n\r\n            // Stores unique module instance request path lists, indexed by module path\r\n            this.moduleInstancePaths = {};\r\n\r\n            // Listen for module instances being registered\r\n            IPC.on(\"Registry.registerModuleInstance\", event => {\r\n                // Get the request path for the module to register\r\n                const requestPath = new RequestPath(event.data.requestPath);\r\n\r\n                // Get the module class of the path to register\r\n                const moduleClass = requestPath.getModuleID().module;\r\n\r\n                // Retrieve the request path list that exists for that class, or create it if non-existent\r\n                let pathList = this.moduleInstancePaths[moduleClass];\r\n                if (!pathList)\r\n                    pathList = this.moduleInstancePaths[moduleClass] = [];\r\n\r\n                // Add this path to the list together with the window it is stored in\r\n                pathList.push({\r\n                    window: event.sourceID,\r\n                    path: requestPath.toString(true),\r\n                });\r\n\r\n                // Retrieve the path collection that exists for this non unique request path, or create it if non-existent\r\n                let paths = this.requestPaths[requestPath.toString()];\r\n                if (!paths)\r\n                    paths = this.requestPaths[requestPath.toString()] = {};\r\n\r\n                // Find a unique ID in this collection\r\n                let ID = 0;\r\n                while (paths[ID]) ID++;\r\n\r\n                // Asssign this unique ID to the last module of the request path and store the path\r\n                requestPath.getModuleID().ID = ID;\r\n                paths[ID] = requestPath;\r\n\r\n                // Return the unique request path identifier\r\n                return ID;\r\n            });\r\n\r\n            // Listen for module instances being deregistered\r\n            IPC.on(\"Registry.deregisterModuleInstance\", event => {\r\n                // Get the request path for the module to deregister\r\n                const requestPath = new RequestPath(event.data.requestPath);\r\n\r\n                // Get the module class of the path to deregister\r\n                const moduleClass = requestPath.getModuleID().module;\r\n\r\n                // Get the paths that are stored for this class\r\n                const pathList = this.moduleInstancePaths[moduleClass];\r\n                if (pathList) {\r\n                    // get the unique request path in string form\r\n                    const requestPathString = requestPath.toString(true);\r\n\r\n                    // Filter out the object that corresponds with this string\r\n                    this.moduleInstancePaths[moduleClass] = pathList.filter(\r\n                        path => {\r\n                            return path.path != requestPathString;\r\n                        }\r\n                    );\r\n                }\r\n\r\n                // Get the unique path identifier from the request path\r\n                const ID = requestPath.getModuleID().ID;\r\n\r\n                // Retrieve the path collection that exists for this non unique request path, and delete the path with this unique ID\r\n                const paths = this.requestPaths[requestPath.toString()];\r\n                if (paths) delete paths[ID];\r\n            });\r\n\r\n            // Listen for windows/processes requesting instances of a certain module\r\n            IPC.on(\"Registry.getModuleInstances\", event => {\r\n                // Extract the module class path that we are looking for\r\n                const data = event.data;\r\n                const modulePath = data.modulePath;\r\n\r\n                // Return the request path attached to this class\r\n                return this.moduleInstancePaths[modulePath];\r\n            });\r\n        }\r\n    }\r\n}\r\nRegistry.__setup();\r\n"
        },
        "source-requestPath.html": {
            "sourceURL": "C:\\Users\\tarde\\Documents\\Projects\\Github\\LaunchMenu\\src\\core\\registry\\requestPath.js",
            "URL": "source-requestPath.html",
            "sourceCode": "import IPC from \"../communication/IPC\";\r\nimport Module from \"./module\";\r\n/**\r\n * @typedef {Object} RequestPath~ModuleID\r\n * @property {string} module - The path to the module class\r\n * @property {number} ID - The unique ID of the module instance\r\n */\r\n\r\nclass RequestPath {\r\n    /**\r\n     * Create a request path that can be used to uniquely identifying module instances\r\n     * @param {string} path - The string representation of the request path\r\n     * @constructs RequestPath\r\n     */\r\n    constructor(path) {\r\n        // Stringify the path if it is of unknown form (requestPath?)\r\n        if (typeof path != \"string\" && !(path instanceof Array))\r\n            path = path.toString(true);\r\n\r\n        // Extract the moduleIDs if the path is a string\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\"->\").map(module => {\r\n                module = module.split(\":\");\r\n                return {\r\n                    module: module[0],\r\n                    ID: Number(module[1] || 0),\r\n                };\r\n            });\r\n        }\r\n\r\n        // Store the moduleID array\r\n        this.modules = path;\r\n    }\r\n\r\n    /**\r\n     * Gets the string representation of this path\r\n     * @param {boolean} unique - Whether or not to include the unique ID of each module instance\r\n     * @returns {string} The string representation of this request path\r\n     * @public\r\n     */\r\n    toString(unique) {\r\n        return this.modules\r\n            .map(module => {\r\n                if (unique) return module.module + \":\" + module.ID;\r\n                return module.module + \"\";\r\n            })\r\n            .join(\"->\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of RequestPath with the last n modules removed\r\n     * @param {number} removeCount - The number of modules to remove\r\n     * @returns {RequestPath} The newly created request path\r\n     * @public\r\n     */\r\n    getSubPath(removeCount) {\r\n        // Create a copy of this request path\r\n        const requestPath = new RequestPath(this.toString(true));\r\n\r\n        // Remove n of the last modules in the path\r\n        const modules = requestPath.modules;\r\n        modules.splice(modules.length - removeCount, removeCount);\r\n\r\n        // Return the new request path\r\n        return requestPath;\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of RequestPath with a new module added\r\n     * @param {(Module|string)} module - The module to append to the path\r\n     * @param {number} ID - The unique ID of the module that is added\r\n     * @returns {RequestPath} The newly created request path\r\n     * @public\r\n     */\r\n    augmentPath(module, ID) {\r\n        // Make sure the module is a string of the module class path\r\n        if (module.getClass) module = module.getClass();\r\n        if (typeof module != \"string\") module = module.getPath();\r\n\r\n        // Create a copy of the request path\r\n        const requestPath = new RequestPath(this.toString(true));\r\n\r\n        // Append a moduleID to thie modules of this request path\r\n        requestPath.modules.push({\r\n            module: module,\r\n            ID: Number(ID || 0),\r\n        });\r\n\r\n        // Return the new request path\r\n        return requestPath;\r\n    }\r\n\r\n    /**\r\n     * Returns the moduleID at a specific index\r\n     * @param {number} [index] - The indedx at which to get the module (returns the last if left out)\r\n     * @returns {RequestPath~ModuleID} The moduleID\r\n     * @public\r\n     */\r\n    getModuleID(index) {\r\n        // Select the last index if none was provided\r\n        if (index == undefined) index = this.modules.length - 1;\r\n\r\n        // Return the moduleID\r\n        return this.modules[index];\r\n    }\r\n}\r\nexport default RequestPath;\r\n"
        },
        "source-booleanProcess.html": {
            "sourceURL": "C:\\Users\\tarde\\Documents\\Projects\\Github\\LaunchMenu\\src\\core\\utils\\booleanProcess.js",
            "URL": "source-booleanProcess.html",
            "sourceCode": "export default class State {\r\n    /**\r\n     * Create a new State object to track an async boolean state\r\n     * @param {('0'|'1'|'2'|'3')} [state] - The initial state\r\n     * @constructs State\r\n     * @public\r\n     */\r\n    constructor(state) {\r\n        this.state = state || 0;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is true, or turn it to true\r\n     * @param {boolean} [setState] - Whether to turn the state to true\r\n     * @returns {boolean} If the state is true\r\n     * @public\r\n     */\r\n    true(setState) {\r\n        if (setState) this.state = 2;\r\n        return this.state == 2;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is false, or turn it to false\r\n     * @param {boolean} [setState] - Whether to turn the state to false\r\n     * @returns {boolean} If the state is false\r\n     * @public\r\n     */\r\n    false(setState) {\r\n        if (setState) this.state = 0;\r\n        return this.state == 0;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is turning true, or turn it to turning true\r\n     * @param {boolean} [setState] - Whether to turn the state to turning true\r\n     * @returns {boolean} If the state is turning true\r\n     * @public\r\n     */\r\n    turningTrue(setState) {\r\n        if (setState) this.state = 1;\r\n        return this.state == 1;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is turning false, or turn it to turning false\r\n     * @param {boolean} [setState] - Whether to turn the state to turning false\r\n     * @returns {boolean} If the state is turning false\r\n     * @public\r\n     */\r\n    turningFalse(setState) {\r\n        if (setState) this.state = 3;\r\n        return this.state == 3;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is true ot turning true\r\n     * @returns {boolean} If the state is true orturning true\r\n     * @public\r\n     */\r\n    trueOrTurningTrue() {\r\n        return this.state == 1 || this.state == 2;\r\n    }\r\n\r\n    /**\r\n     * Check whether the state is false ot turning false\r\n     * @returns {boolean} If the state is false orturning false\r\n     * @public\r\n     */\r\n    falseOrTurningFalse() {\r\n        return this.state == 0 || this.state == 3;\r\n    }\r\n}\r\n"
        },
        "source-windowHandler.html": {
            "sourceURL": "C:\\Users\\tarde\\Documents\\Projects\\Github\\LaunchMenu\\src\\core\\window\\windowHandler.js",
            "URL": "source-windowHandler.html",
            "sourceCode": "import {app, BrowserWindow, ipcMain, ipcRenderer} from \"electron\";\r\nimport Url from \"url\";\r\nimport Path from \"path\";\r\nimport SettingsHandler from \"../communication/data/settings/settingsHandler\";\r\nimport ChannelHandler from \"../communication/channel\";\r\nimport IPC from \"../communication/IPC\";\r\nimport Registry from \"../registry/registry\";\r\nimport isMain from \"../isMain\";\r\n\r\nlet windowSettings;\r\nlet settingsPromise;\r\nfunction settingsLoaded() {\r\n    // Create a promise if not present yet\r\n    if (!settingsPromise)\r\n        // create a settings object to store window data\r\n        settingsPromise = SettingsHandler._create(\"windowCore\", {\r\n            windows: {},\r\n        }).then(settings => {\r\n            // Store these settings when retrieved\r\n            windowSettings = settings;\r\n        });\r\n\r\n    // return the settings initialisation promise\r\n    return settingsPromise;\r\n}\r\n\r\n/**\r\n * @classdesc A static class that allows for the creation and destruction of windows\r\n * @class\r\n * @hideconstructor\r\n */\r\nexport default class WindowHandler {\r\n    /**\r\n     * Opens a window according to the saved settings of that window\r\n     * @param {number} windowID - The ID of the window to open\r\n     * @returns {Promise} Resolves once the window fully opened and loaded\r\n     * @async\r\n     * @private\r\n     */\r\n    static async __open(windowID) {\r\n        // Check if we are trying to open a window with a valid ID\r\n        if (windowID < 1) {\r\n            throw Error(\"Window IDs must start from 1\");\r\n        }\r\n\r\n        // Check if this code is ran in the main process\r\n        if (!isMain) {\r\n            // If it is not ran in the main process, forward the call to the main process\r\n            return IPC.send(\"WindowHandler.open\", {\r\n                ID: windowID,\r\n            });\r\n        } else {\r\n            // If the window is already opened return\r\n            if (this.openedWindows[windowID]) return;\r\n\r\n            // If the window is already opening, return its promise\r\n            if (this.openingWindows[windowID])\r\n                return this.openingWindows[windowID];\r\n\r\n            // Create a new opening promise indicating that the window is currently opening, but only after the settings have loaded\r\n            return (this.openingWindows[windowID] = settingsLoaded().then(\r\n                async () => {\r\n                    // Get the settings for this particular window\r\n                    let settings = windowSettings.get(`windows.${windowID}`);\r\n\r\n                    // Set default data if these settings are absent\r\n                    if (!settings) {\r\n                        await windowSettings.change({\r\n                            windows: {\r\n                                [windowID]: {\r\n                                    width: 800,\r\n                                    height: 600,\r\n                                    sections: {\r\n                                        0: {\r\n                                            width: 100,\r\n                                            height: 100,\r\n                                            x: 0,\r\n                                            y: 0,\r\n                                            module: \"none\",\r\n                                        },\r\n                                    },\r\n                                },\r\n                            },\r\n                        });\r\n                        settings = windowSettings.get(`windows.${windowID}`);\r\n                    }\r\n\r\n                    // Create a browser window according to these settings\r\n                    const window = new BrowserWindow({\r\n                        width: settings.width,\r\n                        height: settings.height,\r\n                    });\r\n\r\n                    // Load the window index path into this window\r\n                    window.loadURL(\r\n                        Url.format({\r\n                            pathname: Path.join(__dirname, \"windowIndex.html\"),\r\n                            protocol: \"file:\",\r\n                            slashes: true,\r\n                        })\r\n                    );\r\n\r\n                    // Open dev tools for debugging TODO: add some option to disable/enable this\r\n                    window.openDevTools();\r\n\r\n                    // Wait for the window to finish loading\r\n                    await new Promise((resolve, reject) => {\r\n                        window.webContents.on(\"did-finish-load\", () => {\r\n                            resolve();\r\n                        });\r\n                    });\r\n\r\n                    // Assign an ID to the window (LM IPC uses this, so we need to use lower level IPC until compeleted)\r\n                    await new Promise((resolve, reject) => {\r\n                        // A listener that resolves the promise when a IPC assignment event is received, in which case the listener is also removed\r\n                        const waitForAssignment = (event, args) => {\r\n                            if (args.ID == windowID) {\r\n                                ipcMain.removeListener(\r\n                                    \"WindowHandler.assignedID\",\r\n                                    waitForAssignment\r\n                                );\r\n                                resolve();\r\n                            }\r\n                        };\r\n\r\n                        // Enable the listener\r\n                        ipcMain.on(\r\n                            \"WindowHandler.assignedID\",\r\n                            waitForAssignment\r\n                        );\r\n\r\n                        // Send the ID assignment to complete initialisation\r\n                        window.webContents.send(\"WindowHandler.assignID\", {\r\n                            ID: windowID,\r\n                        });\r\n                    });\r\n\r\n                    // Register the newly created window in IPC so the higher level IPC class can send message to it\r\n                    IPC._registerWindow(window, windowID);\r\n\r\n                    // Finish the window initialisation\r\n                    await IPC.send(\"WindowHandler.initialise\", {}, windowID);\r\n\r\n                    // Store the opened window and delete the opening promise\r\n                    this.openedWindows[windowID] = window;\r\n                    delete this.openingWindows[windowID];\r\n                }\r\n            ));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Close a window (Doesn't properly dispose the modules loaded inside it)\r\n     * @param {number} [windowID] - The ID of the window to close\r\n     * @returns {Promise} Resolves once the window has fulyl closed\r\n     * @async\r\n     * @protected\r\n     */\r\n    static async _close(windowID) {\r\n        // If no windowID is provided, use the ID of the window this code is running in\r\n        if (!windowID) windowID = this.ID;\r\n\r\n        // Check if we are trying to open a window with a valid ID\r\n        if (windowID < 1) {\r\n            throw Error(\"Window IDs must start from 0\");\r\n        } else {\r\n            // Check if this code is ran in the main process\r\n            if (!isMain) {\r\n                // If it is not ran in the main process, forward the call to the main process\r\n                return IPC.send(\"WindowHandler.close\", {\r\n                    ID: windowID,\r\n                });\r\n            } else {\r\n                // If the window is not opened, throw an error\r\n                if (!this.openedWindows[windowID])\r\n                    throw Error(\"Window must be opened in order to close\");\r\n\r\n                // Get the window in order to close it\r\n                const window = this.openedWindows[windowID];\r\n\r\n                // Indicate that the window is no longer opened\r\n                this.openedWindows[windowID] = null;\r\n\r\n                // Tell IPC that this window no longer exists\r\n                IPC._deregisterWindow(windowID);\r\n\r\n                // Close the actual window\r\n                // Give stuff some time to properly finish\r\n                // TODO: do more research as to why it crashes on immediate close\r\n                window.hide();\r\n                setTimeout(() => {\r\n                    window.close();\r\n                }, 10);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Opens a module in the proper window, will automatically open the window if it isn't already\r\n     * @param {object} moduleData - The settings data for the module to open\r\n     * @param {Registry~Request} request - The request that caused this module to be opened\r\n     * @param {strubg} modulePath - The path to the class of the module to be instantiated\r\n     * @returns {Promise<ChannelSender>} A channel to the module that has been created\r\n     * @async\r\n     * @public\r\n     */\r\n    static async openModuleInstance(moduleData, request, modulePath) {\r\n        // Retrieve the infoormation for where to instanciate the module\r\n        const windowID = moduleData.location.window;\r\n        const sectionID = moduleData.location.section;\r\n\r\n        // Open the window that the module should be instanciated in\r\n        await this.__open(windowID);\r\n\r\n        // Send a request to main to create the instance, and return its unique request path\r\n        const requestPath = (await IPC.send(\r\n            \"WindowHandler.openModule\",\r\n            {\r\n                request: request,\r\n                modulePath: modulePath,\r\n                moduleData: moduleData,\r\n            },\r\n            windowID\r\n        ))[0];\r\n\r\n        // Check if a request path is returned, if it wasn't, it could be that the window was just closing\r\n        if (requestPath) {\r\n            // Create a channel sender to this module instance and return it\r\n            return ChannelHandler.createSender(\r\n                requestPath,\r\n                undefined,\r\n                request.source\r\n            );\r\n        } else {\r\n            // Try again\r\n            await openModuleInstance.apply(this, arguments);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The initial setup method to be called by this file itself, initialises the static fields of the class\r\n     * @return {undefined}\r\n     * @private\r\n     */\r\n    static __setup() {\r\n        if (isMain) {\r\n            // Set the own process/window ID to be 0\r\n            this.ID = 0;\r\n\r\n            // Forward a window open request to the __open method\r\n            IPC.on(\"WindowHandler.open\", event => {\r\n                const data = event.data;\r\n                const ID = data.ID;\r\n                return this.__open(ID);\r\n            });\r\n\r\n            // Forward a window clsoe request to the __close method\r\n            IPC.on(\"WindowHandler.close\", event => {\r\n                const data = event.data;\r\n                const ID = data.ID;\r\n                this._close(ID != null ? ID : event.sourceID);\r\n            });\r\n\r\n            // Keep track of what windows are currently opened and what windows are currently openeing\r\n            this.openedWindows = {};\r\n            this.openingWindows = {};\r\n        } else {\r\n            // Open a module when a request is received\r\n            IPC.on(\"WindowHandler.openModule\", async event => {\r\n                const data = event.data;\r\n                try {\r\n                    // Load the module class from the passed module path\r\n                    const moduleExport = Registry._loadModule(data.modulePath);\r\n                    const ModuleClass = moduleExport.default;\r\n\r\n                    // Instanciate the module from the class\r\n                    const module = new ModuleClass(data.request);\r\n\r\n                    // Wait for the module to finish initialising\r\n                    await module.onInit();\r\n\r\n                    // Return the the unique path to the module\r\n                    return module.getPath().toString(true);\r\n                } catch (e) {\r\n                    // TODO: properply handle the error when something goes wrong\r\n                    console.error(\r\n                        `Something went wrong while trying to instantiate ${\r\n                            data.modulePath\r\n                        }`,\r\n                        e\r\n                    );\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            // Use low level IPC to assign the correct window ID\r\n            ipcRenderer.once(\"WindowHandler.assignID\", async (event, args) => {\r\n                const windowID = args.ID;\r\n                window.ID = IPC.ID = this.ID = windowID;\r\n\r\n                // Notify the main process that the ID was assigned\r\n                ipcRenderer.send(\"WindowHandler.assignedID\", {ID: windowID});\r\n            });\r\n\r\n            // Use higher level IPC to finish the initiialisation\r\n            IPC.once(\"WindowHandler.initialise\", async event => {\r\n                const windowID = this.ID;\r\n\r\n                // Load the window settings\r\n                const windowSettings = await SettingsHandler._create(\r\n                    \"windowCore\"\r\n                );\r\n                const settings = windowSettings.get(`windows.${windowID}`);\r\n                window.settings = settings;\r\n\r\n                // TODO: setup GUI sections and load the modules\r\n                console.log(settings);\r\n            });\r\n        }\r\n    }\r\n}\r\nWindowHandler.__setup();\r\n"
        }
    }
}